

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Dec 15 17:17:42 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    37                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    40                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    41                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    42                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    43  0000                     
    44                           ; Version 2.20
    45                           ; Generated 12/02/2020 GMT
    46                           ; 
    47                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F4550 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     _LATEbits	set	3981
    79  0000                     _PORTBbits	set	3969
    80  0000                     _LATA	set	3977
    81  0000                     _INTCON3bits	set	4080
    82  0000                     _INTCON2bits	set	4081
    83  0000                     _INTCONbits	set	4082
    84  0000                     _RCONbits	set	4048
    85  0000                     _TRISEbits	set	3990
    86  0000                     _ADCON1bits	set	4033
    87  0000                     _RCREG	set	4014
    88  0000                     _TXREG	set	4013
    89  0000                     _RCSTAbits	set	4011
    90  0000                     _TXSTAbits	set	4012
    91  0000                     _SPBRG	set	4015
    92  0000                     _TRISCbits	set	3988
    93  0000                     _LATDbits	set	3980
    94  0000                     _TRISD	set	3989
    95  0000                     _PORTD	set	3971
    96  0000                     _TRISDbits	set	3989
    97                           
    98                           	psect	smallconst
    99  000800                     __psmallconst:
   100                           	callstack 0
   101  000800  00                 	db	0
   102  000801                     STR_5:
   103                           
   104                           ; BSR set to: 0
   105  000801  73                 	db	115	;'s'
   106  000802  61                 	db	97	;'a'
   107  000803  6C                 	db	108	;'l'
   108  000804  6F                 	db	111	;'o'
   109  000805  6E                 	db	110	;'n'
   110  000806  20                 	db	32
   111  000807  31                 	db	49	;'1'
   112  000808  3A                 	db	58	;':'
   113  000809  20                 	db	32
   114  00080A  25                 	db	37
   115  00080B  64                 	db	100	;'d'
   116  00080C  20                 	db	32
   117  00080D  20                 	db	32
   118  00080E  20                 	db	32
   119  00080F  20                 	db	32
   120  000810  20                 	db	32
   121  000811  20                 	db	32
   122  000812  20                 	db	32
   123  000813  20                 	db	32
   124  000814  20                 	db	32
   125  000815  00                 	db	0
   126  000816                     STR_6:
   127                           
   128                           ; BSR set to: 0
   129  000816  73                 	db	115	;'s'
   130  000817  61                 	db	97	;'a'
   131  000818  6C                 	db	108	;'l'
   132  000819  6F                 	db	111	;'o'
   133  00081A  6E                 	db	110	;'n'
   134  00081B  20                 	db	32
   135  00081C  32                 	db	50	;'2'
   136  00081D  3A                 	db	58	;':'
   137  00081E  20                 	db	32
   138  00081F  25                 	db	37
   139  000820  64                 	db	100	;'d'
   140  000821  20                 	db	32
   141  000822  20                 	db	32
   142  000823  20                 	db	32
   143  000824  20                 	db	32
   144  000825  20                 	db	32
   145  000826  20                 	db	32
   146  000827  00                 	db	0
   147  000828                     STR_9:
   148                           
   149                           ; BSR set to: 0
   150  000828  2A                 	db	42
   151  000829  2A                 	db	42
   152  00082A  2A                 	db	42
   153  00082B  45                 	db	69	;'E'
   154  00082C  4D                 	db	77	;'M'
   155  00082D  45                 	db	69	;'E'
   156  00082E  52                 	db	82	;'R'
   157  00082F  47                 	db	71	;'G'
   158  000830  45                 	db	69	;'E'
   159  000831  4E                 	db	78	;'N'
   160  000832  43                 	db	67	;'C'
   161  000833  49                 	db	73	;'I'
   162  000834  41                 	db	65	;'A'
   163  000835  2A                 	db	42
   164  000836  2A                 	db	42
   165  000837  2A                 	db	42
   166  000838  00                 	db	0
   167  000839                     STR_3:
   168                           
   169                           ; BSR set to: 0
   170  000839  2A                 	db	42
   171  00083A  53                 	db	83	;'S'
   172  00083B  41                 	db	65	;'A'
   173  00083C  4C                 	db	76	;'L'
   174  00083D  41                 	db	65	;'A'
   175  00083E  20                 	db	32
   176  00083F  4D                 	db	77	;'M'
   177  000840  4F                 	db	79	;'O'
   178  000841  4E                 	db	78	;'N'
   179  000842  49                 	db	73	;'I'
   180  000843  54                 	db	84	;'T'
   181  000844  4F                 	db	79	;'O'
   182  000845  52                 	db	82	;'R'
   183  000846  45                 	db	69	;'E'
   184  000847  4F                 	db	79	;'O'
   185  000848  2A                 	db	42
   186  000849  00                 	db	0
   187  00084A                     STR_10:
   188                           
   189                           ; BSR set to: 0
   190  00084A  2A                 	db	42
   191  00084B  50                 	db	80	;'P'
   192  00084C  75                 	db	117	;'u'
   193  00084D  65                 	db	101	;'e'
   194  00084E  72                 	db	114	;'r'
   195  00084F  74                 	db	116	;'t'
   196  000850  61                 	db	97	;'a'
   197  000851  20                 	db	32
   198  000852  61                 	db	97	;'a'
   199  000853  62                 	db	98	;'b'
   200  000854  69                 	db	105	;'i'
   201  000855  65                 	db	101	;'e'
   202  000856  72                 	db	114	;'r'
   203  000857  74                 	db	116	;'t'
   204  000858  61                 	db	97	;'a'
   205  000859  2A                 	db	42
   206  00085A  00                 	db	0
   207  00085B                     STR_1:
   208                           
   209                           ; BSR set to: 0
   210  00085B  20                 	db	32
   211  00085C  20                 	db	32
   212  00085D  20                 	db	32
   213  00085E  20                 	db	32
   214  00085F  20                 	db	32
   215  000860  20                 	db	32
   216  000861  20                 	db	32
   217  000862  20                 	db	32
   218  000863  20                 	db	32
   219  000864  20                 	db	32
   220  000865  20                 	db	32
   221  000866  20                 	db	32
   222  000867  20                 	db	32
   223  000868  20                 	db	32
   224  000869  20                 	db	32
   225  00086A  20                 	db	32
   226  00086B  00                 	db	0
   227  00086C                     STR_7:
   228                           
   229                           ; BSR set to: 0
   230  00086C  73                 	db	115	;'s'
   231  00086D  61                 	db	97	;'a'
   232  00086E  6C                 	db	108	;'l'
   233  00086F  6F                 	db	111	;'o'
   234  000870  6E                 	db	110	;'n'
   235  000871  20                 	db	32
   236  000872  31                 	db	49	;'1'
   237  000873  3A                 	db	58	;':'
   238  000874  20                 	db	32
   239  000875  6C                 	db	108	;'l'
   240  000876  6C                 	db	108	;'l'
   241  000877  65                 	db	101	;'e'
   242  000878  6E                 	db	110	;'n'
   243  000879  6F                 	db	111	;'o'
   244  00087A  00                 	db	0
   245  00087B                     STR_8:
   246                           
   247                           ; BSR set to: 0
   248  00087B  73                 	db	115	;'s'
   249  00087C  61                 	db	97	;'a'
   250  00087D  6C                 	db	108	;'l'
   251  00087E  6F                 	db	111	;'o'
   252  00087F  6E                 	db	110	;'n'
   253  000880  20                 	db	32
   254  000881  32                 	db	50	;'2'
   255  000882  3A                 	db	58	;':'
   256  000883  20                 	db	32
   257  000884  6C                 	db	108	;'l'
   258  000885  6C                 	db	108	;'l'
   259  000886  65                 	db	101	;'e'
   260  000887  6E                 	db	110	;'n'
   261  000888  6F                 	db	111	;'o'
   262  000889  00                 	db	0
   263  00088A  00                 	db	0	; dummy byte at the end
   264  0000                     
   265                           ; #config settings
   266                           
   267                           	psect	cinit
   268  001A5C                     __pcinit:
   269                           	callstack 0
   270  001A5C                     start_initialization:
   271                           	callstack 0
   272  001A5C                     __initialization:
   273                           	callstack 0
   274                           
   275                           ; Clear objects allocated to BANK0 (39 bytes)
   276  001A5C  EE00  F060         	lfsr	0,__pbssBANK0
   277  001A60  0E27               	movlw	39
   278  001A62                     clear_0:
   279  001A62  6AEE               	clrf	postinc0,c
   280  001A64  06E8               	decf	wreg,f,c
   281  001A66  E1FD               	bnz	clear_0
   282                           
   283                           ; Clear objects allocated to COMRAM (4 bytes)
   284  001A68  6A59               	clrf	(__pbssCOMRAM+3)& (0+255),c
   285  001A6A  6A58               	clrf	(__pbssCOMRAM+2)& (0+255),c
   286  001A6C  6A57               	clrf	(__pbssCOMRAM+1)& (0+255),c
   287  001A6E  6A56               	clrf	__pbssCOMRAM& (0+255),c
   288  001A70                     end_of_initialization:
   289                           	callstack 0
   290  001A70                     __end_of__initialization:
   291                           	callstack 0
   292  001A70  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   293  001A72  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   294  001A74  0E00               	movlw	low (__Lmediumconst shr (0+16))
   295  001A76  6EF8               	movwf	tblptru,c
   296  001A78  0100               	movlb	0
   297  001A7A  EF46  F004         	goto	_main	;jump to C main() function
   298                           
   299                           	psect	bssCOMRAM
   300  000056                     __pbssCOMRAM:
   301                           	callstack 0
   302  000056                     _prec:
   303                           	callstack 0
   304  000056                     	ds	2
   305  000058                     _flags:
   306                           	callstack 0
   307  000058                     	ds	2
   308                           
   309                           	psect	bssBANK0
   310  000060                     __pbssBANK0:
   311                           	callstack 0
   312  000060                     _nout:
   313                           	callstack 0
   314  000060                     	ds	2
   315  000062                     _width:
   316                           	callstack 0
   317  000062                     	ds	2
   318  000064                     _a:
   319                           	callstack 0
   320  000064                     	ds	1
   321  000065                     _aux:
   322                           	callstack 0
   323  000065                     	ds	1
   324  000066                     _codigo_aula:
   325                           	callstack 0
   326  000066                     	ds	1
   327  000067                     _dbuf:
   328                           	callstack 0
   329  000067                     	ds	32
   330                           
   331                           	psect	cstackBANK0
   332  000087                     __pcstackBANK0:
   333                           	callstack 0
   334  000087                     ?_vfprintf:
   335                           	callstack 0
   336  000087                     vfprintf@fp:
   337                           	callstack 0
   338                           
   339                           ; 2 bytes @ 0x0
   340  000087                     	ds	2
   341  000089                     vfprintf@fmt:
   342                           	callstack 0
   343                           
   344                           ; 2 bytes @ 0x2
   345  000089                     	ds	2
   346  00008B                     vfprintf@ap:
   347                           	callstack 0
   348                           
   349                           ; 2 bytes @ 0x4
   350  00008B                     	ds	2
   351  00008D                     ?_sprintf:
   352                           	callstack 0
   353  00008D                     sprintf@s:
   354                           	callstack 0
   355                           
   356                           ; 2 bytes @ 0x6
   357  00008D                     	ds	2
   358  00008F                     sprintf@fmt:
   359                           	callstack 0
   360                           
   361                           ; 2 bytes @ 0x8
   362  00008F                     	ds	6
   363  000095                     sprintf@ap:
   364                           	callstack 0
   365                           
   366                           ; 2 bytes @ 0xE
   367  000095                     	ds	2
   368  000097                     sprintf@f:
   369                           	callstack 0
   370                           
   371                           ; 6 bytes @ 0x10
   372  000097                     	ds	6
   373  00009D                     ??_main:
   374                           
   375                           ; 1 bytes @ 0x16
   376  00009D                     	ds	2
   377  00009F                     main@texto:
   378                           	callstack 0
   379                           
   380                           ; 10 bytes @ 0x18
   381  00009F                     	ds	10
   382  0000A9                     main@temp:
   383                           	callstack 0
   384                           
   385                           ; 1 bytes @ 0x22
   386  0000A9                     	ds	1
   387  0000AA                     main@i:
   388                           	callstack 0
   389                           
   390                           ; 1 bytes @ 0x23
   391  0000AA                     	ds	1
   392                           
   393                           	psect	cstackCOMRAM
   394  000001                     __pcstackCOMRAM:
   395                           	callstack 0
   396  000001                     ??_INT_RB1:
   397  000001                     
   398                           ; 1 bytes @ 0x0
   399  000001                     	ds	4
   400  000005                     ??_LCD_Comando:
   401  000005                     ??_LCD_Data:
   402  000005                     ??_USART_RX:
   403  000005                     ?_strlen:
   404                           	callstack 0
   405  000005                     ?___aldiv:
   406                           	callstack 0
   407  000005                     ?___aodiv:
   408                           	callstack 0
   409  000005                     ?___aomod:
   410                           	callstack 0
   411  000005                     USART_TX@data:
   412                           	callstack 0
   413  000005                     fputc@c:
   414                           	callstack 0
   415  000005                     strlen@s:
   416                           	callstack 0
   417  000005                     ___aldiv@dividend:
   418                           	callstack 0
   419  000005                     ___aodiv@dividend:
   420                           	callstack 0
   421  000005                     ___aomod@dividend:
   422                           	callstack 0
   423                           
   424                           ; 8 bytes @ 0x4
   425  000005                     	ds	1
   426  000006                     LCD_Comando@cmd:
   427                           	callstack 0
   428  000006                     LCD_Data@data:
   429                           	callstack 0
   430                           
   431                           ; 1 bytes @ 0x5
   432  000006                     	ds	1
   433  000007                     ??_LCD_Init:
   434  000007                     LCD_gotoXY@x:
   435                           	callstack 0
   436  000007                     LCD_Cadena@dato:
   437                           	callstack 0
   438  000007                     fputc@fp:
   439                           	callstack 0
   440  000007                     strlen@a:
   441                           	callstack 0
   442                           
   443                           ; 2 bytes @ 0x6
   444  000007                     	ds	2
   445  000009                     ??_fputc:
   446  000009                     ??_LCD_Cadena:
   447  000009                     LCD_gotoXY@y:
   448                           	callstack 0
   449  000009                     ___aldiv@divisor:
   450                           	callstack 0
   451                           
   452                           ; 4 bytes @ 0x8
   453  000009                     	ds	2
   454  00000B                     ??_LCD_gotoXY:
   455                           
   456                           ; 1 bytes @ 0xA
   457  00000B                     	ds	2
   458  00000D                     ___aldiv@counter:
   459                           	callstack 0
   460  00000D                     ___aodiv@divisor:
   461                           	callstack 0
   462  00000D                     ___aomod@divisor:
   463                           	callstack 0
   464                           
   465                           ; 8 bytes @ 0xC
   466  00000D                     	ds	1
   467  00000E                     ___aldiv@sign:
   468                           	callstack 0
   469  00000E                     fputs@s:
   470                           	callstack 0
   471                           
   472                           ; 2 bytes @ 0xD
   473  00000E                     	ds	1
   474  00000F                     ___aldiv@quotient:
   475                           	callstack 0
   476                           
   477                           ; 4 bytes @ 0xE
   478  00000F                     	ds	1
   479  000010                     fputs@fp:
   480                           	callstack 0
   481                           
   482                           ; 2 bytes @ 0xF
   483  000010                     	ds	2
   484  000012                     fputs@c:
   485                           	callstack 0
   486                           
   487                           ; 1 bytes @ 0x11
   488  000012                     	ds	1
   489  000013                     fputs@i:
   490                           	callstack 0
   491  000013                     USART_Init@BAUD:
   492                           	callstack 0
   493                           
   494                           ; 4 bytes @ 0x12
   495  000013                     	ds	2
   496  000015                     ?_pad:
   497                           	callstack 0
   498  000015                     ___aodiv@counter:
   499                           	callstack 0
   500  000015                     ___aomod@counter:
   501                           	callstack 0
   502  000015                     pad@fp:
   503                           	callstack 0
   504                           
   505                           ; 2 bytes @ 0x14
   506  000015                     	ds	1
   507  000016                     ___aodiv@sign:
   508                           	callstack 0
   509  000016                     ___aomod@sign:
   510                           	callstack 0
   511                           
   512                           ; 1 bytes @ 0x15
   513  000016                     	ds	1
   514  000017                     ?_abs:
   515                           	callstack 0
   516  000017                     pad@buf:
   517                           	callstack 0
   518  000017                     abs@a:
   519                           	callstack 0
   520  000017                     _USART_Init$1530:
   521                           	callstack 0
   522  000017                     ___aodiv@quotient:
   523                           	callstack 0
   524                           
   525                           ; 8 bytes @ 0x16
   526  000017                     	ds	2
   527  000019                     ??_abs:
   528  000019                     pad@p:
   529                           	callstack 0
   530                           
   531                           ; 2 bytes @ 0x18
   532  000019                     	ds	2
   533  00001B                     ??_pad:
   534                           
   535                           ; 1 bytes @ 0x1A
   536  00001B                     	ds	1
   537  00001C                     pad@i:
   538                           	callstack 0
   539                           
   540                           ; 2 bytes @ 0x1B
   541  00001C                     	ds	2
   542  00001E                     pad@w:
   543                           	callstack 0
   544                           
   545                           ; 2 bytes @ 0x1D
   546  00001E                     	ds	2
   547  000020                     ?_dtoa:
   548                           	callstack 0
   549  000020                     dtoa@fp:
   550                           	callstack 0
   551                           
   552                           ; 2 bytes @ 0x1F
   553  000020                     	ds	2
   554  000022                     dtoa@d:
   555                           	callstack 0
   556                           
   557                           ; 8 bytes @ 0x21
   558  000022                     	ds	8
   559  00002A                     ??_dtoa:
   560                           
   561                           ; 1 bytes @ 0x29
   562  00002A                     	ds	8
   563  000032                     _dtoa$1275:
   564                           	callstack 0
   565                           
   566                           ; 2 bytes @ 0x31
   567  000032                     	ds	2
   568  000034                     dtoa@p:
   569                           	callstack 0
   570                           
   571                           ; 2 bytes @ 0x33
   572  000034                     	ds	2
   573  000036                     dtoa@w:
   574                           	callstack 0
   575                           
   576                           ; 2 bytes @ 0x35
   577  000036                     	ds	2
   578  000038                     dtoa@s:
   579                           	callstack 0
   580                           
   581                           ; 2 bytes @ 0x37
   582  000038                     	ds	2
   583  00003A                     dtoa@n:
   584                           	callstack 0
   585                           
   586                           ; 8 bytes @ 0x39
   587  00003A                     	ds	8
   588  000042                     dtoa@i:
   589                           	callstack 0
   590                           
   591                           ; 2 bytes @ 0x41
   592  000042                     	ds	2
   593  000044                     ?_vfpfcnvrt:
   594                           	callstack 0
   595  000044                     vfpfcnvrt@fp:
   596                           	callstack 0
   597                           
   598                           ; 2 bytes @ 0x43
   599  000044                     	ds	2
   600  000046                     vfpfcnvrt@fmt:
   601                           	callstack 0
   602                           
   603                           ; 2 bytes @ 0x45
   604  000046                     	ds	2
   605  000048                     vfpfcnvrt@ap:
   606                           	callstack 0
   607                           
   608                           ; 2 bytes @ 0x47
   609  000048                     	ds	2
   610  00004A                     ??_vfpfcnvrt:
   611                           
   612                           ; 1 bytes @ 0x49
   613  00004A                     	ds	2
   614  00004C                     vfpfcnvrt@ll:
   615                           	callstack 0
   616                           
   617                           ; 8 bytes @ 0x4B
   618  00004C                     	ds	8
   619  000054                     vfprintf@cfmt:
   620                           	callstack 0
   621                           
   622                           ; 2 bytes @ 0x53
   623  000054                     	ds	2
   624  000056                     
   625                           ; 1 bytes @ 0x55
   626 ;;
   627 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   628 ;;
   629 ;; *************** function _main *****************
   630 ;; Defined at:
   631 ;;		line 63 in file "main.c"
   632 ;; Parameters:    Size  Location     Type
   633 ;;		None
   634 ;; Auto vars:     Size  Location     Type
   635 ;;  texto          10   24[BANK0 ] unsigned char [10]
   636 ;;  i               1   35[BANK0 ] unsigned char 
   637 ;;  temp            1   34[BANK0 ] unsigned char 
   638 ;; Return value:  Size  Location     Type
   639 ;;                  1    wreg      void 
   640 ;; Registers used:
   641 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   642 ;; Tracked objects:
   643 ;;		On entry : 0/0
   644 ;;		On exit  : 0/0
   645 ;;		Unchanged: 0/0
   646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   647 ;;      Params:         0       0       0       0       0       0       0       0       0
   648 ;;      Locals:         0      12       0       0       0       0       0       0       0
   649 ;;      Temps:          0       2       0       0       0       0       0       0       0
   650 ;;      Totals:         0      14       0       0       0       0       0       0       0
   651 ;;Total ram usage:       14 bytes
   652 ;; Hardware stack levels required when called:   10
   653 ;; This function calls:
   654 ;;		_InitPort
   655 ;;		_Init_Int
   656 ;;		_LCD_Cadena
   657 ;;		_LCD_Comando
   658 ;;		_LCD_Init
   659 ;;		_LCD_gotoXY
   660 ;;		_USART_Init
   661 ;;		_USART_RX
   662 ;;		_USART_TX
   663 ;;		_sprintf
   664 ;; This function is called by:
   665 ;;		Startup code after reset
   666 ;; This function uses a non-reentrant model
   667 ;;
   668                           
   669                           	psect	text0
   670  00088C                     __ptext0:
   671                           	callstack 0
   672  00088C                     _main:
   673                           	callstack 21
   674  00088C                     
   675                           ;main.c: 64:     char i;;main.c: 65:     char texto [10];;main.c: 66:     char temp;;mai
      +                          n.c: 68:     InitPort();
   676  00088C  EC55  F00D         	call	_InitPort	;wreg free
   677  000890                     
   678                           ;main.c: 69:     LCD_Init();
   679  000890  EC06  F00A         	call	_LCD_Init	;wreg free
   680  000894                     
   681                           ;main.c: 70:     Init_Int();
   682  000894  EC4A  F00D         	call	_Init_Int	;wreg free
   683  000898                     
   684                           ;main.c: 71:     USART_Init (9600);
   685  000898  0E80               	movlw	128
   686  00089A  6E13               	movwf	USART_Init@BAUD^0,c
   687  00089C  0E25               	movlw	37
   688  00089E  6E14               	movwf	(USART_Init@BAUD+1)^0,c
   689  0008A0  0E00               	movlw	0
   690  0008A2  6E15               	movwf	(USART_Init@BAUD+2)^0,c
   691  0008A4  0E00               	movlw	0
   692  0008A6  6E16               	movwf	(USART_Init@BAUD+3)^0,c
   693  0008A8  EC3B  F00B         	call	_USART_Init	;wreg free
   694                           
   695                           ;main.c: 73:     codigo_aula=101;
   696  0008AC  0E65               	movlw	101
   697  0008AE  0100               	movlb	0	; () banked
   698  0008B0  6F66               	movwf	_codigo_aula& (0+255),b
   699                           
   700                           ;main.c: 74:     aux=1;
   701  0008B2  0E01               	movlw	1
   702  0008B4  6F65               	movwf	_aux& (0+255),b
   703                           
   704                           ;main.c: 75:     temp=90;
   705  0008B6  0E5A               	movlw	90
   706  0008B8  6FA9               	movwf	main@temp& (0+255),b
   707                           
   708                           ;main.c: 76:     a=0;
   709  0008BA  0E00               	movlw	0
   710  0008BC  6F64               	movwf	_a& (0+255),b
   711  0008BE                     
   712                           ; BSR set to: 0
   713                           ;main.c: 77:     LCD_gotoXY(0,0);
   714  0008BE  0E00               	movlw	0
   715  0008C0  6E08               	movwf	(LCD_gotoXY@x+1)^0,c
   716  0008C2  0E00               	movlw	0
   717  0008C4  6E07               	movwf	LCD_gotoXY@x^0,c
   718  0008C6  0E00               	movlw	0
   719  0008C8  6E0A               	movwf	(LCD_gotoXY@y+1)^0,c
   720  0008CA  0E00               	movlw	0
   721  0008CC  6E09               	movwf	LCD_gotoXY@y^0,c
   722  0008CE  ECD6  F00C         	call	_LCD_gotoXY	;wreg free
   723  0008D2                     
   724                           ;main.c: 78:     LCD_Cadena("*SALA MONITOREO*");
   725  0008D2  0E39               	movlw	low STR_3
   726  0008D4  6E07               	movwf	LCD_Cadena@dato^0,c
   727  0008D6  0E08               	movlw	high STR_3
   728  0008D8  6E08               	movwf	(LCD_Cadena@dato+1)^0,c
   729  0008DA  ECAA  F00B         	call	_LCD_Cadena	;wreg free
   730  0008DE                     
   731                           ;main.c: 79:     _delay((unsigned long)((100)*(48000000/4000.0)));
   732  0008DE  0E07               	movlw	7
   733  0008E0  0100               	movlb	0	; () banked
   734  0008E2  6F9E               	movwf	(??_main+1)& (0+255),b
   735  0008E4  0E17               	movlw	23
   736  0008E6  6F9D               	movwf	??_main& (0+255),b
   737  0008E8  0E6A               	movlw	106
   738  0008EA                     u1937:
   739  0008EA  2EE8               	decfsz	wreg,f,c
   740  0008EC  D7FE               	bra	u1937
   741  0008EE  2F9D               	decfsz	??_main& (0+255),f,b
   742  0008F0  D7FC               	bra	u1937
   743  0008F2  2F9E               	decfsz	(??_main+1)& (0+255),f,b
   744  0008F4  D7FA               	bra	u1937
   745  0008F6  F000               	nop	
   746  0008F8                     l2433:
   747                           
   748                           ;main.c: 82:     {;main.c: 83:        if (a==0)
   749  0008F8  0100               	movlb	0	; () banked
   750  0008FA  5164               	movf	_a& (0+255),w,b
   751  0008FC  A4D8               	btfss	status,2,c
   752  0008FE  EF83  F004         	goto	u1871
   753  000902  EF85  F004         	goto	u1870
   754  000906                     u1871:
   755  000906  EF50  F005         	goto	l2481
   756  00090A                     u1870:
   757  00090A                     
   758                           ; BSR set to: 0
   759                           ;main.c: 84:        {;main.c: 85:         i = USART_RX();
   760  00090A  EC73  F00B         	call	_USART_RX	;wreg free
   761  00090E  0100               	movlb	0	; () banked
   762  000910  6FAA               	movwf	main@i& (0+255),b
   763  000912                     
   764                           ; BSR set to: 0
   765                           ;main.c: 86:         _delay((unsigned long)((50)*(48000000/4000.0)));
   766  000912  0E04               	movlw	4
   767  000914  0100               	movlb	0	; () banked
   768  000916  6F9E               	movwf	(??_main+1)& (0+255),b
   769  000918  0E0C               	movlw	12
   770  00091A  6F9D               	movwf	??_main& (0+255),b
   771  00091C  0E33               	movlw	51
   772  00091E                     u1947:
   773  00091E  2EE8               	decfsz	wreg,f,c
   774  000920  D7FE               	bra	u1947
   775  000922  2F9D               	decfsz	??_main& (0+255),f,b
   776  000924  D7FC               	bra	u1947
   777  000926  2F9E               	decfsz	(??_main+1)& (0+255),f,b
   778  000928  D7FA               	bra	u1947
   779  00092A  D000               	nop2	
   780  00092C                     
   781                           ;main.c: 88:         if (aux==1)
   782  00092C  0100               	movlb	0	; () banked
   783  00092E  0565               	decf	_aux& (0+255),w,b
   784  000930  A4D8               	btfss	status,2,c
   785  000932  EF9D  F004         	goto	u1881
   786  000936  EF9F  F004         	goto	u1880
   787  00093A                     u1881:
   788  00093A  EFDF  F004         	goto	l2457
   789  00093E                     u1880:
   790  00093E                     
   791                           ; BSR set to: 0
   792                           ;main.c: 89:         {;main.c: 90:             LCD_gotoXY(0,0);
   793  00093E  0E00               	movlw	0
   794  000940  6E08               	movwf	(LCD_gotoXY@x+1)^0,c
   795  000942  0E00               	movlw	0
   796  000944  6E07               	movwf	LCD_gotoXY@x^0,c
   797  000946  0E00               	movlw	0
   798  000948  6E0A               	movwf	(LCD_gotoXY@y+1)^0,c
   799  00094A  0E00               	movlw	0
   800  00094C  6E09               	movwf	LCD_gotoXY@y^0,c
   801  00094E  ECD6  F00C         	call	_LCD_gotoXY	;wreg free
   802  000952                     
   803                           ;main.c: 91:             LCD_Cadena("*SALA MONITOREO*");
   804  000952  0E39               	movlw	low STR_3
   805  000954  6E07               	movwf	LCD_Cadena@dato^0,c
   806  000956  0E08               	movlw	high STR_3
   807  000958  6E08               	movwf	(LCD_Cadena@dato+1)^0,c
   808  00095A  ECAA  F00B         	call	_LCD_Cadena	;wreg free
   809  00095E                     
   810                           ;main.c: 92:             _delay((unsigned long)((50)*(48000000/4000.0)));
   811  00095E  0E04               	movlw	4
   812  000960  0100               	movlb	0	; () banked
   813  000962  6F9E               	movwf	(??_main+1)& (0+255),b
   814  000964  0E0C               	movlw	12
   815  000966  6F9D               	movwf	??_main& (0+255),b
   816  000968  0E33               	movlw	51
   817  00096A                     u1957:
   818  00096A  2EE8               	decfsz	wreg,f,c
   819  00096C  D7FE               	bra	u1957
   820  00096E  2F9D               	decfsz	??_main& (0+255),f,b
   821  000970  D7FC               	bra	u1957
   822  000972  2F9E               	decfsz	(??_main+1)& (0+255),f,b
   823  000974  D7FA               	bra	u1957
   824  000976  D000               	nop2	
   825  000978                     
   826                           ;main.c: 93:              USART_TX(temp);
   827  000978  0100               	movlb	0	; () banked
   828  00097A  51A9               	movf	main@temp& (0+255),w,b
   829  00097C  EC3F  F00D         	call	_USART_TX
   830  000980                     
   831                           ;main.c: 94:              _delay((unsigned long)((50)*(48000000/4000.0)));
   832  000980  0E04               	movlw	4
   833  000982  0100               	movlb	0	; () banked
   834  000984  6F9E               	movwf	(??_main+1)& (0+255),b
   835  000986  0E0C               	movlw	12
   836  000988  6F9D               	movwf	??_main& (0+255),b
   837  00098A  0E33               	movlw	51
   838  00098C                     u1967:
   839  00098C  2EE8               	decfsz	wreg,f,c
   840  00098E  D7FE               	bra	u1967
   841  000990  2F9D               	decfsz	??_main& (0+255),f,b
   842  000992  D7FC               	bra	u1967
   843  000994  2F9E               	decfsz	(??_main+1)& (0+255),f,b
   844  000996  D7FA               	bra	u1967
   845  000998  D000               	nop2	
   846  00099A                     
   847                           ;main.c: 95:              aux=0;
   848  00099A  0E00               	movlw	0
   849  00099C  0100               	movlb	0	; () banked
   850  00099E  6F65               	movwf	_aux& (0+255),b
   851  0009A0                     
   852                           ; BSR set to: 0
   853                           ;main.c: 96:              USART_TX(codigo_aula);
   854  0009A0  5166               	movf	_codigo_aula& (0+255),w,b
   855  0009A2  EC3F  F00D         	call	_USART_TX
   856  0009A6                     
   857                           ;main.c: 97:              _delay((unsigned long)((150)*(48000000/4000.0)));
   858  0009A6  0E0A               	movlw	10
   859  0009A8  0100               	movlb	0	; () banked
   860  0009AA  6F9E               	movwf	(??_main+1)& (0+255),b
   861  0009AC  0E22               	movlw	34
   862  0009AE  6F9D               	movwf	??_main& (0+255),b
   863  0009B0  0EA1               	movlw	161
   864  0009B2                     u1977:
   865  0009B2  2EE8               	decfsz	wreg,f,c
   866  0009B4  D7FE               	bra	u1977
   867  0009B6  2F9D               	decfsz	??_main& (0+255),f,b
   868  0009B8  D7FC               	bra	u1977
   869  0009BA  2F9E               	decfsz	(??_main+1)& (0+255),f,b
   870  0009BC  D7FA               	bra	u1977
   871  0009BE                     l2457:
   872                           
   873                           ;main.c: 100:         if (i<5)
   874  0009BE  0E05               	movlw	5
   875  0009C0  0100               	movlb	0	; () banked
   876  0009C2  61AA               	cpfslt	main@i& (0+255),b
   877  0009C4  EFE6  F004         	goto	u1891
   878  0009C8  EFE8  F004         	goto	u1890
   879  0009CC                     u1891:
   880  0009CC  EF2C  F005         	goto	l2471
   881  0009D0                     u1890:
   882  0009D0                     
   883                           ; BSR set to: 0
   884                           ;main.c: 101:         {;main.c: 102:              if(codigo_aula==101)
   885  0009D0  0E65               	movlw	101
   886  0009D2  1966               	xorwf	_codigo_aula& (0+255),w,b
   887  0009D4  A4D8               	btfss	status,2,c
   888  0009D6  EFEF  F004         	goto	u1901
   889  0009DA  EFF1  F004         	goto	u1900
   890  0009DE                     u1901:
   891  0009DE  EF00  F005         	goto	l2463
   892  0009E2                     u1900:
   893  0009E2                     
   894                           ; BSR set to: 0
   895                           ;main.c: 103:              {;main.c: 104:                  sprintf (texto,"salon 1: %d  
      +                                 ",i);
   896  0009E2  0E9F               	movlw	low main@texto
   897  0009E4  6F8D               	movwf	sprintf@s& (0+255),b
   898  0009E6  0E00               	movlw	high main@texto
   899  0009E8  6F8E               	movwf	(sprintf@s+1)& (0+255),b
   900  0009EA  0E01               	movlw	low STR_5
   901  0009EC  6F8F               	movwf	sprintf@fmt& (0+255),b
   902  0009EE  0E08               	movlw	high STR_5
   903  0009F0  6F90               	movwf	(sprintf@fmt+1)& (0+255),b
   904  0009F2  C0AA  F091         	movff	main@i,?_sprintf+4
   905  0009F6  6B92               	clrf	(?_sprintf+5)& (0+255),b
   906  0009F8  EC6B  F00C         	call	_sprintf	;wreg free
   907                           
   908                           ;main.c: 105:              }
   909  0009FC  EF0D  F005         	goto	l2465
   910  000A00                     l2463:
   911                           
   912                           ; BSR set to: 0
   913  000A00  0E9F               	movlw	low main@texto
   914  000A02  6F8D               	movwf	sprintf@s& (0+255),b
   915  000A04  0E00               	movlw	high main@texto
   916  000A06  6F8E               	movwf	(sprintf@s+1)& (0+255),b
   917  000A08  0E16               	movlw	low STR_6
   918  000A0A  6F8F               	movwf	sprintf@fmt& (0+255),b
   919  000A0C  0E08               	movlw	high STR_6
   920  000A0E  6F90               	movwf	(sprintf@fmt+1)& (0+255),b
   921  000A10  C0AA  F091         	movff	main@i,?_sprintf+4
   922  000A14  6B92               	clrf	(?_sprintf+5)& (0+255),b
   923  000A16  EC6B  F00C         	call	_sprintf	;wreg free
   924  000A1A                     l2465:
   925                           
   926                           ;main.c: 107:                  LCD_gotoXY(1,0);
   927  000A1A  0E00               	movlw	0
   928  000A1C  6E08               	movwf	(LCD_gotoXY@x+1)^0,c
   929  000A1E  0E01               	movlw	1
   930  000A20  6E07               	movwf	LCD_gotoXY@x^0,c
   931  000A22  0E00               	movlw	0
   932  000A24  6E0A               	movwf	(LCD_gotoXY@y+1)^0,c
   933  000A26  0E00               	movlw	0
   934  000A28  6E09               	movwf	LCD_gotoXY@y^0,c
   935  000A2A  ECD6  F00C         	call	_LCD_gotoXY	;wreg free
   936  000A2E                     
   937                           ;main.c: 108:                  LCD_Cadena(texto);
   938  000A2E  0E9F               	movlw	low main@texto
   939  000A30  6E07               	movwf	LCD_Cadena@dato^0,c
   940  000A32  0E00               	movlw	high main@texto
   941  000A34  6E08               	movwf	(LCD_Cadena@dato+1)^0,c
   942  000A36  ECAA  F00B         	call	_LCD_Cadena	;wreg free
   943  000A3A                     l2469:
   944                           
   945                           ;main.c: 109:                  _delay((unsigned long)((50)*(48000000/4000.0)));
   946  000A3A  0E04               	movlw	4
   947  000A3C  0100               	movlb	0	; () banked
   948  000A3E  6F9E               	movwf	(??_main+1)& (0+255),b
   949  000A40  0E0C               	movlw	12
   950  000A42  6F9D               	movwf	??_main& (0+255),b
   951  000A44  0E33               	movlw	51
   952  000A46                     u1987:
   953  000A46  2EE8               	decfsz	wreg,f,c
   954  000A48  D7FE               	bra	u1987
   955  000A4A  2F9D               	decfsz	??_main& (0+255),f,b
   956  000A4C  D7FC               	bra	u1987
   957  000A4E  2F9E               	decfsz	(??_main+1)& (0+255),f,b
   958  000A50  D7FA               	bra	u1987
   959  000A52  D000               	nop2	
   960                           
   961                           ;main.c: 110:         }
   962  000A54  EF7C  F004         	goto	l2433
   963  000A58                     l2471:
   964                           
   965                           ; BSR set to: 0
   966                           ;main.c: 113:         {;main.c: 114:              LCD_gotoXY(1,0);
   967  000A58  0E00               	movlw	0
   968  000A5A  6E08               	movwf	(LCD_gotoXY@x+1)^0,c
   969  000A5C  0E01               	movlw	1
   970  000A5E  6E07               	movwf	LCD_gotoXY@x^0,c
   971  000A60  0E00               	movlw	0
   972  000A62  6E0A               	movwf	(LCD_gotoXY@y+1)^0,c
   973  000A64  0E00               	movlw	0
   974  000A66  6E09               	movwf	LCD_gotoXY@y^0,c
   975  000A68  ECD6  F00C         	call	_LCD_gotoXY	;wreg free
   976  000A6C                     
   977                           ;main.c: 115:              if(codigo_aula==101)
   978  000A6C  0E65               	movlw	101
   979  000A6E  0100               	movlb	0	; () banked
   980  000A70  1966               	xorwf	_codigo_aula& (0+255),w,b
   981  000A72  A4D8               	btfss	status,2,c
   982  000A74  EF3E  F005         	goto	u1911
   983  000A78  EF40  F005         	goto	u1910
   984  000A7C                     u1911:
   985  000A7C  EF48  F005         	goto	l2477
   986  000A80                     u1910:
   987  000A80                     
   988                           ; BSR set to: 0
   989                           ;main.c: 116:             {;main.c: 117:                 LCD_Cadena("salon 1: lleno");
   990  000A80  0E6C               	movlw	low STR_7
   991  000A82  6E07               	movwf	LCD_Cadena@dato^0,c
   992  000A84  0E08               	movlw	high STR_7
   993  000A86  6E08               	movwf	(LCD_Cadena@dato+1)^0,c
   994  000A88  ECAA  F00B         	call	_LCD_Cadena	;wreg free
   995                           
   996                           ;main.c: 118:             }
   997  000A8C  EF1D  F005         	goto	l2469
   998  000A90                     l2477:
   999                           
  1000                           ; BSR set to: 0
  1001  000A90  0E7B               	movlw	low STR_8
  1002  000A92  6E07               	movwf	LCD_Cadena@dato^0,c
  1003  000A94  0E08               	movlw	high STR_8
  1004  000A96  6E08               	movwf	(LCD_Cadena@dato+1)^0,c
  1005  000A98  ECAA  F00B         	call	_LCD_Cadena	;wreg free
  1006  000A9C  EF1D  F005         	goto	l2469
  1007  000AA0                     l2481:
  1008                           
  1009                           ; BSR set to: 0
  1010                           ;main.c: 124:        {;main.c: 125:           LCD_Comando (0x01);
  1011  000AA0  0E01               	movlw	1
  1012  000AA2  EC12  F00C         	call	_LCD_Comando
  1013                           
  1014                           ;main.c: 126:           LCD_gotoXY(0,0);
  1015  000AA6  0E00               	movlw	0
  1016  000AA8  6E08               	movwf	(LCD_gotoXY@x+1)^0,c
  1017  000AAA  0E00               	movlw	0
  1018  000AAC  6E07               	movwf	LCD_gotoXY@x^0,c
  1019  000AAE  0E00               	movlw	0
  1020  000AB0  6E0A               	movwf	(LCD_gotoXY@y+1)^0,c
  1021  000AB2  0E00               	movlw	0
  1022  000AB4  6E09               	movwf	LCD_gotoXY@y^0,c
  1023  000AB6  ECD6  F00C         	call	_LCD_gotoXY	;wreg free
  1024  000ABA                     
  1025                           ;main.c: 127:           LCD_Cadena("***EMERGENCIA***");
  1026  000ABA  0E28               	movlw	low STR_9
  1027  000ABC  6E07               	movwf	LCD_Cadena@dato^0,c
  1028  000ABE  0E08               	movlw	high STR_9
  1029  000AC0  6E08               	movwf	(LCD_Cadena@dato+1)^0,c
  1030  000AC2  ECAA  F00B         	call	_LCD_Cadena	;wreg free
  1031  000AC6                     
  1032                           ;main.c: 128:           _delay((unsigned long)((100)*(48000000/4000.0)));
  1033  000AC6  0E07               	movlw	7
  1034  000AC8  0100               	movlb	0	; () banked
  1035  000ACA  6F9E               	movwf	(??_main+1)& (0+255),b
  1036  000ACC  0E17               	movlw	23
  1037  000ACE  6F9D               	movwf	??_main& (0+255),b
  1038  000AD0  0E6A               	movlw	106
  1039  000AD2                     u1997:
  1040  000AD2  2EE8               	decfsz	wreg,f,c
  1041  000AD4  D7FE               	bra	u1997
  1042  000AD6  2F9D               	decfsz	??_main& (0+255),f,b
  1043  000AD8  D7FC               	bra	u1997
  1044  000ADA  2F9E               	decfsz	(??_main+1)& (0+255),f,b
  1045  000ADC  D7FA               	bra	u1997
  1046  000ADE  F000               	nop	
  1047  000AE0                     
  1048                           ;main.c: 129:           LCD_gotoXY(1,0);
  1049  000AE0  0E00               	movlw	0
  1050  000AE2  6E08               	movwf	(LCD_gotoXY@x+1)^0,c
  1051  000AE4  0E01               	movlw	1
  1052  000AE6  6E07               	movwf	LCD_gotoXY@x^0,c
  1053  000AE8  0E00               	movlw	0
  1054  000AEA  6E0A               	movwf	(LCD_gotoXY@y+1)^0,c
  1055  000AEC  0E00               	movlw	0
  1056  000AEE  6E09               	movwf	LCD_gotoXY@y^0,c
  1057  000AF0  ECD6  F00C         	call	_LCD_gotoXY	;wreg free
  1058  000AF4                     
  1059                           ;main.c: 130:           LCD_Cadena("*Puerta abierta*");
  1060  000AF4  0E4A               	movlw	low STR_10
  1061  000AF6  6E07               	movwf	LCD_Cadena@dato^0,c
  1062  000AF8  0E08               	movlw	high STR_10
  1063  000AFA  6E08               	movwf	(LCD_Cadena@dato+1)^0,c
  1064  000AFC  ECAA  F00B         	call	_LCD_Cadena	;wreg free
  1065                           
  1066                           ;main.c: 131:           _delay((unsigned long)((100)*(48000000/4000.0)));
  1067  000B00  0E07               	movlw	7
  1068  000B02  0100               	movlb	0	; () banked
  1069  000B04  6F9E               	movwf	(??_main+1)& (0+255),b
  1070  000B06  0E17               	movlw	23
  1071  000B08  6F9D               	movwf	??_main& (0+255),b
  1072  000B0A  0E6A               	movlw	106
  1073  000B0C                     u2007:
  1074  000B0C  2EE8               	decfsz	wreg,f,c
  1075  000B0E  D7FE               	bra	u2007
  1076  000B10  2F9D               	decfsz	??_main& (0+255),f,b
  1077  000B12  D7FC               	bra	u2007
  1078  000B14  2F9E               	decfsz	(??_main+1)& (0+255),f,b
  1079  000B16  D7FA               	bra	u2007
  1080  000B18  F000               	nop	
  1081                           
  1082                           ;main.c: 132:            while(a == 0xff)
  1083  000B1A  EFB4  F005         	goto	l2503
  1084  000B1E                     l2491:
  1085                           
  1086                           ; BSR set to: 0
  1087                           ;main.c: 133:            {;main.c: 134:              i = USART_RX();
  1088  000B1E  EC73  F00B         	call	_USART_RX	;wreg free
  1089  000B22  0100               	movlb	0	; () banked
  1090  000B24  6FAA               	movwf	main@i& (0+255),b
  1091  000B26                     
  1092                           ; BSR set to: 0
  1093                           ;main.c: 135:              _delay((unsigned long)((50)*(48000000/4000.0)));
  1094  000B26  0E04               	movlw	4
  1095  000B28  0100               	movlb	0	; () banked
  1096  000B2A  6F9E               	movwf	(??_main+1)& (0+255),b
  1097  000B2C  0E0C               	movlw	12
  1098  000B2E  6F9D               	movwf	??_main& (0+255),b
  1099  000B30  0E33               	movlw	51
  1100  000B32                     u2017:
  1101  000B32  2EE8               	decfsz	wreg,f,c
  1102  000B34  D7FE               	bra	u2017
  1103  000B36  2F9D               	decfsz	??_main& (0+255),f,b
  1104  000B38  D7FC               	bra	u2017
  1105  000B3A  2F9E               	decfsz	(??_main+1)& (0+255),f,b
  1106  000B3C  D7FA               	bra	u2017
  1107  000B3E  D000               	nop2	
  1108  000B40                     
  1109                           ;main.c: 136:              LATA=i;
  1110  000B40  C0AA  FF89         	movff	main@i,3977	;volatile
  1111  000B44                     
  1112                           ;main.c: 137:              aux=1;
  1113  000B44  0E01               	movlw	1
  1114  000B46  0100               	movlb	0	; () banked
  1115  000B48  6F65               	movwf	_aux& (0+255),b
  1116  000B4A                     
  1117                           ; BSR set to: 0
  1118                           ;main.c: 138:              USART_TX(55);
  1119  000B4A  0E37               	movlw	55
  1120  000B4C  EC3F  F00D         	call	_USART_TX
  1121  000B50                     
  1122                           ;main.c: 139:              _delay((unsigned long)((150)*(48000000/4000.0)));
  1123  000B50  0E0A               	movlw	10
  1124  000B52  0100               	movlb	0	; () banked
  1125  000B54  6F9E               	movwf	(??_main+1)& (0+255),b
  1126  000B56  0E22               	movlw	34
  1127  000B58  6F9D               	movwf	??_main& (0+255),b
  1128  000B5A  0EA1               	movlw	161
  1129  000B5C                     u2027:
  1130  000B5C  2EE8               	decfsz	wreg,f,c
  1131  000B5E  D7FE               	bra	u2027
  1132  000B60  2F9D               	decfsz	??_main& (0+255),f,b
  1133  000B62  D7FC               	bra	u2027
  1134  000B64  2F9E               	decfsz	(??_main+1)& (0+255),f,b
  1135  000B66  D7FA               	bra	u2027
  1136  000B68                     l2503:
  1137                           
  1138                           ;main.c: 132:            while(a == 0xff)
  1139  000B68  0100               	movlb	0	; () banked
  1140  000B6A  2964               	incf	_a& (0+255),w,b
  1141  000B6C  B4D8               	btfsc	status,2,c
  1142  000B6E  EFBB  F005         	goto	u1921
  1143  000B72  EFBD  F005         	goto	u1920
  1144  000B76                     u1921:
  1145  000B76  EF8F  F005         	goto	l2491
  1146  000B7A                     u1920:
  1147  000B7A  EF7C  F004         	goto	l2433
  1148  000B7E  EF35  F000         	goto	start
  1149  000B82                     __end_of_main:
  1150                           	callstack 0
  1151                           
  1152 ;; *************** function _sprintf *****************
  1153 ;; Defined at:
  1154 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\nf_sprintf.c"
  1155 ;; Parameters:    Size  Location     Type
  1156 ;;  s               2    6[BANK0 ] PTR unsigned char 
  1157 ;;		 -> main@texto(10), 
  1158 ;;  fmt             2    8[BANK0 ] PTR const unsigned char 
  1159 ;;		 -> STR_6(18), STR_5(21), 
  1160 ;; Auto vars:     Size  Location     Type
  1161 ;;  f               6   16[BANK0 ] struct _IO_FILE
  1162 ;;  ap              2   14[BANK0 ] PTR void [1]
  1163 ;;		 -> ?_sprintf(2), 
  1164 ;;  ret             2    0        int 
  1165 ;; Return value:  Size  Location     Type
  1166 ;;                  2    6[BANK0 ] int 
  1167 ;; Registers used:
  1168 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1169 ;; Tracked objects:
  1170 ;;		On entry : 0/0
  1171 ;;		On exit  : 0/0
  1172 ;;		Unchanged: 0/0
  1173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1174 ;;      Params:         0       6       0       0       0       0       0       0       0
  1175 ;;      Locals:         0      10       0       0       0       0       0       0       0
  1176 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1177 ;;      Totals:         0      16       0       0       0       0       0       0       0
  1178 ;;Total ram usage:       16 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; Hardware stack levels required when called:    9
  1181 ;; This function calls:
  1182 ;;		_vfprintf
  1183 ;; This function is called by:
  1184 ;;		_main
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           	psect	text1
  1189  0018D6                     __ptext1:
  1190                           	callstack 0
  1191  0018D6                     _sprintf:
  1192                           	callstack 21
  1193  0018D6  0E91               	movlw	low (?_sprintf+4)
  1194  0018D8  0100               	movlb	0	; () banked
  1195  0018DA  6F95               	movwf	sprintf@ap& (0+255),b
  1196  0018DC  0E00               	movlw	high (?_sprintf+4)
  1197  0018DE  6F96               	movwf	(sprintf@ap+1)& (0+255),b
  1198  0018E0  C08D  F097         	movff	sprintf@s,sprintf@f
  1199  0018E4  C08E  F098         	movff	sprintf@s+1,sprintf@f+1
  1200  0018E8                     
  1201                           ; BSR set to: 0
  1202  0018E8  0E00               	movlw	0
  1203  0018EA  6F9A               	movwf	(sprintf@f+3)& (0+255),b
  1204  0018EC  0E00               	movlw	0
  1205  0018EE  6F99               	movwf	(sprintf@f+2)& (0+255),b
  1206  0018F0                     
  1207                           ; BSR set to: 0
  1208  0018F0  0E00               	movlw	0
  1209  0018F2  6F9C               	movwf	(sprintf@f+5)& (0+255),b
  1210  0018F4  0E00               	movlw	0
  1211  0018F6  6F9B               	movwf	(sprintf@f+4)& (0+255),b
  1212  0018F8                     
  1213                           ; BSR set to: 0
  1214  0018F8  0E97               	movlw	low sprintf@f
  1215  0018FA  6F87               	movwf	vfprintf@fp& (0+255),b
  1216  0018FC  0E00               	movlw	high sprintf@f
  1217  0018FE  6F88               	movwf	(vfprintf@fp+1)& (0+255),b
  1218  001900  C08F  F089         	movff	sprintf@fmt,vfprintf@fmt
  1219  001904  C090  F08A         	movff	sprintf@fmt+1,vfprintf@fmt+1
  1220  001908  0E95               	movlw	low sprintf@ap
  1221  00190A  6F8B               	movwf	vfprintf@ap& (0+255),b
  1222  00190C  0E00               	movlw	high sprintf@ap
  1223  00190E  6F8C               	movwf	(vfprintf@ap+1)& (0+255),b
  1224  001910  ECE1  F00B         	call	_vfprintf	;wreg free
  1225  001914  0100               	movlb	0	; () banked
  1226  001916  5199               	movf	(sprintf@f+2)& (0+255),w,b
  1227  001918  258D               	addwf	sprintf@s& (0+255),w,b
  1228  00191A  6ED9               	movwf	fsr2l,c
  1229  00191C  519A               	movf	(sprintf@f+3)& (0+255),w,b
  1230  00191E  218E               	addwfc	(sprintf@s+1)& (0+255),w,b
  1231  001920  6EDA               	movwf	fsr2h,c
  1232  001922  0E00               	movlw	0
  1233  001924  6EDF               	movwf	indf2,c
  1234  001926                     
  1235                           ; BSR set to: 0
  1236  001926  0012               	return		;funcret
  1237  001928                     __end_of_sprintf:
  1238                           	callstack 0
  1239                           
  1240 ;; *************** function _vfprintf *****************
  1241 ;; Defined at:
  1242 ;;		line 1368 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
  1245 ;;		 -> sprintf@f(6), 
  1246 ;;  fmt             2    2[BANK0 ] PTR const unsigned char 
  1247 ;;		 -> STR_6(18), STR_5(21), 
  1248 ;;  ap              2    4[BANK0 ] PTR PTR void 
  1249 ;;		 -> sprintf@ap(2), 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  cfmt            2   83[COMRAM] PTR unsigned char 
  1252 ;;		 -> STR_6(18), STR_5(21), 
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  2    0[BANK0 ] int 
  1255 ;; Registers used:
  1256 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1262 ;;      Params:         0       6       0       0       0       0       0       0       0
  1263 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1264 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1265 ;;      Totals:         2       6       0       0       0       0       0       0       0
  1266 ;;Total ram usage:        8 bytes
  1267 ;; Hardware stack levels used:    1
  1268 ;; Hardware stack levels required when called:    8
  1269 ;; This function calls:
  1270 ;;		_vfpfcnvrt
  1271 ;; This function is called by:
  1272 ;;		_sprintf
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           	psect	text2
  1277  0017C2                     __ptext2:
  1278                           	callstack 0
  1279  0017C2                     _vfprintf:
  1280                           	callstack 21
  1281  0017C2                     
  1282                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1368: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.20\pic\source
      +                          s\c99\common\doprnt.c: 1369: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\comm
      +                          on\doprnt.c: 1371:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\
      +                          common\doprnt.c: 1373:     cfmt = (char *)fmt;
  1283  0017C2  C089  F054         	movff	vfprintf@fmt,vfprintf@cfmt
  1284  0017C6  C08A  F055         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1285  0017CA                     
  1286                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1374:     nout = 
      +                          0;
  1287  0017CA  0E00               	movlw	0
  1288  0017CC  0100               	movlb	0	; () banked
  1289  0017CE  6F61               	movwf	(_nout+1)& (0+255),b
  1290  0017D0  0E00               	movlw	0
  1291  0017D2  6F60               	movwf	_nout& (0+255),b
  1292                           
  1293                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1375:     while (
      +                          *cfmt) {
  1294  0017D4  EFFF  F00B         	goto	l2405
  1295  0017D8                     l2403:
  1296                           
  1297                           ; BSR set to: 0
  1298                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1376:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
  1299  0017D8  C087  F044         	movff	vfprintf@fp,vfpfcnvrt@fp
  1300  0017DC  C088  F045         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1301  0017E0  0E54               	movlw	low vfprintf@cfmt
  1302  0017E2  6E46               	movwf	vfpfcnvrt@fmt^0,c
  1303  0017E4  0E00               	movlw	high vfprintf@cfmt
  1304  0017E6  6E47               	movwf	(vfpfcnvrt@fmt+1)^0,c
  1305  0017E8  C08B  F048         	movff	vfprintf@ap,vfpfcnvrt@ap
  1306  0017EC  C08C  F049         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1307  0017F0  EC30  F007         	call	_vfpfcnvrt	;wreg free
  1308  0017F4  5044               	movf	?_vfpfcnvrt^0,w,c
  1309  0017F6  0100               	movlb	0	; () banked
  1310  0017F8  2760               	addwf	_nout& (0+255),f,b
  1311  0017FA  5045               	movf	(?_vfpfcnvrt+1)^0,w,c
  1312  0017FC  2361               	addwfc	(_nout+1)& (0+255),f,b
  1313  0017FE                     l2405:
  1314                           
  1315                           ; BSR set to: 0
  1316                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1375:     while (
      +                          *cfmt) {
  1317  0017FE  C054  FFF6         	movff	vfprintf@cfmt,tblptrl
  1318  001802  C055  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1319  001806                     	if	0	;tblptru may be non-zero
  1320  001806                     	endif
  1321  001806                     	if	0	;tblptru may be non-zero
  1322  001806                     	endif
  1323  001806  0008               	tblrd		*
  1324  001808  50F5               	movf	tablat,w,c
  1325  00180A  0900               	iorlw	0
  1326  00180C  A4D8               	btfss	status,2,c
  1327  00180E  EF0B  F00C         	goto	u1861
  1328  001812  EF0D  F00C         	goto	u1860
  1329  001816                     u1861:
  1330  001816  EFEC  F00B         	goto	l2403
  1331  00181A                     u1860:
  1332  00181A                     
  1333                           ; BSR set to: 0
  1334                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1378:     return 
      +                          nout;
  1335  00181A  C060  F087         	movff	_nout,?_vfprintf
  1336  00181E  C061  F088         	movff	_nout+1,?_vfprintf+1
  1337  001822                     
  1338                           ; BSR set to: 0
  1339  001822  0012               	return		;funcret
  1340  001824                     __end_of_vfprintf:
  1341                           	callstack 0
  1342                           
  1343 ;; *************** function _vfpfcnvrt *****************
  1344 ;; Defined at:
  1345 ;;		line 670 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;  fp              2   67[COMRAM] PTR struct _IO_FILE
  1348 ;;		 -> sprintf@f(6), 
  1349 ;;  fmt             2   69[COMRAM] PTR PTR unsigned char 
  1350 ;;		 -> vfprintf@cfmt(2), 
  1351 ;;  ap              2   71[COMRAM] PTR PTR void 
  1352 ;;		 -> sprintf@ap(2), 
  1353 ;; Auto vars:     Size  Location     Type
  1354 ;;  ll              8   75[COMRAM] long long 
  1355 ;;  llu             8    0        unsigned long long 
  1356 ;;  f               4    0        unsigned long long 
  1357 ;;  vp              3    0        PTR void 
  1358 ;;  ct              3    0        unsigned char [3]
  1359 ;;  cp              3    0        PTR unsigned char 
  1360 ;;  i               2    0        int 
  1361 ;;  done            2    0        int 
  1362 ;;  c               1    0        unsigned char 
  1363 ;; Return value:  Size  Location     Type
  1364 ;;                  2   67[COMRAM] int 
  1365 ;; Registers used:
  1366 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1372 ;;      Params:         6       0       0       0       0       0       0       0       0
  1373 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1374 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1375 ;;      Totals:        16       0       0       0       0       0       0       0       0
  1376 ;;Total ram usage:       16 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; Hardware stack levels required when called:    7
  1379 ;; This function calls:
  1380 ;;		_dtoa
  1381 ;;		_fputc
  1382 ;; This function is called by:
  1383 ;;		_vfprintf
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387                           	psect	text3
  1388  000E60                     __ptext3:
  1389                           	callstack 0
  1390  000E60                     _vfpfcnvrt:
  1391                           	callstack 21
  1392  000E60                     
  1393                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 670: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.20\pic\sou
      +                          rces\c99\common\doprnt.c: 671: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\co
      +                          mmon\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files\Microchip\xc8\v2.20\pic\sou
      +                          rces\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files\Microchip\xc8\v2.20\pic
      +                          \sources\c99\common\doprnt.c: 674:     long long ll;;C:\Program Files\Microchip\xc8\v2.2
      +                          0\pic\sources\c99\common\doprnt.c: 675:     unsigned long long llu;
  1394  000E60  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1395  000E64  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1396  000E68  CFDE FFF6          	movff	postinc2,tblptrl
  1397  000E6C  CFDD FFF7          	movff	postdec2,tblptrh
  1398  000E70                     	if	0	;tblptru may be non-zero
  1399  000E70                     	endif
  1400  000E70                     	if	0	;tblptru may be non-zero
  1401  000E70                     	endif
  1402  000E70  0008               	tblrd		*
  1403  000E72  50F5               	movf	tablat,w,c
  1404  000E74  0A25               	xorlw	37
  1405  000E76  A4D8               	btfss	status,2,c
  1406  000E78  EF40  F007         	goto	u1821
  1407  000E7C  EF42  F007         	goto	u1820
  1408  000E80                     u1821:
  1409  000E80  EFEE  F007         	goto	l2391
  1410  000E84                     u1820:
  1411  000E84                     
  1412                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 681:         ++*f
      +                          mt;
  1413  000E84  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1414  000E88  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1415  000E8C  2ADE               	incf	postinc2,f,c
  1416  000E8E  0E00               	movlw	0
  1417  000E90  22DD               	addwfc	postdec2,f,c
  1418  000E92                     
  1419                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 683:         flag
      +                          s = width = 0;
  1420  000E92  0E00               	movlw	0
  1421  000E94  0100               	movlb	0	; () banked
  1422  000E96  6F63               	movwf	(_width+1)& (0+255),b
  1423  000E98  0E00               	movlw	0
  1424  000E9A  6F62               	movwf	_width& (0+255),b
  1425  000E9C  C062  F058         	movff	_width,_flags
  1426  000EA0  C063  F059         	movff	_width+1,_flags+1
  1427  000EA4                     
  1428                           ; BSR set to: 0
  1429                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 684:         prec
      +                           = -1;
  1430  000EA4  6856               	setf	_prec^0,c
  1431  000EA6  6857               	setf	(_prec+1)^0,c
  1432  000EA8                     
  1433                           ; BSR set to: 0
  1434                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 825:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  1435  000EA8  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1436  000EAC  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1437  000EB0  CFDE FFF6          	movff	postinc2,tblptrl
  1438  000EB4  CFDD FFF7          	movff	postdec2,tblptrh
  1439  000EB8                     	if	0	;tblptru may be non-zero
  1440  000EB8                     	endif
  1441  000EB8                     	if	0	;tblptru may be non-zero
  1442  000EB8                     	endif
  1443  000EB8  0008               	tblrd		*
  1444  000EBA  50F5               	movf	tablat,w,c
  1445  000EBC  0A64               	xorlw	100
  1446  000EBE  B4D8               	btfsc	status,2,c
  1447  000EC0  EF64  F007         	goto	u1831
  1448  000EC4  EF66  F007         	goto	u1830
  1449  000EC8                     u1831:
  1450  000EC8  EF78  F007         	goto	l2369
  1451  000ECC                     u1830:
  1452  000ECC                     
  1453                           ; BSR set to: 0
  1454  000ECC  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1455  000ED0  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1456  000ED4  CFDE FFF6          	movff	postinc2,tblptrl
  1457  000ED8  CFDD FFF7          	movff	postdec2,tblptrh
  1458  000EDC                     	if	0	;tblptru may be non-zero
  1459  000EDC                     	endif
  1460  000EDC                     	if	0	;tblptru may be non-zero
  1461  000EDC                     	endif
  1462  000EDC  0008               	tblrd		*
  1463  000EDE  50F5               	movf	tablat,w,c
  1464  000EE0  0A69               	xorlw	105
  1465  000EE2  A4D8               	btfss	status,2,c
  1466  000EE4  EF76  F007         	goto	u1841
  1467  000EE8  EF78  F007         	goto	u1840
  1468  000EEC                     u1841:
  1469  000EEC  EFB8  F007         	goto	l2375
  1470  000EF0                     u1840:
  1471  000EF0                     l2369:
  1472                           
  1473                           ; BSR set to: 0
  1474                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 827:             
      +                          ++*fmt;
  1475  000EF0  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1476  000EF4  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1477  000EF8  2ADE               	incf	postinc2,f,c
  1478  000EFA  0E00               	movlw	0
  1479  000EFC  22DD               	addwfc	postdec2,f,c
  1480                           
  1481                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 828:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1482  000EFE  C048  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1483  000F02  C049  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1484  000F06  CFDF F04A          	movff	indf2,??_vfpfcnvrt
  1485  000F0A  0E02               	movlw	2
  1486  000F0C  26DE               	addwf	postinc2,f,c
  1487  000F0E  CFDF F04B          	movff	indf2,??_vfpfcnvrt+1
  1488  000F12  0E00               	movlw	0
  1489  000F14  22DD               	addwfc	postdec2,f,c
  1490  000F16  C04A  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1491  000F1A  C04B  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1492  000F1E  CFDE F04C          	movff	postinc2,vfpfcnvrt@ll
  1493  000F22  CFDD F04D          	movff	postdec2,vfpfcnvrt@ll+1
  1494  000F26  0E00               	movlw	0
  1495  000F28  BE4D               	btfsc	(vfpfcnvrt@ll+1)^0,7,c
  1496  000F2A  0EFF               	movlw	-1
  1497  000F2C  6E4E               	movwf	(vfpfcnvrt@ll+2)^0,c
  1498  000F2E  6E4F               	movwf	(vfpfcnvrt@ll+3)^0,c
  1499  000F30  6E50               	movwf	(vfpfcnvrt@ll+4)^0,c
  1500  000F32  6E51               	movwf	(vfpfcnvrt@ll+5)^0,c
  1501  000F34  6E52               	movwf	(vfpfcnvrt@ll+6)^0,c
  1502  000F36  6E53               	movwf	(vfpfcnvrt@ll+7)^0,c
  1503  000F38                     
  1504                           ; BSR set to: 0
  1505                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 830:             
      +                          return dtoa(fp, ll);
  1506  000F38  C044  F020         	movff	vfpfcnvrt@fp,dtoa@fp
  1507  000F3C  C045  F021         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1508  000F40  C04C  F022         	movff	vfpfcnvrt@ll,dtoa@d
  1509  000F44  C04D  F023         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1510  000F48  C04E  F024         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1511  000F4C  C04F  F025         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1512  000F50  C050  F026         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1513  000F54  C051  F027         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1514  000F58  C052  F028         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1515  000F5C  C053  F029         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1516  000F60  ECC1  F005         	call	_dtoa	;wreg free
  1517  000F64  C020  F044         	movff	?_dtoa,?_vfpfcnvrt
  1518  000F68  C021  F045         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1519  000F6C  EF09  F008         	goto	l896
  1520  000F70                     l2375:
  1521                           
  1522                           ; BSR set to: 0
  1523                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1350:         if 
      +                          ((*fmt)[0] == '%') {
  1524  000F70  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1525  000F74  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1526  000F78  CFDE FFF6          	movff	postinc2,tblptrl
  1527  000F7C  CFDD FFF7          	movff	postdec2,tblptrh
  1528  000F80                     	if	0	;tblptru may be non-zero
  1529  000F80                     	endif
  1530  000F80                     	if	0	;tblptru may be non-zero
  1531  000F80                     	endif
  1532  000F80  0008               	tblrd		*
  1533  000F82  50F5               	movf	tablat,w,c
  1534  000F84  0A25               	xorlw	37
  1535  000F86  A4D8               	btfss	status,2,c
  1536  000F88  EFC8  F007         	goto	u1851
  1537  000F8C  EFCA  F007         	goto	u1850
  1538  000F90                     u1851:
  1539  000F90  EFE1  F007         	goto	l2385
  1540  000F94                     u1850:
  1541  000F94                     
  1542                           ; BSR set to: 0
  1543                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1351:            
      +                           ++*fmt;
  1544  000F94  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1545  000F98  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1546  000F9C  2ADE               	incf	postinc2,f,c
  1547  000F9E  0E00               	movlw	0
  1548  000FA0  22DD               	addwfc	postdec2,f,c
  1549  000FA2                     
  1550                           ; BSR set to: 0
  1551                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1352:            
      +                           fputc((int)'%', fp);
  1552  000FA2  0E00               	movlw	0
  1553  000FA4  6E06               	movwf	(fputc@c+1)^0,c
  1554  000FA6  0E25               	movlw	37
  1555  000FA8  6E05               	movwf	fputc@c^0,c
  1556  000FAA  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1557  000FAE  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1558  000FB2  EC75  F00A         	call	_fputc	;wreg free
  1559  000FB6                     l2381:
  1560                           
  1561                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1353:            
      +                           return 1;
  1562  000FB6  0E00               	movlw	0
  1563  000FB8  6E45               	movwf	(?_vfpfcnvrt+1)^0,c
  1564  000FBA  0E01               	movlw	1
  1565  000FBC  6E44               	movwf	?_vfpfcnvrt^0,c
  1566  000FBE  EF09  F008         	goto	l896
  1567  000FC2                     l2385:
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1357:         ++*
      +                          fmt;
  1571  000FC2  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1572  000FC6  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1573  000FCA  2ADE               	incf	postinc2,f,c
  1574  000FCC  0E00               	movlw	0
  1575  000FCE  22DD               	addwfc	postdec2,f,c
  1576  000FD0                     
  1577                           ; BSR set to: 0
  1578                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1358:         ret
      +                          urn 0;
  1579  000FD0  0E00               	movlw	0
  1580  000FD2  6E45               	movwf	(?_vfpfcnvrt+1)^0,c
  1581  000FD4  0E00               	movlw	0
  1582  000FD6  6E44               	movwf	?_vfpfcnvrt^0,c
  1583  000FD8  EF09  F008         	goto	l896
  1584  000FDC                     l2391:
  1585                           
  1586                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1362:     fputc((
      +                          int)(*fmt)[0], fp);
  1587  000FDC  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1588  000FE0  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1589  000FE4  CFDE FFF6          	movff	postinc2,tblptrl
  1590  000FE8  CFDD FFF7          	movff	postdec2,tblptrh
  1591  000FEC                     	if	0	;tblptru may be non-zero
  1592  000FEC                     	endif
  1593  000FEC                     	if	0	;tblptru may be non-zero
  1594  000FEC                     	endif
  1595  000FEC  0008               	tblrd		*
  1596  000FEE  50F5               	movf	tablat,w,c
  1597  000FF0  6E05               	movwf	fputc@c^0,c
  1598  000FF2  6A06               	clrf	(fputc@c+1)^0,c
  1599  000FF4  C044  F007         	movff	vfpfcnvrt@fp,fputc@fp
  1600  000FF8  C045  F008         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1601  000FFC  EC75  F00A         	call	_fputc	;wreg free
  1602  001000                     
  1603                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 1363:     ++*fmt;
  1604  001000  C046  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1605  001004  C047  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1606  001008  2ADE               	incf	postinc2,f,c
  1607  00100A  0E00               	movlw	0
  1608  00100C  22DD               	addwfc	postdec2,f,c
  1609  00100E  EFDB  F007         	goto	l2381
  1610  001012                     l896:
  1611  001012  0012               	return		;funcret
  1612  001014                     __end_of_vfpfcnvrt:
  1613                           	callstack 0
  1614                           
  1615 ;; *************** function _dtoa *****************
  1616 ;; Defined at:
  1617 ;;		line 274 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c"
  1618 ;; Parameters:    Size  Location     Type
  1619 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  1620 ;;		 -> sprintf@f(6), 
  1621 ;;  d               8   33[COMRAM] long long 
  1622 ;; Auto vars:     Size  Location     Type
  1623 ;;  n               8   57[COMRAM] long long 
  1624 ;;  i               2   65[COMRAM] int 
  1625 ;;  s               2   55[COMRAM] int 
  1626 ;;  w               2   53[COMRAM] int 
  1627 ;;  p               2   51[COMRAM] int 
  1628 ;; Return value:  Size  Location     Type
  1629 ;;                  2   31[COMRAM] int 
  1630 ;; Registers used:
  1631 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1632 ;; Tracked objects:
  1633 ;;		On entry : 0/0
  1634 ;;		On exit  : 0/0
  1635 ;;		Unchanged: 0/0
  1636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1637 ;;      Params:        10       0       0       0       0       0       0       0       0
  1638 ;;      Locals:        18       0       0       0       0       0       0       0       0
  1639 ;;      Temps:          8       0       0       0       0       0       0       0       0
  1640 ;;      Totals:        36       0       0       0       0       0       0       0       0
  1641 ;;Total ram usage:       36 bytes
  1642 ;; Hardware stack levels used:    1
  1643 ;; Hardware stack levels required when called:    6
  1644 ;; This function calls:
  1645 ;;		___aodiv
  1646 ;;		___aomod
  1647 ;;		_abs
  1648 ;;		_pad
  1649 ;; This function is called by:
  1650 ;;		_vfpfcnvrt
  1651 ;; This function uses a non-reentrant model
  1652 ;;
  1653                           
  1654                           	psect	text4
  1655  000B82                     __ptext4:
  1656                           	callstack 0
  1657  000B82                     _dtoa:
  1658                           	callstack 21
  1659  000B82                     
  1660                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 274: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\d
      +                          oprnt.c: 275: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 27
      +                          6:     int i, p, s, w;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprn
      +                          t.c: 277:     long long n;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\d
      +                          oprnt.c: 280:     n = d;
  1661  000B82  C022  F03A         	movff	dtoa@d,dtoa@n
  1662  000B86  C023  F03B         	movff	dtoa@d+1,dtoa@n+1
  1663  000B8A  C024  F03C         	movff	dtoa@d+2,dtoa@n+2
  1664  000B8E  C025  F03D         	movff	dtoa@d+3,dtoa@n+3
  1665  000B92  C026  F03E         	movff	dtoa@d+4,dtoa@n+4
  1666  000B96  C027  F03F         	movff	dtoa@d+5,dtoa@n+5
  1667  000B9A  C028  F040         	movff	dtoa@d+6,dtoa@n+6
  1668  000B9E  C029  F041         	movff	dtoa@d+7,dtoa@n+7
  1669  000BA2                     
  1670                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 281:     s = n < 
      +                          0 ? 1 : 0;
  1671  000BA2  BE41               	btfsc	(dtoa@n+7)^0,7,c
  1672  000BA4  EFD6  F005         	goto	u1671
  1673  000BA8  EFD9  F005         	goto	u1670
  1674  000BAC                     u1671:
  1675  000BAC  0E01               	movlw	1
  1676  000BAE  EFDA  F005         	goto	u1680
  1677  000BB2                     u1670:
  1678  000BB2  0E00               	movlw	0
  1679  000BB4                     u1680:
  1680  000BB4  6E38               	movwf	dtoa@s^0,c
  1681  000BB6  6A39               	clrf	(dtoa@s+1)^0,c
  1682                           
  1683                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 282:     if (s) {
  1684  000BB8  5038               	movf	dtoa@s^0,w,c
  1685  000BBA  1039               	iorwf	(dtoa@s+1)^0,w,c
  1686  000BBC  B4D8               	btfsc	status,2,c
  1687  000BBE  EFE3  F005         	goto	u1691
  1688  000BC2  EFE5  F005         	goto	u1690
  1689  000BC6                     u1691:
  1690  000BC6  EFF5  F005         	goto	l2301
  1691  000BCA                     u1690:
  1692  000BCA                     
  1693                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 283:         n = 
      +                          -n;
  1694  000BCA  1E41               	comf	(dtoa@n+7)^0,f,c
  1695  000BCC  1E40               	comf	(dtoa@n+6)^0,f,c
  1696  000BCE  1E3F               	comf	(dtoa@n+5)^0,f,c
  1697  000BD0  1E3E               	comf	(dtoa@n+4)^0,f,c
  1698  000BD2  1E3D               	comf	(dtoa@n+3)^0,f,c
  1699  000BD4  1E3C               	comf	(dtoa@n+2)^0,f,c
  1700  000BD6  1E3B               	comf	(dtoa@n+1)^0,f,c
  1701  000BD8  6C3A               	negf	dtoa@n^0,c
  1702  000BDA  0E00               	movlw	0
  1703  000BDC  223B               	addwfc	(dtoa@n+1)^0,f,c
  1704  000BDE  223C               	addwfc	(dtoa@n+2)^0,f,c
  1705  000BE0  223D               	addwfc	(dtoa@n+3)^0,f,c
  1706  000BE2  223E               	addwfc	(dtoa@n+4)^0,f,c
  1707  000BE4  223F               	addwfc	(dtoa@n+5)^0,f,c
  1708  000BE6  2240               	addwfc	(dtoa@n+6)^0,f,c
  1709  000BE8  2241               	addwfc	(dtoa@n+7)^0,f,c
  1710  000BEA                     l2301:
  1711                           
  1712                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 287:     if (!(pr
      +                          ec < 0)) {
  1713  000BEA  BE57               	btfsc	(_prec+1)^0,7,c
  1714  000BEC  EFFA  F005         	goto	u1701
  1715  000BF0  EFFC  F005         	goto	u1700
  1716  000BF4                     u1701:
  1717  000BF4  EFFD  F005         	goto	l2305
  1718  000BF8                     u1700:
  1719  000BF8                     
  1720                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 288:         flag
      +                          s &= ~(1 << 1);
  1721  000BF8  9258               	bcf	_flags^0,1,c
  1722  000BFA                     l2305:
  1723                           
  1724                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 290:     p = (0 <
      +                           prec) ? prec : 1;
  1725  000BFA  BE57               	btfsc	(_prec+1)^0,7,c
  1726  000BFC  EF0A  F006         	goto	u1710
  1727  000C00  5057               	movf	(_prec+1)^0,w,c
  1728  000C02  E106               	bnz	u1711
  1729  000C04  0456               	decf	_prec^0,w,c
  1730  000C06  B0D8               	btfsc	status,0,c
  1731  000C08  EF08  F006         	goto	u1711
  1732  000C0C  EF0A  F006         	goto	u1710
  1733  000C10                     u1711:
  1734  000C10  EF10  F006         	goto	l869
  1735  000C14                     u1710:
  1736  000C14  0E00               	movlw	0
  1737  000C16  6E35               	movwf	(dtoa@p+1)^0,c
  1738  000C18  0E01               	movlw	1
  1739  000C1A  6E34               	movwf	dtoa@p^0,c
  1740  000C1C  EF14  F006         	goto	l871
  1741  000C20                     l869:
  1742  000C20  C056  F034         	movff	_prec,dtoa@p
  1743  000C24  C057  F035         	movff	_prec+1,dtoa@p+1
  1744  000C28                     l871:
  1745                           
  1746                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 291:     w = widt
      +                          h;
  1747  000C28  C062  F036         	movff	_width,dtoa@w
  1748  000C2C  C063  F037         	movff	_width+1,dtoa@w+1
  1749  000C30                     
  1750                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 292:     if (s ||
      +                           (flags & (1 << 2))) {
  1751  000C30  5038               	movf	dtoa@s^0,w,c
  1752  000C32  1039               	iorwf	(dtoa@s+1)^0,w,c
  1753  000C34  A4D8               	btfss	status,2,c
  1754  000C36  EF1F  F006         	goto	u1721
  1755  000C3A  EF21  F006         	goto	u1720
  1756  000C3E                     u1721:
  1757  000C3E  EF28  F006         	goto	l2313
  1758  000C42                     u1720:
  1759  000C42  A458               	btfss	_flags^0,2,c
  1760  000C44  EF26  F006         	goto	u1731
  1761  000C48  EF28  F006         	goto	u1730
  1762  000C4C                     u1731:
  1763  000C4C  EF2B  F006         	goto	l2315
  1764  000C50                     u1730:
  1765  000C50                     l2313:
  1766                           
  1767                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 293:         --w;
  1768  000C50  0636               	decf	dtoa@w^0,f,c
  1769  000C52  A0D8               	btfss	status,0,c
  1770  000C54  0637               	decf	(dtoa@w+1)^0,f,c
  1771  000C56                     l2315:
  1772                           
  1773                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 297:     i = size
      +                          of(dbuf) - 1;
  1774  000C56  0E00               	movlw	0
  1775  000C58  6E43               	movwf	(dtoa@i+1)^0,c
  1776  000C5A  0E1F               	movlw	31
  1777  000C5C  6E42               	movwf	dtoa@i^0,c
  1778  000C5E                     
  1779                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 298:     dbuf[i] 
      +                          = '\0';
  1780  000C5E  0E00               	movlw	0
  1781  000C60  0100               	movlb	0	; () banked
  1782  000C62  6F86               	movwf	(_dbuf+31)& (0+255),b
  1783                           
  1784                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 299:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1785  000C64  EFB0  F006         	goto	l2329
  1786  000C68                     l2319:
  1787                           
  1788                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 300:         --i;
  1789  000C68  0642               	decf	dtoa@i^0,f,c
  1790  000C6A  A0D8               	btfss	status,0,c
  1791  000C6C  0643               	decf	(dtoa@i+1)^0,f,c
  1792  000C6E                     
  1793                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 301:         dbuf
      +                          [i] = '0' + abs(n % 10);
  1794  000C6E  0E67               	movlw	low _dbuf
  1795  000C70  2442               	addwf	dtoa@i^0,w,c
  1796  000C72  6ED9               	movwf	fsr2l,c
  1797  000C74  0E00               	movlw	high _dbuf
  1798  000C76  2043               	addwfc	(dtoa@i+1)^0,w,c
  1799  000C78  6EDA               	movwf	fsr2h,c
  1800  000C7A  C03A  F005         	movff	dtoa@n,___aomod@dividend
  1801  000C7E  C03B  F006         	movff	dtoa@n+1,___aomod@dividend+1
  1802  000C82  C03C  F007         	movff	dtoa@n+2,___aomod@dividend+2
  1803  000C86  C03D  F008         	movff	dtoa@n+3,___aomod@dividend+3
  1804  000C8A  C03E  F009         	movff	dtoa@n+4,___aomod@dividend+4
  1805  000C8E  C03F  F00A         	movff	dtoa@n+5,___aomod@dividend+5
  1806  000C92  C040  F00B         	movff	dtoa@n+6,___aomod@dividend+6
  1807  000C96  C041  F00C         	movff	dtoa@n+7,___aomod@dividend+7
  1808  000C9A  0E0A               	movlw	10
  1809  000C9C  6E0D               	movwf	___aomod@divisor^0,c
  1810  000C9E  0E00               	movlw	0
  1811  000CA0  6E0E               	movwf	(___aomod@divisor+1)^0,c
  1812  000CA2  0E00               	movlw	0
  1813  000CA4  6E0F               	movwf	(___aomod@divisor+2)^0,c
  1814  000CA6  0E00               	movlw	0
  1815  000CA8  6E10               	movwf	(___aomod@divisor+3)^0,c
  1816  000CAA  0E00               	movlw	0
  1817  000CAC  6E11               	movwf	(___aomod@divisor+4)^0,c
  1818  000CAE  0E00               	movlw	0
  1819  000CB0  6E12               	movwf	(___aomod@divisor+5)^0,c
  1820  000CB2  0E00               	movlw	0
  1821  000CB4  6E13               	movwf	(___aomod@divisor+6)^0,c
  1822  000CB6  0E00               	movlw	0
  1823  000CB8  6E14               	movwf	(___aomod@divisor+7)^0,c
  1824  000CBA  ECCE  F008         	call	___aomod	;wreg free
  1825  000CBE  C005  F02A         	movff	?___aomod,??_dtoa
  1826  000CC2  C006  F02B         	movff	?___aomod+1,??_dtoa+1
  1827  000CC6  C007  F02C         	movff	?___aomod+2,??_dtoa+2
  1828  000CCA  C008  F02D         	movff	?___aomod+3,??_dtoa+3
  1829  000CCE  C009  F02E         	movff	?___aomod+4,??_dtoa+4
  1830  000CD2  C00A  F02F         	movff	?___aomod+5,??_dtoa+5
  1831  000CD6  C00B  F030         	movff	?___aomod+6,??_dtoa+6
  1832  000CDA  C00C  F031         	movff	?___aomod+7,??_dtoa+7
  1833  000CDE  C02A  F017         	movff	??_dtoa,abs@a
  1834  000CE2  C02C  F018         	movff	??_dtoa+2,abs@a+1
  1835  000CE6  ECB6  F00C         	call	_abs	;wreg free
  1836  000CEA  5017               	movf	?_abs^0,w,c
  1837  000CEC  0F30               	addlw	48
  1838  000CEE  6EDF               	movwf	indf2,c
  1839  000CF0                     
  1840                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 302:         --p;
  1841  000CF0  0634               	decf	dtoa@p^0,f,c
  1842  000CF2  A0D8               	btfss	status,0,c
  1843  000CF4  0635               	decf	(dtoa@p+1)^0,f,c
  1844  000CF6                     
  1845                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 303:         --w;
  1846  000CF6  0636               	decf	dtoa@w^0,f,c
  1847  000CF8  A0D8               	btfss	status,0,c
  1848  000CFA  0637               	decf	(dtoa@w+1)^0,f,c
  1849  000CFC                     
  1850                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 304:         n = 
      +                          n / 10;
  1851  000CFC  C03A  F005         	movff	dtoa@n,___aodiv@dividend
  1852  000D00  C03B  F006         	movff	dtoa@n+1,___aodiv@dividend+1
  1853  000D04  C03C  F007         	movff	dtoa@n+2,___aodiv@dividend+2
  1854  000D08  C03D  F008         	movff	dtoa@n+3,___aodiv@dividend+3
  1855  000D0C  C03E  F009         	movff	dtoa@n+4,___aodiv@dividend+4
  1856  000D10  C03F  F00A         	movff	dtoa@n+5,___aodiv@dividend+5
  1857  000D14  C040  F00B         	movff	dtoa@n+6,___aodiv@dividend+6
  1858  000D18  C041  F00C         	movff	dtoa@n+7,___aodiv@dividend+7
  1859  000D1C  0E0A               	movlw	10
  1860  000D1E  6E0D               	movwf	___aodiv@divisor^0,c
  1861  000D20  0E00               	movlw	0
  1862  000D22  6E0E               	movwf	(___aodiv@divisor+1)^0,c
  1863  000D24  0E00               	movlw	0
  1864  000D26  6E0F               	movwf	(___aodiv@divisor+2)^0,c
  1865  000D28  0E00               	movlw	0
  1866  000D2A  6E10               	movwf	(___aodiv@divisor+3)^0,c
  1867  000D2C  0E00               	movlw	0
  1868  000D2E  6E11               	movwf	(___aodiv@divisor+4)^0,c
  1869  000D30  0E00               	movlw	0
  1870  000D32  6E12               	movwf	(___aodiv@divisor+5)^0,c
  1871  000D34  0E00               	movlw	0
  1872  000D36  6E13               	movwf	(___aodiv@divisor+6)^0,c
  1873  000D38  0E00               	movlw	0
  1874  000D3A  6E14               	movwf	(___aodiv@divisor+7)^0,c
  1875  000D3C  EC0A  F008         	call	___aodiv	;wreg free
  1876  000D40  C005  F03A         	movff	?___aodiv,dtoa@n
  1877  000D44  C006  F03B         	movff	?___aodiv+1,dtoa@n+1
  1878  000D48  C007  F03C         	movff	?___aodiv+2,dtoa@n+2
  1879  000D4C  C008  F03D         	movff	?___aodiv+3,dtoa@n+3
  1880  000D50  C009  F03E         	movff	?___aodiv+4,dtoa@n+4
  1881  000D54  C00A  F03F         	movff	?___aodiv+5,dtoa@n+5
  1882  000D58  C00B  F040         	movff	?___aodiv+6,dtoa@n+6
  1883  000D5C  C00C  F041         	movff	?___aodiv+7,dtoa@n+7
  1884  000D60                     l2329:
  1885                           
  1886                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 299:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1887  000D60  BE43               	btfsc	(dtoa@i+1)^0,7,c
  1888  000D62  EFBB  F006         	goto	u1741
  1889  000D66  5043               	movf	(dtoa@i+1)^0,w,c
  1890  000D68  E108               	bnz	u1740
  1891  000D6A  0442               	decf	dtoa@i^0,w,c
  1892  000D6C  A0D8               	btfss	status,0,c
  1893  000D6E  EFBB  F006         	goto	u1741
  1894  000D72  EFBD  F006         	goto	u1740
  1895  000D76                     u1741:
  1896  000D76  EFED  F006         	goto	l2339
  1897  000D7A                     u1740:
  1898  000D7A  503A               	movf	dtoa@n^0,w,c
  1899  000D7C  103B               	iorwf	(dtoa@n+1)^0,w,c
  1900  000D7E  103C               	iorwf	(dtoa@n+2)^0,w,c
  1901  000D80  103D               	iorwf	(dtoa@n+3)^0,w,c
  1902  000D82  103E               	iorwf	(dtoa@n+4)^0,w,c
  1903  000D84  103F               	iorwf	(dtoa@n+5)^0,w,c
  1904  000D86  1040               	iorwf	(dtoa@n+6)^0,w,c
  1905  000D88  1041               	iorwf	(dtoa@n+7)^0,w,c
  1906  000D8A  A4D8               	btfss	status,2,c
  1907  000D8C  EFCA  F006         	goto	u1751
  1908  000D90  EFCC  F006         	goto	u1750
  1909  000D94                     u1751:
  1910  000D94  EF34  F006         	goto	l2319
  1911  000D98                     u1750:
  1912  000D98  BE35               	btfsc	(dtoa@p+1)^0,7,c
  1913  000D9A  EFD9  F006         	goto	u1760
  1914  000D9E  5035               	movf	(dtoa@p+1)^0,w,c
  1915  000DA0  E106               	bnz	u1761
  1916  000DA2  0434               	decf	dtoa@p^0,w,c
  1917  000DA4  B0D8               	btfsc	status,0,c
  1918  000DA6  EFD7  F006         	goto	u1761
  1919  000DAA  EFD9  F006         	goto	u1760
  1920  000DAE                     u1761:
  1921  000DAE  EF34  F006         	goto	l2319
  1922  000DB2                     u1760:
  1923  000DB2  BE37               	btfsc	(dtoa@w+1)^0,7,c
  1924  000DB4  EFE4  F006         	goto	u1771
  1925  000DB8  5037               	movf	(dtoa@w+1)^0,w,c
  1926  000DBA  E108               	bnz	u1770
  1927  000DBC  0436               	decf	dtoa@w^0,w,c
  1928  000DBE  A0D8               	btfss	status,0,c
  1929  000DC0  EFE4  F006         	goto	u1771
  1930  000DC4  EFE6  F006         	goto	u1770
  1931  000DC8                     u1771:
  1932  000DC8  EFED  F006         	goto	l2339
  1933  000DCC                     u1770:
  1934  000DCC  B258               	btfsc	_flags^0,1,c
  1935  000DCE  EFEB  F006         	goto	u1781
  1936  000DD2  EFED  F006         	goto	u1780
  1937  000DD6                     u1781:
  1938  000DD6  EF34  F006         	goto	l2319
  1939  000DDA                     u1780:
  1940  000DDA                     l2339:
  1941                           
  1942                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 308:     if (s ||
      +                           (flags & (1 << 2))) {
  1943  000DDA  5038               	movf	dtoa@s^0,w,c
  1944  000DDC  1039               	iorwf	(dtoa@s+1)^0,w,c
  1945  000DDE  A4D8               	btfss	status,2,c
  1946  000DE0  EFF4  F006         	goto	u1791
  1947  000DE4  EFF6  F006         	goto	u1790
  1948  000DE8                     u1791:
  1949  000DE8  EFFD  F006         	goto	l2343
  1950  000DEC                     u1790:
  1951  000DEC  A458               	btfss	_flags^0,2,c
  1952  000DEE  EFFB  F006         	goto	u1801
  1953  000DF2  EFFD  F006         	goto	u1800
  1954  000DF6                     u1801:
  1955  000DF6  EF1B  F007         	goto	l2353
  1956  000DFA                     u1800:
  1957  000DFA                     l2343:
  1958                           
  1959                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 309:         --i;
  1960  000DFA  0642               	decf	dtoa@i^0,f,c
  1961  000DFC  A0D8               	btfss	status,0,c
  1962  000DFE  0643               	decf	(dtoa@i+1)^0,f,c
  1963  000E00                     
  1964                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 310:         dbuf
      +                          [i] = s ? '-' : '+';
  1965  000E00  5038               	movf	dtoa@s^0,w,c
  1966  000E02  1039               	iorwf	(dtoa@s+1)^0,w,c
  1967  000E04  A4D8               	btfss	status,2,c
  1968  000E06  EF07  F007         	goto	u1811
  1969  000E0A  EF09  F007         	goto	u1810
  1970  000E0E                     u1811:
  1971  000E0E  EF0F  F007         	goto	l2349
  1972  000E12                     u1810:
  1973  000E12  0E00               	movlw	0
  1974  000E14  6E33               	movwf	(_dtoa$1275+1)^0,c
  1975  000E16  0E2B               	movlw	43
  1976  000E18  6E32               	movwf	_dtoa$1275^0,c
  1977  000E1A  EF13  F007         	goto	l2351
  1978  000E1E                     l2349:
  1979  000E1E  0E00               	movlw	0
  1980  000E20  6E33               	movwf	(_dtoa$1275+1)^0,c
  1981  000E22  0E2D               	movlw	45
  1982  000E24  6E32               	movwf	_dtoa$1275^0,c
  1983  000E26                     l2351:
  1984  000E26  0E67               	movlw	low _dbuf
  1985  000E28  2442               	addwf	dtoa@i^0,w,c
  1986  000E2A  6ED9               	movwf	fsr2l,c
  1987  000E2C  0E00               	movlw	high _dbuf
  1988  000E2E  2043               	addwfc	(dtoa@i+1)^0,w,c
  1989  000E30  6EDA               	movwf	fsr2h,c
  1990  000E32  C032  FFDF         	movff	_dtoa$1275,indf2
  1991  000E36                     l2353:
  1992                           
  1993                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 314:     return p
      +                          ad(fp, &dbuf[i], w);
  1994  000E36  C020  F015         	movff	dtoa@fp,pad@fp
  1995  000E3A  C021  F016         	movff	dtoa@fp+1,pad@fp+1
  1996  000E3E  0E67               	movlw	low _dbuf
  1997  000E40  2442               	addwf	dtoa@i^0,w,c
  1998  000E42  6E17               	movwf	pad@buf^0,c
  1999  000E44  0E00               	movlw	high _dbuf
  2000  000E46  2043               	addwfc	(dtoa@i+1)^0,w,c
  2001  000E48  6E18               	movwf	(pad@buf+1)^0,c
  2002  000E4A  C036  F019         	movff	dtoa@w,pad@p
  2003  000E4E  C037  F01A         	movff	dtoa@w+1,pad@p+1
  2004  000E52  ECDA  F00A         	call	_pad	;wreg free
  2005  000E56  C015  F020         	movff	?_pad,?_dtoa
  2006  000E5A  C016  F021         	movff	?_pad+1,?_dtoa+1
  2007  000E5E  0012               	return		;funcret
  2008  000E60                     __end_of_dtoa:
  2009                           	callstack 0
  2010                           
  2011 ;; *************** function _pad *****************
  2012 ;; Defined at:
  2013 ;;		line 72 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c"
  2014 ;; Parameters:    Size  Location     Type
  2015 ;;  fp              2   20[COMRAM] PTR struct _IO_FILE
  2016 ;;		 -> sprintf@f(6), 
  2017 ;;  buf             2   22[COMRAM] PTR unsigned char 
  2018 ;;		 -> dbuf(32), 
  2019 ;;  p               2   24[COMRAM] int 
  2020 ;; Auto vars:     Size  Location     Type
  2021 ;;  w               2   29[COMRAM] int 
  2022 ;;  i               2   27[COMRAM] int 
  2023 ;; Return value:  Size  Location     Type
  2024 ;;                  2   20[COMRAM] int 
  2025 ;; Registers used:
  2026 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2027 ;; Tracked objects:
  2028 ;;		On entry : 0/0
  2029 ;;		On exit  : 0/0
  2030 ;;		Unchanged: 0/0
  2031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2032 ;;      Params:         6       0       0       0       0       0       0       0       0
  2033 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2034 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2035 ;;      Totals:        11       0       0       0       0       0       0       0       0
  2036 ;;Total ram usage:       11 bytes
  2037 ;; Hardware stack levels used:    1
  2038 ;; Hardware stack levels required when called:    5
  2039 ;; This function calls:
  2040 ;;		_fputc
  2041 ;;		_fputs
  2042 ;;		_strlen
  2043 ;; This function is called by:
  2044 ;;		_dtoa
  2045 ;; This function uses a non-reentrant model
  2046 ;;
  2047                           
  2048                           	psect	text5
  2049  0015B4                     __ptext5:
  2050                           	callstack 0
  2051  0015B4                     _pad:
  2052                           	callstack 21
  2053  0015B4                     
  2054                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
  2055  0015B4  A058               	btfss	_flags^0,0,c
  2056  0015B6  EFDF  F00A         	goto	u1621
  2057  0015BA  EFE1  F00A         	goto	u1620
  2058  0015BE                     u1621:
  2059  0015BE  EFEB  F00A         	goto	l2273
  2060  0015C2                     u1620:
  2061  0015C2                     
  2062                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
  2063  0015C2  C017  F00E         	movff	pad@buf,fputs@s
  2064  0015C6  C018  F00F         	movff	pad@buf+1,fputs@s+1
  2065  0015CA  C015  F010         	movff	pad@fp,fputs@fp
  2066  0015CE  C016  F011         	movff	pad@fp+1,fputs@fp+1
  2067  0015D2  EC94  F00C         	call	_fputs	;wreg free
  2068  0015D6                     l2273:
  2069                           
  2070                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
  2071  0015D6  BE1A               	btfsc	(pad@p+1)^0,7,c
  2072  0015D8  EFF0  F00A         	goto	u1631
  2073  0015DC  EFF2  F00A         	goto	u1630
  2074  0015E0                     u1631:
  2075  0015E0  EFF8  F00A         	goto	l2277
  2076  0015E4                     u1630:
  2077  0015E4  C019  F01E         	movff	pad@p,pad@w
  2078  0015E8  C01A  F01F         	movff	pad@p+1,pad@w+1
  2079  0015EC  EFFC  F00A         	goto	l858
  2080  0015F0                     l2277:
  2081  0015F0  0E00               	movlw	0
  2082  0015F2  6E1F               	movwf	(pad@w+1)^0,c
  2083  0015F4  0E00               	movlw	0
  2084  0015F6  6E1E               	movwf	pad@w^0,c
  2085  0015F8                     l858:
  2086                           
  2087                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 83:     i = 0;
  2088  0015F8  0E00               	movlw	0
  2089  0015FA  6E1D               	movwf	(pad@i+1)^0,c
  2090  0015FC  0E00               	movlw	0
  2091  0015FE  6E1C               	movwf	pad@i^0,c
  2092                           
  2093                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  2094  001600  EF0E  F00B         	goto	l2283
  2095  001604                     l2279:
  2096                           
  2097                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
  2098  001604  0E00               	movlw	0
  2099  001606  6E06               	movwf	(fputc@c+1)^0,c
  2100  001608  0E20               	movlw	32
  2101  00160A  6E05               	movwf	fputc@c^0,c
  2102  00160C  C015  F007         	movff	pad@fp,fputc@fp
  2103  001610  C016  F008         	movff	pad@fp+1,fputc@fp+1
  2104  001614  EC75  F00A         	call	_fputc	;wreg free
  2105  001618                     
  2106                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 86:         ++i;
  2107  001618  4A1C               	infsnz	pad@i^0,f,c
  2108  00161A  2A1D               	incf	(pad@i+1)^0,f,c
  2109  00161C                     l2283:
  2110                           
  2111                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
  2112  00161C  501E               	movf	pad@w^0,w,c
  2113  00161E  5C1C               	subwf	pad@i^0,w,c
  2114  001620  501D               	movf	(pad@i+1)^0,w,c
  2115  001622  0A80               	xorlw	128
  2116  001624  6E1B               	movwf	??_pad^0,c
  2117  001626  501F               	movf	(pad@w+1)^0,w,c
  2118  001628  0A80               	xorlw	128
  2119  00162A  581B               	subwfb	??_pad^0,w,c
  2120  00162C  A0D8               	btfss	status,0,c
  2121  00162E  EF1B  F00B         	goto	u1641
  2122  001632  EF1D  F00B         	goto	u1640
  2123  001636                     u1641:
  2124  001636  EF02  F00B         	goto	l2279
  2125  00163A                     u1640:
  2126  00163A                     
  2127                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
  2128  00163A  B058               	btfsc	_flags^0,0,c
  2129  00163C  EF22  F00B         	goto	u1651
  2130  001640  EF24  F00B         	goto	u1650
  2131  001644                     u1651:
  2132  001644  EF2E  F00B         	goto	l2287
  2133  001648                     u1650:
  2134  001648                     
  2135                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
  2136  001648  C017  F00E         	movff	pad@buf,fputs@s
  2137  00164C  C018  F00F         	movff	pad@buf+1,fputs@s+1
  2138  001650  C015  F010         	movff	pad@fp,fputs@fp
  2139  001654  C016  F011         	movff	pad@fp+1,fputs@fp+1
  2140  001658  EC94  F00C         	call	_fputs	;wreg free
  2141  00165C                     l2287:
  2142                           
  2143                           ;C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\doprnt.c: 94:     return st
      +                          rlen(buf) + w;
  2144  00165C  C017  F005         	movff	pad@buf,strlen@s
  2145  001660  C018  F006         	movff	pad@buf+1,strlen@s+1
  2146  001664  EC13  F00D         	call	_strlen	;wreg free
  2147  001668  501E               	movf	pad@w^0,w,c
  2148  00166A  2405               	addwf	?_strlen^0,w,c
  2149  00166C  6E15               	movwf	?_pad^0,c
  2150  00166E  501F               	movf	(pad@w+1)^0,w,c
  2151  001670  2006               	addwfc	(?_strlen+1)^0,w,c
  2152  001672  6E16               	movwf	(?_pad+1)^0,c
  2153  001674  0012               	return		;funcret
  2154  001676                     __end_of_pad:
  2155                           	callstack 0
  2156                           
  2157 ;; *************** function _strlen *****************
  2158 ;; Defined at:
  2159 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\strlen.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  s               2    4[COMRAM] PTR const unsigned char 
  2162 ;;		 -> dbuf(32), 
  2163 ;; Auto vars:     Size  Location     Type
  2164 ;;  a               2    6[COMRAM] PTR const unsigned char 
  2165 ;;		 -> dbuf(32), 
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  2    4[COMRAM] unsigned int 
  2168 ;; Registers used:
  2169 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2175 ;;      Params:         2       0       0       0       0       0       0       0       0
  2176 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2177 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2178 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2179 ;;Total ram usage:        4 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    2
  2182 ;; This function calls:
  2183 ;;		Nothing
  2184 ;; This function is called by:
  2185 ;;		_pad
  2186 ;; This function uses a non-reentrant model
  2187 ;;
  2188                           
  2189                           	psect	text6
  2190  001A26                     __ptext6:
  2191                           	callstack 0
  2192  001A26                     _strlen:
  2193                           	callstack 23
  2194  001A26  C005  F007         	movff	strlen@s,strlen@a
  2195  001A2A  C006  F008         	movff	strlen@s+1,strlen@a+1
  2196  001A2E  EF1B  F00D         	goto	l2183
  2197  001A32                     l2181:
  2198  001A32  4A05               	infsnz	strlen@s^0,f,c
  2199  001A34  2A06               	incf	(strlen@s+1)^0,f,c
  2200  001A36                     l2183:
  2201  001A36  C005  FFD9         	movff	strlen@s,fsr2l
  2202  001A3A  C006  FFDA         	movff	strlen@s+1,fsr2h
  2203  001A3E  50DF               	movf	indf2,w,c
  2204  001A40  A4D8               	btfss	status,2,c
  2205  001A42  EF25  F00D         	goto	u1481
  2206  001A46  EF27  F00D         	goto	u1480
  2207  001A4A                     u1481:
  2208  001A4A  EF19  F00D         	goto	l2181
  2209  001A4E                     u1480:
  2210  001A4E  5007               	movf	strlen@a^0,w,c
  2211  001A50  5C05               	subwf	strlen@s^0,w,c
  2212  001A52  6E05               	movwf	?_strlen^0,c
  2213  001A54  5008               	movf	(strlen@a+1)^0,w,c
  2214  001A56  5806               	subwfb	(strlen@s+1)^0,w,c
  2215  001A58  6E06               	movwf	(?_strlen+1)^0,c
  2216  001A5A  0012               	return		;funcret
  2217  001A5C                     __end_of_strlen:
  2218                           	callstack 0
  2219                           
  2220 ;; *************** function _fputs *****************
  2221 ;; Defined at:
  2222 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\nf_fputs.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;  s               2   13[COMRAM] PTR const unsigned char 
  2225 ;;		 -> dbuf(32), 
  2226 ;;  fp              2   15[COMRAM] PTR struct _IO_FILE
  2227 ;;		 -> sprintf@f(6), 
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;  i               2   18[COMRAM] int 
  2230 ;;  c               1   17[COMRAM] unsigned char 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  2   13[COMRAM] int 
  2233 ;; Registers used:
  2234 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2240 ;;      Params:         4       0       0       0       0       0       0       0       0
  2241 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2242 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2243 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2244 ;;Total ram usage:        7 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    4
  2247 ;; This function calls:
  2248 ;;		_fputc
  2249 ;; This function is called by:
  2250 ;;		_pad
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           	psect	text7
  2255  001928                     __ptext7:
  2256                           	callstack 0
  2257  001928                     _fputs:
  2258                           	callstack 21
  2259  001928  0E00               	movlw	0
  2260  00192A  6E14               	movwf	(fputs@i+1)^0,c
  2261  00192C  0E00               	movlw	0
  2262  00192E  6E13               	movwf	fputs@i^0,c
  2263  001930  EFA5  F00C         	goto	l2177
  2264  001934                     l2173:
  2265  001934  C012  F005         	movff	fputs@c,fputc@c
  2266  001938  6A06               	clrf	(fputc@c+1)^0,c
  2267  00193A  C010  F007         	movff	fputs@fp,fputc@fp
  2268  00193E  C011  F008         	movff	fputs@fp+1,fputc@fp+1
  2269  001942  EC75  F00A         	call	_fputc	;wreg free
  2270  001946  4A13               	infsnz	fputs@i^0,f,c
  2271  001948  2A14               	incf	(fputs@i+1)^0,f,c
  2272  00194A                     l2177:
  2273  00194A  5013               	movf	fputs@i^0,w,c
  2274  00194C  240E               	addwf	fputs@s^0,w,c
  2275  00194E  6ED9               	movwf	fsr2l,c
  2276  001950  5014               	movf	(fputs@i+1)^0,w,c
  2277  001952  200F               	addwfc	(fputs@s+1)^0,w,c
  2278  001954  6EDA               	movwf	fsr2h,c
  2279  001956  50DF               	movf	indf2,w,c
  2280  001958  6E12               	movwf	fputs@c^0,c
  2281  00195A  5012               	movf	fputs@c^0,w,c
  2282  00195C  A4D8               	btfss	status,2,c
  2283  00195E  EFB3  F00C         	goto	u1471
  2284  001962  EFB5  F00C         	goto	u1470
  2285  001966                     u1471:
  2286  001966  EF9A  F00C         	goto	l2173
  2287  00196A                     u1470:
  2288  00196A  0012               	return		;funcret
  2289  00196C                     __end_of_fputs:
  2290                           	callstack 0
  2291                           
  2292 ;; *************** function _fputc *****************
  2293 ;; Defined at:
  2294 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\nf_fputc.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;  c               2    4[COMRAM] int 
  2297 ;;  fp              2    6[COMRAM] PTR struct _IO_FILE
  2298 ;;		 -> sprintf@f(6), 
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;		None
  2301 ;; Return value:  Size  Location     Type
  2302 ;;                  2    4[COMRAM] int 
  2303 ;; Registers used:
  2304 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2305 ;; Tracked objects:
  2306 ;;		On entry : 0/0
  2307 ;;		On exit  : 0/0
  2308 ;;		Unchanged: 0/0
  2309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2310 ;;      Params:         4       0       0       0       0       0       0       0       0
  2311 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2312 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2313 ;;      Totals:         9       0       0       0       0       0       0       0       0
  2314 ;;Total ram usage:        9 bytes
  2315 ;; Hardware stack levels used:    1
  2316 ;; Hardware stack levels required when called:    3
  2317 ;; This function calls:
  2318 ;;		_putch
  2319 ;; This function is called by:
  2320 ;;		_pad
  2321 ;;		_vfpfcnvrt
  2322 ;;		_fputs
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           	psect	text8
  2327  0014EA                     __ptext8:
  2328                           	callstack 0
  2329  0014EA                     _fputc:
  2330                           	callstack 24
  2331  0014EA  5007               	movf	fputc@fp^0,w,c
  2332  0014EC  1008               	iorwf	(fputc@fp+1)^0,w,c
  2333  0014EE  B4D8               	btfsc	status,2,c
  2334  0014F0  EF7C  F00A         	goto	u1431
  2335  0014F4  EF7E  F00A         	goto	u1430
  2336  0014F8                     u1431:
  2337  0014F8  EF87  F00A         	goto	l2161
  2338  0014FC                     u1430:
  2339  0014FC  5007               	movf	fputc@fp^0,w,c
  2340  0014FE  1008               	iorwf	(fputc@fp+1)^0,w,c
  2341  001500  A4D8               	btfss	status,2,c
  2342  001502  EF85  F00A         	goto	u1441
  2343  001506  EF87  F00A         	goto	u1440
  2344  00150A                     u1441:
  2345  00150A  EF8C  F00A         	goto	l2163
  2346  00150E                     u1440:
  2347  00150E                     l2161:
  2348  00150E  5005               	movf	fputc@c^0,w,c
  2349  001510  EC59  F00D         	call	_putch
  2350  001514  EFD9  F00A         	goto	l922
  2351  001518                     l2163:
  2352  001518  EE20 F004          	lfsr	2,4
  2353  00151C  5007               	movf	fputc@fp^0,w,c
  2354  00151E  26D9               	addwf	fsr2l,f,c
  2355  001520  5008               	movf	(fputc@fp+1)^0,w,c
  2356  001522  22DA               	addwfc	fsr2h,f,c
  2357  001524  50DE               	movf	postinc2,w,c
  2358  001526  10DE               	iorwf	postinc2,w,c
  2359  001528  B4D8               	btfsc	status,2,c
  2360  00152A  EF99  F00A         	goto	u1451
  2361  00152E  EF9B  F00A         	goto	u1450
  2362  001532                     u1451:
  2363  001532  EFB6  F00A         	goto	l2167
  2364  001536                     u1450:
  2365  001536  EE20 F004          	lfsr	2,4
  2366  00153A  5007               	movf	fputc@fp^0,w,c
  2367  00153C  26D9               	addwf	fsr2l,f,c
  2368  00153E  5008               	movf	(fputc@fp+1)^0,w,c
  2369  001540  22DA               	addwfc	fsr2h,f,c
  2370  001542  EE10 F002          	lfsr	1,2
  2371  001546  5007               	movf	fputc@fp^0,w,c
  2372  001548  26E1               	addwf	fsr1l,f,c
  2373  00154A  5008               	movf	(fputc@fp+1)^0,w,c
  2374  00154C  22E2               	addwfc	fsr1h,f,c
  2375  00154E  50DE               	movf	postinc2,w,c
  2376  001550  5CE6               	subwf	postinc1,w,c
  2377  001552  50E6               	movf	postinc1,w,c
  2378  001554  0A80               	xorlw	128
  2379  001556  6E0D               	movwf	(??_fputc+4)^0,c
  2380  001558  50DE               	movf	postinc2,w,c
  2381  00155A  0A80               	xorlw	128
  2382  00155C  580D               	subwfb	(??_fputc+4)^0,w,c
  2383  00155E  B0D8               	btfsc	status,0,c
  2384  001560  EFB4  F00A         	goto	u1461
  2385  001564  EFB6  F00A         	goto	u1460
  2386  001568                     u1461:
  2387  001568  EFD9  F00A         	goto	l922
  2388  00156C                     u1460:
  2389  00156C                     l2167:
  2390  00156C  EE20 F002          	lfsr	2,2
  2391  001570  5007               	movf	fputc@fp^0,w,c
  2392  001572  26D9               	addwf	fsr2l,f,c
  2393  001574  5008               	movf	(fputc@fp+1)^0,w,c
  2394  001576  22DA               	addwfc	fsr2h,f,c
  2395  001578  CFDE F009          	movff	postinc2,??_fputc
  2396  00157C  CFDD F00A          	movff	postdec2,??_fputc+1
  2397  001580  C007  FFD9         	movff	fputc@fp,fsr2l
  2398  001584  C008  FFDA         	movff	fputc@fp+1,fsr2h
  2399  001588  CFDE F00B          	movff	postinc2,??_fputc+2
  2400  00158C  CFDD F00C          	movff	postdec2,??_fputc+3
  2401  001590  5009               	movf	??_fputc^0,w,c
  2402  001592  240B               	addwf	(??_fputc+2)^0,w,c
  2403  001594  6ED9               	movwf	fsr2l,c
  2404  001596  500A               	movf	(??_fputc+1)^0,w,c
  2405  001598  200C               	addwfc	(??_fputc+3)^0,w,c
  2406  00159A  6EDA               	movwf	fsr2h,c
  2407  00159C  C005  FFDF         	movff	fputc@c,indf2
  2408  0015A0  EE20 F002          	lfsr	2,2
  2409  0015A4  5007               	movf	fputc@fp^0,w,c
  2410  0015A6  26D9               	addwf	fsr2l,f,c
  2411  0015A8  5008               	movf	(fputc@fp+1)^0,w,c
  2412  0015AA  22DA               	addwfc	fsr2h,f,c
  2413  0015AC  2ADE               	incf	postinc2,f,c
  2414  0015AE  0E00               	movlw	0
  2415  0015B0  22DD               	addwfc	postdec2,f,c
  2416  0015B2                     l922:
  2417  0015B2  0012               	return		;funcret
  2418  0015B4                     __end_of_fputc:
  2419                           	callstack 0
  2420                           
  2421 ;; *************** function _putch *****************
  2422 ;; Defined at:
  2423 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\putch.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;  c               1    wreg     unsigned char 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  c               1    0[COMRAM] unsigned char 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2437 ;;      Params:         0       0       0       0       0       0       0       0       0
  2438 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2440 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2441 ;;Total ram usage:        0 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    2
  2444 ;; This function calls:
  2445 ;;		Nothing
  2446 ;; This function is called by:
  2447 ;;		_fputc
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text9
  2452  001AB2                     __ptext9:
  2453                           	callstack 0
  2454  001AB2                     _putch:
  2455                           	callstack 24
  2456  001AB2  0012               	return		;funcret
  2457  001AB4                     __end_of_putch:
  2458                           	callstack 0
  2459                           
  2460 ;; *************** function _abs *****************
  2461 ;; Defined at:
  2462 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\abs.c"
  2463 ;; Parameters:    Size  Location     Type
  2464 ;;  a               2   22[COMRAM] int 
  2465 ;; Auto vars:     Size  Location     Type
  2466 ;;		None
  2467 ;; Return value:  Size  Location     Type
  2468 ;;                  2   22[COMRAM] int 
  2469 ;; Registers used:
  2470 ;;		wreg, status,2, status,0
  2471 ;; Tracked objects:
  2472 ;;		On entry : 0/0
  2473 ;;		On exit  : 0/0
  2474 ;;		Unchanged: 0/0
  2475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2476 ;;      Params:         2       0       0       0       0       0       0       0       0
  2477 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2478 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2479 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2480 ;;Total ram usage:        4 bytes
  2481 ;; Hardware stack levels used:    1
  2482 ;; Hardware stack levels required when called:    2
  2483 ;; This function calls:
  2484 ;;		Nothing
  2485 ;; This function is called by:
  2486 ;;		_dtoa
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489                           
  2490                           	psect	text10
  2491  00196C                     __ptext10:
  2492                           	callstack 0
  2493  00196C                     _abs:
  2494                           	callstack 24
  2495  00196C  BE18               	btfsc	(abs@a+1)^0,7,c
  2496  00196E  EFC3  F00C         	goto	u1660
  2497  001972  5018               	movf	(abs@a+1)^0,w,c
  2498  001974  E106               	bnz	u1661
  2499  001976  0417               	decf	abs@a^0,w,c
  2500  001978  B0D8               	btfsc	status,0,c
  2501  00197A  EFC1  F00C         	goto	u1661
  2502  00197E  EFC3  F00C         	goto	u1660
  2503  001982                     u1661:
  2504  001982  EFD1  F00C         	goto	l907
  2505  001986                     u1660:
  2506  001986  C017  F019         	movff	abs@a,??_abs
  2507  00198A  C018  F01A         	movff	abs@a+1,??_abs+1
  2508  00198E  1E19               	comf	??_abs^0,f,c
  2509  001990  1E1A               	comf	(??_abs+1)^0,f,c
  2510  001992  4A19               	infsnz	??_abs^0,f,c
  2511  001994  2A1A               	incf	(??_abs+1)^0,f,c
  2512  001996  C019  F017         	movff	??_abs,?_abs
  2513  00199A  C01A  F018         	movff	??_abs+1,?_abs+1
  2514  00199E  EFD5  F00C         	goto	l910
  2515  0019A2                     l907:
  2516  0019A2  C017  F017         	movff	abs@a,?_abs
  2517  0019A6  C018  F018         	movff	abs@a+1,?_abs+1
  2518  0019AA                     l910:
  2519  0019AA  0012               	return		;funcret
  2520  0019AC                     __end_of_abs:
  2521                           	callstack 0
  2522                           
  2523 ;; *************** function ___aomod *****************
  2524 ;; Defined at:
  2525 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aomod.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;  dividend        8    4[COMRAM] long long 
  2528 ;;  divisor         8   12[COMRAM] long long 
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;  sign            1   21[COMRAM] unsigned char 
  2531 ;;  counter         1   20[COMRAM] unsigned char 
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  8    4[COMRAM] long long 
  2534 ;; Registers used:
  2535 ;;		wreg, status,2, status,0
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2541 ;;      Params:        16       0       0       0       0       0       0       0       0
  2542 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2543 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2544 ;;      Totals:        18       0       0       0       0       0       0       0       0
  2545 ;;Total ram usage:       18 bytes
  2546 ;; Hardware stack levels used:    1
  2547 ;; Hardware stack levels required when called:    2
  2548 ;; This function calls:
  2549 ;;		Nothing
  2550 ;; This function is called by:
  2551 ;;		_dtoa
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555                           	psect	text11
  2556  00119C                     __ptext11:
  2557                           	callstack 0
  2558  00119C                     ___aomod:
  2559                           	callstack 24
  2560  00119C  0E00               	movlw	0
  2561  00119E  6E16               	movwf	___aomod@sign^0,c
  2562  0011A0  BE0C               	btfsc	(___aomod@dividend+7)^0,7,c
  2563  0011A2  EFD7  F008         	goto	u1560
  2564  0011A6  EFD5  F008         	goto	u1561
  2565  0011AA                     u1561:
  2566  0011AA  EFE9  F008         	goto	l2241
  2567  0011AE                     u1560:
  2568  0011AE  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  2569  0011B0  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  2570  0011B2  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  2571  0011B4  1E09               	comf	(___aomod@dividend+4)^0,f,c
  2572  0011B6  1E08               	comf	(___aomod@dividend+3)^0,f,c
  2573  0011B8  1E07               	comf	(___aomod@dividend+2)^0,f,c
  2574  0011BA  1E06               	comf	(___aomod@dividend+1)^0,f,c
  2575  0011BC  6C05               	negf	___aomod@dividend^0,c
  2576  0011BE  0E00               	movlw	0
  2577  0011C0  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  2578  0011C2  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  2579  0011C4  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  2580  0011C6  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  2581  0011C8  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  2582  0011CA  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  2583  0011CC  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  2584  0011CE  0E01               	movlw	1
  2585  0011D0  6E16               	movwf	___aomod@sign^0,c
  2586  0011D2                     l2241:
  2587  0011D2  BE14               	btfsc	(___aomod@divisor+7)^0,7,c
  2588  0011D4  EFF0  F008         	goto	u1570
  2589  0011D8  EFEE  F008         	goto	u1571
  2590  0011DC                     u1571:
  2591  0011DC  EF00  F009         	goto	l2245
  2592  0011E0                     u1570:
  2593  0011E0  1E14               	comf	(___aomod@divisor+7)^0,f,c
  2594  0011E2  1E13               	comf	(___aomod@divisor+6)^0,f,c
  2595  0011E4  1E12               	comf	(___aomod@divisor+5)^0,f,c
  2596  0011E6  1E11               	comf	(___aomod@divisor+4)^0,f,c
  2597  0011E8  1E10               	comf	(___aomod@divisor+3)^0,f,c
  2598  0011EA  1E0F               	comf	(___aomod@divisor+2)^0,f,c
  2599  0011EC  1E0E               	comf	(___aomod@divisor+1)^0,f,c
  2600  0011EE  6C0D               	negf	___aomod@divisor^0,c
  2601  0011F0  0E00               	movlw	0
  2602  0011F2  220E               	addwfc	(___aomod@divisor+1)^0,f,c
  2603  0011F4  220F               	addwfc	(___aomod@divisor+2)^0,f,c
  2604  0011F6  2210               	addwfc	(___aomod@divisor+3)^0,f,c
  2605  0011F8  2211               	addwfc	(___aomod@divisor+4)^0,f,c
  2606  0011FA  2212               	addwfc	(___aomod@divisor+5)^0,f,c
  2607  0011FC  2213               	addwfc	(___aomod@divisor+6)^0,f,c
  2608  0011FE  2214               	addwfc	(___aomod@divisor+7)^0,f,c
  2609  001200                     l2245:
  2610  001200  500D               	movf	___aomod@divisor^0,w,c
  2611  001202  100E               	iorwf	(___aomod@divisor+1)^0,w,c
  2612  001204  100F               	iorwf	(___aomod@divisor+2)^0,w,c
  2613  001206  1010               	iorwf	(___aomod@divisor+3)^0,w,c
  2614  001208  1011               	iorwf	(___aomod@divisor+4)^0,w,c
  2615  00120A  1012               	iorwf	(___aomod@divisor+5)^0,w,c
  2616  00120C  1013               	iorwf	(___aomod@divisor+6)^0,w,c
  2617  00120E  1014               	iorwf	(___aomod@divisor+7)^0,w,c
  2618  001210  B4D8               	btfsc	status,2,c
  2619  001212  EF0D  F009         	goto	u1581
  2620  001216  EF0F  F009         	goto	u1580
  2621  00121A                     u1581:
  2622  00121A  EF57  F009         	goto	l2261
  2623  00121E                     u1580:
  2624  00121E  0E01               	movlw	1
  2625  001220  6E15               	movwf	___aomod@counter^0,c
  2626  001222  EF1D  F009         	goto	l2251
  2627  001226                     l2249:
  2628  001226  90D8               	bcf	status,0,c
  2629  001228  360D               	rlcf	___aomod@divisor^0,f,c
  2630  00122A  360E               	rlcf	(___aomod@divisor+1)^0,f,c
  2631  00122C  360F               	rlcf	(___aomod@divisor+2)^0,f,c
  2632  00122E  3610               	rlcf	(___aomod@divisor+3)^0,f,c
  2633  001230  3611               	rlcf	(___aomod@divisor+4)^0,f,c
  2634  001232  3612               	rlcf	(___aomod@divisor+5)^0,f,c
  2635  001234  3613               	rlcf	(___aomod@divisor+6)^0,f,c
  2636  001236  3614               	rlcf	(___aomod@divisor+7)^0,f,c
  2637  001238  2A15               	incf	___aomod@counter^0,f,c
  2638  00123A                     l2251:
  2639  00123A  AE14               	btfss	(___aomod@divisor+7)^0,7,c
  2640  00123C  EF22  F009         	goto	u1591
  2641  001240  EF24  F009         	goto	u1590
  2642  001244                     u1591:
  2643  001244  EF13  F009         	goto	l2249
  2644  001248                     u1590:
  2645  001248                     l2253:
  2646  001248  500D               	movf	___aomod@divisor^0,w,c
  2647  00124A  5C05               	subwf	___aomod@dividend^0,w,c
  2648  00124C  500E               	movf	(___aomod@divisor+1)^0,w,c
  2649  00124E  5806               	subwfb	(___aomod@dividend+1)^0,w,c
  2650  001250  500F               	movf	(___aomod@divisor+2)^0,w,c
  2651  001252  5807               	subwfb	(___aomod@dividend+2)^0,w,c
  2652  001254  5010               	movf	(___aomod@divisor+3)^0,w,c
  2653  001256  5808               	subwfb	(___aomod@dividend+3)^0,w,c
  2654  001258  5011               	movf	(___aomod@divisor+4)^0,w,c
  2655  00125A  5809               	subwfb	(___aomod@dividend+4)^0,w,c
  2656  00125C  5012               	movf	(___aomod@divisor+5)^0,w,c
  2657  00125E  580A               	subwfb	(___aomod@dividend+5)^0,w,c
  2658  001260  5013               	movf	(___aomod@divisor+6)^0,w,c
  2659  001262  580B               	subwfb	(___aomod@dividend+6)^0,w,c
  2660  001264  5014               	movf	(___aomod@divisor+7)^0,w,c
  2661  001266  580C               	subwfb	(___aomod@dividend+7)^0,w,c
  2662  001268  A0D8               	btfss	status,0,c
  2663  00126A  EF39  F009         	goto	u1601
  2664  00126E  EF3B  F009         	goto	u1600
  2665  001272                     u1601:
  2666  001272  EF4B  F009         	goto	l2257
  2667  001276                     u1600:
  2668  001276  500D               	movf	___aomod@divisor^0,w,c
  2669  001278  5E05               	subwf	___aomod@dividend^0,f,c
  2670  00127A  500E               	movf	(___aomod@divisor+1)^0,w,c
  2671  00127C  5A06               	subwfb	(___aomod@dividend+1)^0,f,c
  2672  00127E  500F               	movf	(___aomod@divisor+2)^0,w,c
  2673  001280  5A07               	subwfb	(___aomod@dividend+2)^0,f,c
  2674  001282  5010               	movf	(___aomod@divisor+3)^0,w,c
  2675  001284  5A08               	subwfb	(___aomod@dividend+3)^0,f,c
  2676  001286  5011               	movf	(___aomod@divisor+4)^0,w,c
  2677  001288  5A09               	subwfb	(___aomod@dividend+4)^0,f,c
  2678  00128A  5012               	movf	(___aomod@divisor+5)^0,w,c
  2679  00128C  5A0A               	subwfb	(___aomod@dividend+5)^0,f,c
  2680  00128E  5013               	movf	(___aomod@divisor+6)^0,w,c
  2681  001290  5A0B               	subwfb	(___aomod@dividend+6)^0,f,c
  2682  001292  5014               	movf	(___aomod@divisor+7)^0,w,c
  2683  001294  5A0C               	subwfb	(___aomod@dividend+7)^0,f,c
  2684  001296                     l2257:
  2685  001296  90D8               	bcf	status,0,c
  2686  001298  3214               	rrcf	(___aomod@divisor+7)^0,f,c
  2687  00129A  3213               	rrcf	(___aomod@divisor+6)^0,f,c
  2688  00129C  3212               	rrcf	(___aomod@divisor+5)^0,f,c
  2689  00129E  3211               	rrcf	(___aomod@divisor+4)^0,f,c
  2690  0012A0  3210               	rrcf	(___aomod@divisor+3)^0,f,c
  2691  0012A2  320F               	rrcf	(___aomod@divisor+2)^0,f,c
  2692  0012A4  320E               	rrcf	(___aomod@divisor+1)^0,f,c
  2693  0012A6  320D               	rrcf	___aomod@divisor^0,f,c
  2694  0012A8  2E15               	decfsz	___aomod@counter^0,f,c
  2695  0012AA  EF24  F009         	goto	l2253
  2696  0012AE                     l2261:
  2697  0012AE  5016               	movf	___aomod@sign^0,w,c
  2698  0012B0  B4D8               	btfsc	status,2,c
  2699  0012B2  EF5D  F009         	goto	u1611
  2700  0012B6  EF5F  F009         	goto	u1610
  2701  0012BA                     u1611:
  2702  0012BA  EF6F  F009         	goto	l2265
  2703  0012BE                     u1610:
  2704  0012BE  1E0C               	comf	(___aomod@dividend+7)^0,f,c
  2705  0012C0  1E0B               	comf	(___aomod@dividend+6)^0,f,c
  2706  0012C2  1E0A               	comf	(___aomod@dividend+5)^0,f,c
  2707  0012C4  1E09               	comf	(___aomod@dividend+4)^0,f,c
  2708  0012C6  1E08               	comf	(___aomod@dividend+3)^0,f,c
  2709  0012C8  1E07               	comf	(___aomod@dividend+2)^0,f,c
  2710  0012CA  1E06               	comf	(___aomod@dividend+1)^0,f,c
  2711  0012CC  6C05               	negf	___aomod@dividend^0,c
  2712  0012CE  0E00               	movlw	0
  2713  0012D0  2206               	addwfc	(___aomod@dividend+1)^0,f,c
  2714  0012D2  2207               	addwfc	(___aomod@dividend+2)^0,f,c
  2715  0012D4  2208               	addwfc	(___aomod@dividend+3)^0,f,c
  2716  0012D6  2209               	addwfc	(___aomod@dividend+4)^0,f,c
  2717  0012D8  220A               	addwfc	(___aomod@dividend+5)^0,f,c
  2718  0012DA  220B               	addwfc	(___aomod@dividend+6)^0,f,c
  2719  0012DC  220C               	addwfc	(___aomod@dividend+7)^0,f,c
  2720  0012DE                     l2265:
  2721  0012DE  C005  F005         	movff	___aomod@dividend,?___aomod
  2722  0012E2  C006  F006         	movff	___aomod@dividend+1,?___aomod+1
  2723  0012E6  C007  F007         	movff	___aomod@dividend+2,?___aomod+2
  2724  0012EA  C008  F008         	movff	___aomod@dividend+3,?___aomod+3
  2725  0012EE  C009  F009         	movff	___aomod@dividend+4,?___aomod+4
  2726  0012F2  C00A  F00A         	movff	___aomod@dividend+5,?___aomod+5
  2727  0012F6  C00B  F00B         	movff	___aomod@dividend+6,?___aomod+6
  2728  0012FA  C00C  F00C         	movff	___aomod@dividend+7,?___aomod+7
  2729  0012FE  0012               	return		;funcret
  2730  001300                     __end_of___aomod:
  2731                           	callstack 0
  2732                           
  2733 ;; *************** function ___aodiv *****************
  2734 ;; Defined at:
  2735 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aodiv.c"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;  dividend        8    4[COMRAM] long long 
  2738 ;;  divisor         8   12[COMRAM] long long 
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;  quotient        8   22[COMRAM] long long 
  2741 ;;  sign            1   21[COMRAM] unsigned char 
  2742 ;;  counter         1   20[COMRAM] unsigned char 
  2743 ;; Return value:  Size  Location     Type
  2744 ;;                  8    4[COMRAM] long long 
  2745 ;; Registers used:
  2746 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2747 ;; Tracked objects:
  2748 ;;		On entry : 0/0
  2749 ;;		On exit  : 0/0
  2750 ;;		Unchanged: 0/0
  2751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2752 ;;      Params:        16       0       0       0       0       0       0       0       0
  2753 ;;      Locals:        10       0       0       0       0       0       0       0       0
  2754 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2755 ;;      Totals:        26       0       0       0       0       0       0       0       0
  2756 ;;Total ram usage:       26 bytes
  2757 ;; Hardware stack levels used:    1
  2758 ;; Hardware stack levels required when called:    2
  2759 ;; This function calls:
  2760 ;;		Nothing
  2761 ;; This function is called by:
  2762 ;;		_dtoa
  2763 ;; This function uses a non-reentrant model
  2764 ;;
  2765                           
  2766                           	psect	text12
  2767  001014                     __ptext12:
  2768                           	callstack 0
  2769  001014                     ___aodiv:
  2770                           	callstack 24
  2771  001014  0E00               	movlw	0
  2772  001016  6E16               	movwf	___aodiv@sign^0,c
  2773  001018  BE14               	btfsc	(___aodiv@divisor+7)^0,7,c
  2774  00101A  EF13  F008         	goto	u1490
  2775  00101E  EF11  F008         	goto	u1491
  2776  001022                     u1491:
  2777  001022  EF25  F008         	goto	l2197
  2778  001026                     u1490:
  2779  001026  1E14               	comf	(___aodiv@divisor+7)^0,f,c
  2780  001028  1E13               	comf	(___aodiv@divisor+6)^0,f,c
  2781  00102A  1E12               	comf	(___aodiv@divisor+5)^0,f,c
  2782  00102C  1E11               	comf	(___aodiv@divisor+4)^0,f,c
  2783  00102E  1E10               	comf	(___aodiv@divisor+3)^0,f,c
  2784  001030  1E0F               	comf	(___aodiv@divisor+2)^0,f,c
  2785  001032  1E0E               	comf	(___aodiv@divisor+1)^0,f,c
  2786  001034  6C0D               	negf	___aodiv@divisor^0,c
  2787  001036  0E00               	movlw	0
  2788  001038  220E               	addwfc	(___aodiv@divisor+1)^0,f,c
  2789  00103A  220F               	addwfc	(___aodiv@divisor+2)^0,f,c
  2790  00103C  2210               	addwfc	(___aodiv@divisor+3)^0,f,c
  2791  00103E  2211               	addwfc	(___aodiv@divisor+4)^0,f,c
  2792  001040  2212               	addwfc	(___aodiv@divisor+5)^0,f,c
  2793  001042  2213               	addwfc	(___aodiv@divisor+6)^0,f,c
  2794  001044  2214               	addwfc	(___aodiv@divisor+7)^0,f,c
  2795  001046  0E01               	movlw	1
  2796  001048  6E16               	movwf	___aodiv@sign^0,c
  2797  00104A                     l2197:
  2798  00104A  BE0C               	btfsc	(___aodiv@dividend+7)^0,7,c
  2799  00104C  EF2C  F008         	goto	u1500
  2800  001050  EF2A  F008         	goto	u1501
  2801  001054                     u1501:
  2802  001054  EF3E  F008         	goto	l2203
  2803  001058                     u1500:
  2804  001058  1E0C               	comf	(___aodiv@dividend+7)^0,f,c
  2805  00105A  1E0B               	comf	(___aodiv@dividend+6)^0,f,c
  2806  00105C  1E0A               	comf	(___aodiv@dividend+5)^0,f,c
  2807  00105E  1E09               	comf	(___aodiv@dividend+4)^0,f,c
  2808  001060  1E08               	comf	(___aodiv@dividend+3)^0,f,c
  2809  001062  1E07               	comf	(___aodiv@dividend+2)^0,f,c
  2810  001064  1E06               	comf	(___aodiv@dividend+1)^0,f,c
  2811  001066  6C05               	negf	___aodiv@dividend^0,c
  2812  001068  0E00               	movlw	0
  2813  00106A  2206               	addwfc	(___aodiv@dividend+1)^0,f,c
  2814  00106C  2207               	addwfc	(___aodiv@dividend+2)^0,f,c
  2815  00106E  2208               	addwfc	(___aodiv@dividend+3)^0,f,c
  2816  001070  2209               	addwfc	(___aodiv@dividend+4)^0,f,c
  2817  001072  220A               	addwfc	(___aodiv@dividend+5)^0,f,c
  2818  001074  220B               	addwfc	(___aodiv@dividend+6)^0,f,c
  2819  001076  220C               	addwfc	(___aodiv@dividend+7)^0,f,c
  2820  001078  0E01               	movlw	1
  2821  00107A  1A16               	xorwf	___aodiv@sign^0,f,c
  2822  00107C                     l2203:
  2823  00107C  EE20  F017         	lfsr	2,___aodiv@quotient
  2824  001080  0E07               	movlw	7
  2825  001082                     u1511:
  2826  001082  6ADE               	clrf	postinc2,c
  2827  001084  06E8               	decf	wreg,f,c
  2828  001086  E2FD               	bc	u1511
  2829  001088  500D               	movf	___aodiv@divisor^0,w,c
  2830  00108A  100E               	iorwf	(___aodiv@divisor+1)^0,w,c
  2831  00108C  100F               	iorwf	(___aodiv@divisor+2)^0,w,c
  2832  00108E  1010               	iorwf	(___aodiv@divisor+3)^0,w,c
  2833  001090  1011               	iorwf	(___aodiv@divisor+4)^0,w,c
  2834  001092  1012               	iorwf	(___aodiv@divisor+5)^0,w,c
  2835  001094  1013               	iorwf	(___aodiv@divisor+6)^0,w,c
  2836  001096  1014               	iorwf	(___aodiv@divisor+7)^0,w,c
  2837  001098  B4D8               	btfsc	status,2,c
  2838  00109A  EF51  F008         	goto	u1521
  2839  00109E  EF53  F008         	goto	u1520
  2840  0010A2                     u1521:
  2841  0010A2  EFA5  F008         	goto	l2225
  2842  0010A6                     u1520:
  2843  0010A6  0E01               	movlw	1
  2844  0010A8  6E15               	movwf	___aodiv@counter^0,c
  2845  0010AA  EF61  F008         	goto	l2211
  2846  0010AE                     l2209:
  2847  0010AE  90D8               	bcf	status,0,c
  2848  0010B0  360D               	rlcf	___aodiv@divisor^0,f,c
  2849  0010B2  360E               	rlcf	(___aodiv@divisor+1)^0,f,c
  2850  0010B4  360F               	rlcf	(___aodiv@divisor+2)^0,f,c
  2851  0010B6  3610               	rlcf	(___aodiv@divisor+3)^0,f,c
  2852  0010B8  3611               	rlcf	(___aodiv@divisor+4)^0,f,c
  2853  0010BA  3612               	rlcf	(___aodiv@divisor+5)^0,f,c
  2854  0010BC  3613               	rlcf	(___aodiv@divisor+6)^0,f,c
  2855  0010BE  3614               	rlcf	(___aodiv@divisor+7)^0,f,c
  2856  0010C0  2A15               	incf	___aodiv@counter^0,f,c
  2857  0010C2                     l2211:
  2858  0010C2  AE14               	btfss	(___aodiv@divisor+7)^0,7,c
  2859  0010C4  EF66  F008         	goto	u1531
  2860  0010C8  EF68  F008         	goto	u1530
  2861  0010CC                     u1531:
  2862  0010CC  EF57  F008         	goto	l2209
  2863  0010D0                     u1530:
  2864  0010D0                     l2213:
  2865  0010D0  90D8               	bcf	status,0,c
  2866  0010D2  3617               	rlcf	___aodiv@quotient^0,f,c
  2867  0010D4  3618               	rlcf	(___aodiv@quotient+1)^0,f,c
  2868  0010D6  3619               	rlcf	(___aodiv@quotient+2)^0,f,c
  2869  0010D8  361A               	rlcf	(___aodiv@quotient+3)^0,f,c
  2870  0010DA  361B               	rlcf	(___aodiv@quotient+4)^0,f,c
  2871  0010DC  361C               	rlcf	(___aodiv@quotient+5)^0,f,c
  2872  0010DE  361D               	rlcf	(___aodiv@quotient+6)^0,f,c
  2873  0010E0  361E               	rlcf	(___aodiv@quotient+7)^0,f,c
  2874  0010E2  500D               	movf	___aodiv@divisor^0,w,c
  2875  0010E4  5C05               	subwf	___aodiv@dividend^0,w,c
  2876  0010E6  500E               	movf	(___aodiv@divisor+1)^0,w,c
  2877  0010E8  5806               	subwfb	(___aodiv@dividend+1)^0,w,c
  2878  0010EA  500F               	movf	(___aodiv@divisor+2)^0,w,c
  2879  0010EC  5807               	subwfb	(___aodiv@dividend+2)^0,w,c
  2880  0010EE  5010               	movf	(___aodiv@divisor+3)^0,w,c
  2881  0010F0  5808               	subwfb	(___aodiv@dividend+3)^0,w,c
  2882  0010F2  5011               	movf	(___aodiv@divisor+4)^0,w,c
  2883  0010F4  5809               	subwfb	(___aodiv@dividend+4)^0,w,c
  2884  0010F6  5012               	movf	(___aodiv@divisor+5)^0,w,c
  2885  0010F8  580A               	subwfb	(___aodiv@dividend+5)^0,w,c
  2886  0010FA  5013               	movf	(___aodiv@divisor+6)^0,w,c
  2887  0010FC  580B               	subwfb	(___aodiv@dividend+6)^0,w,c
  2888  0010FE  5014               	movf	(___aodiv@divisor+7)^0,w,c
  2889  001100  580C               	subwfb	(___aodiv@dividend+7)^0,w,c
  2890  001102  A0D8               	btfss	status,0,c
  2891  001104  EF86  F008         	goto	u1541
  2892  001108  EF88  F008         	goto	u1540
  2893  00110C                     u1541:
  2894  00110C  EF99  F008         	goto	l2221
  2895  001110                     u1540:
  2896  001110  500D               	movf	___aodiv@divisor^0,w,c
  2897  001112  5E05               	subwf	___aodiv@dividend^0,f,c
  2898  001114  500E               	movf	(___aodiv@divisor+1)^0,w,c
  2899  001116  5A06               	subwfb	(___aodiv@dividend+1)^0,f,c
  2900  001118  500F               	movf	(___aodiv@divisor+2)^0,w,c
  2901  00111A  5A07               	subwfb	(___aodiv@dividend+2)^0,f,c
  2902  00111C  5010               	movf	(___aodiv@divisor+3)^0,w,c
  2903  00111E  5A08               	subwfb	(___aodiv@dividend+3)^0,f,c
  2904  001120  5011               	movf	(___aodiv@divisor+4)^0,w,c
  2905  001122  5A09               	subwfb	(___aodiv@dividend+4)^0,f,c
  2906  001124  5012               	movf	(___aodiv@divisor+5)^0,w,c
  2907  001126  5A0A               	subwfb	(___aodiv@dividend+5)^0,f,c
  2908  001128  5013               	movf	(___aodiv@divisor+6)^0,w,c
  2909  00112A  5A0B               	subwfb	(___aodiv@dividend+6)^0,f,c
  2910  00112C  5014               	movf	(___aodiv@divisor+7)^0,w,c
  2911  00112E  5A0C               	subwfb	(___aodiv@dividend+7)^0,f,c
  2912  001130  8017               	bsf	___aodiv@quotient^0,0,c
  2913  001132                     l2221:
  2914  001132  90D8               	bcf	status,0,c
  2915  001134  3214               	rrcf	(___aodiv@divisor+7)^0,f,c
  2916  001136  3213               	rrcf	(___aodiv@divisor+6)^0,f,c
  2917  001138  3212               	rrcf	(___aodiv@divisor+5)^0,f,c
  2918  00113A  3211               	rrcf	(___aodiv@divisor+4)^0,f,c
  2919  00113C  3210               	rrcf	(___aodiv@divisor+3)^0,f,c
  2920  00113E  320F               	rrcf	(___aodiv@divisor+2)^0,f,c
  2921  001140  320E               	rrcf	(___aodiv@divisor+1)^0,f,c
  2922  001142  320D               	rrcf	___aodiv@divisor^0,f,c
  2923  001144  2E15               	decfsz	___aodiv@counter^0,f,c
  2924  001146  EF68  F008         	goto	l2213
  2925  00114A                     l2225:
  2926  00114A  5016               	movf	___aodiv@sign^0,w,c
  2927  00114C  B4D8               	btfsc	status,2,c
  2928  00114E  EFAB  F008         	goto	u1551
  2929  001152  EFAD  F008         	goto	u1550
  2930  001156                     u1551:
  2931  001156  EFBD  F008         	goto	l2229
  2932  00115A                     u1550:
  2933  00115A  1E1E               	comf	(___aodiv@quotient+7)^0,f,c
  2934  00115C  1E1D               	comf	(___aodiv@quotient+6)^0,f,c
  2935  00115E  1E1C               	comf	(___aodiv@quotient+5)^0,f,c
  2936  001160  1E1B               	comf	(___aodiv@quotient+4)^0,f,c
  2937  001162  1E1A               	comf	(___aodiv@quotient+3)^0,f,c
  2938  001164  1E19               	comf	(___aodiv@quotient+2)^0,f,c
  2939  001166  1E18               	comf	(___aodiv@quotient+1)^0,f,c
  2940  001168  6C17               	negf	___aodiv@quotient^0,c
  2941  00116A  0E00               	movlw	0
  2942  00116C  2218               	addwfc	(___aodiv@quotient+1)^0,f,c
  2943  00116E  2219               	addwfc	(___aodiv@quotient+2)^0,f,c
  2944  001170  221A               	addwfc	(___aodiv@quotient+3)^0,f,c
  2945  001172  221B               	addwfc	(___aodiv@quotient+4)^0,f,c
  2946  001174  221C               	addwfc	(___aodiv@quotient+5)^0,f,c
  2947  001176  221D               	addwfc	(___aodiv@quotient+6)^0,f,c
  2948  001178  221E               	addwfc	(___aodiv@quotient+7)^0,f,c
  2949  00117A                     l2229:
  2950  00117A  C017  F005         	movff	___aodiv@quotient,?___aodiv
  2951  00117E  C018  F006         	movff	___aodiv@quotient+1,?___aodiv+1
  2952  001182  C019  F007         	movff	___aodiv@quotient+2,?___aodiv+2
  2953  001186  C01A  F008         	movff	___aodiv@quotient+3,?___aodiv+3
  2954  00118A  C01B  F009         	movff	___aodiv@quotient+4,?___aodiv+4
  2955  00118E  C01C  F00A         	movff	___aodiv@quotient+5,?___aodiv+5
  2956  001192  C01D  F00B         	movff	___aodiv@quotient+6,?___aodiv+6
  2957  001196  C01E  F00C         	movff	___aodiv@quotient+7,?___aodiv+7
  2958  00119A  0012               	return		;funcret
  2959  00119C                     __end_of___aodiv:
  2960                           	callstack 0
  2961                           
  2962 ;; *************** function _USART_TX *****************
  2963 ;; Defined at:
  2964 ;;		line 30 in file "lib_USART.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;  data            1    wreg     unsigned char 
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  data            1    4[COMRAM] unsigned char 
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1    wreg      void 
  2971 ;; Registers used:
  2972 ;;		wreg
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2978 ;;      Params:         0       0       0       0       0       0       0       0       0
  2979 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2980 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2981 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2982 ;;Total ram usage:        1 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    2
  2985 ;; This function calls:
  2986 ;;		Nothing
  2987 ;; This function is called by:
  2988 ;;		_main
  2989 ;; This function uses a non-reentrant model
  2990 ;;
  2991                           
  2992                           	psect	text13
  2993  001A7E                     __ptext13:
  2994                           	callstack 0
  2995  001A7E                     _USART_TX:
  2996                           	callstack 28
  2997                           
  2998                           ;incstack = 0
  2999                           ;USART_TX@data stored from wreg
  3000  001A7E  6E05               	movwf	USART_TX@data^0,c
  3001  001A80                     l59:
  3002  001A80  A2AC               	btfss	172,1,c	;volatile
  3003  001A82  EF45  F00D         	goto	u1261
  3004  001A86  EF47  F00D         	goto	u1260
  3005  001A8A                     u1261:
  3006  001A8A  EF40  F00D         	goto	l59
  3007  001A8E                     u1260:
  3008  001A8E                     
  3009                           ;lib_USART.c: 32:     TXREG = data;
  3010  001A8E  C005  FFAD         	movff	USART_TX@data,4013	;volatile
  3011  001A92  0012               	return		;funcret
  3012  001A94                     __end_of_USART_TX:
  3013                           	callstack 0
  3014                           
  3015 ;; *************** function _USART_RX *****************
  3016 ;; Defined at:
  3017 ;;		line 35 in file "lib_USART.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;		None
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      unsigned char 
  3024 ;; Registers used:
  3025 ;;		wreg, status,2, status,0
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3031 ;;      Params:         0       0       0       0       0       0       0       0       0
  3032 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3033 ;;      Temps:          8       0       0       0       0       0       0       0       0
  3034 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3035 ;;Total ram usage:        8 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    2
  3038 ;; This function calls:
  3039 ;;		Nothing
  3040 ;; This function is called by:
  3041 ;;		_main
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text14
  3046  0016E6                     __ptext14:
  3047                           	callstack 0
  3048  0016E6                     _USART_RX:
  3049                           	callstack 28
  3050  0016E6                     
  3051                           ;lib_USART.c: 36:        if(((~RCSTAbits.FERR) & (~RCSTAbits.OERR))== 0)
  3052  0016E6  B2AB               	btfsc	171,1,c	;volatile
  3053  0016E8  EF78  F00B         	goto	u1271
  3054  0016EC  EF7B  F00B         	goto	u1270
  3055  0016F0                     u1271:
  3056  0016F0  0E01               	movlw	1
  3057  0016F2  EF7C  F00B         	goto	u1280
  3058  0016F6                     u1270:
  3059  0016F6  0E00               	movlw	0
  3060  0016F8                     u1280:
  3061  0016F8  6E05               	movwf	??_USART_RX^0,c
  3062  0016FA  6A06               	clrf	(??_USART_RX+1)^0,c
  3063  0016FC  1C05               	comf	??_USART_RX^0,w,c
  3064  0016FE  6E07               	movwf	(??_USART_RX+2)^0,c
  3065  001700  1C06               	comf	(??_USART_RX+1)^0,w,c
  3066  001702  6E08               	movwf	(??_USART_RX+3)^0,c
  3067  001704  B4AB               	btfsc	171,2,c	;volatile
  3068  001706  EF87  F00B         	goto	u1291
  3069  00170A  EF8A  F00B         	goto	u1290
  3070  00170E                     u1291:
  3071  00170E  0E01               	movlw	1
  3072  001710  EF8B  F00B         	goto	u1300
  3073  001714                     u1290:
  3074  001714  0E00               	movlw	0
  3075  001716                     u1300:
  3076  001716  6E09               	movwf	(??_USART_RX+4)^0,c
  3077  001718  6A0A               	clrf	(??_USART_RX+5)^0,c
  3078  00171A  1C09               	comf	(??_USART_RX+4)^0,w,c
  3079  00171C  6E0B               	movwf	(??_USART_RX+6)^0,c
  3080  00171E  1C0A               	comf	(??_USART_RX+5)^0,w,c
  3081  001720  6E0C               	movwf	(??_USART_RX+7)^0,c
  3082  001722  5007               	movf	(??_USART_RX+2)^0,w,c
  3083  001724  160B               	andwf	(??_USART_RX+6)^0,f,c
  3084  001726  5008               	movf	(??_USART_RX+3)^0,w,c
  3085  001728  160C               	andwf	(??_USART_RX+7)^0,f,c
  3086  00172A  500B               	movf	(??_USART_RX+6)^0,w,c
  3087  00172C  100C               	iorwf	(??_USART_RX+7)^0,w,c
  3088  00172E  A4D8               	btfss	status,2,c
  3089  001730  EF9C  F00B         	goto	u1311
  3090  001734  EF9E  F00B         	goto	u1310
  3091  001738                     u1311:
  3092  001738  EFA8  F00B         	goto	l2013
  3093  00173C                     u1310:
  3094  00173C                     
  3095                           ;lib_USART.c: 37:     {;lib_USART.c: 39:      RCSTAbits.SPEN = 0;
  3096  00173C  9EAB               	bcf	171,7,c	;volatile
  3097  00173E                     
  3098                           ;lib_USART.c: 40:      _delay((unsigned long)((1)*(48000000/4000.0)));
  3099  00173E  0E10               	movlw	16
  3100  001740  6E05               	movwf	??_USART_RX^0,c
  3101  001742  0E94               	movlw	148
  3102  001744                     u2037:
  3103  001744  2EE8               	decfsz	wreg,f,c
  3104  001746  D7FE               	bra	u2037
  3105  001748  2E05               	decfsz	??_USART_RX^0,f,c
  3106  00174A  D7FC               	bra	u2037
  3107  00174C  D000               	nop2	
  3108  00174E                     
  3109                           ;lib_USART.c: 41:       RCSTAbits.SPEN = 1;
  3110  00174E  8EAB               	bsf	171,7,c	;volatile
  3111  001750                     l2013:
  3112                           
  3113                           ;lib_USART.c: 43:     return RCREG;
  3114  001750  50AE               	movf	174,w,c	;volatile
  3115  001752  0012               	return		;funcret
  3116  001754                     __end_of_USART_RX:
  3117                           	callstack 0
  3118                           
  3119 ;; *************** function _USART_Init *****************
  3120 ;; Defined at:
  3121 ;;		line 7 in file "lib_USART.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  BAUD            4   18[COMRAM] long 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;		None
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		wreg, status,2, status,0, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3135 ;;      Params:         4       0       0       0       0       0       0       0       0
  3136 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3137 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3138 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3139 ;;Total ram usage:        8 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    3
  3142 ;; This function calls:
  3143 ;;		___aldiv
  3144 ;; This function is called by:
  3145 ;;		_main
  3146 ;; This function uses a non-reentrant model
  3147 ;;
  3148                           
  3149                           	psect	text15
  3150  001676                     __ptext15:
  3151                           	callstack 0
  3152  001676                     _USART_Init:
  3153                           	callstack 27
  3154  001676                     
  3155                           ;lib_USART.c: 9:     TRISCbits.RC6 = 0;
  3156  001676  9C94               	bcf	148,6,c	;volatile
  3157                           
  3158                           ;lib_USART.c: 10:     TRISCbits.RC7 = 1;
  3159  001678  8E94               	bsf	148,7,c	;volatile
  3160  00167A                     
  3161                           ;lib_USART.c: 13:     SPBRG = (unsigned char)(((48000000)/BAUD)/64-1);
  3162  00167A  C013  F009         	movff	USART_Init@BAUD,___aldiv@divisor
  3163  00167E  C014  F00A         	movff	USART_Init@BAUD+1,___aldiv@divisor+1
  3164  001682  C015  F00B         	movff	USART_Init@BAUD+2,___aldiv@divisor+2
  3165  001686  C016  F00C         	movff	USART_Init@BAUD+3,___aldiv@divisor+3
  3166  00168A  0E00               	movlw	0
  3167  00168C  6E05               	movwf	___aldiv@dividend^0,c
  3168  00168E  0E6C               	movlw	108
  3169  001690  6E06               	movwf	(___aldiv@dividend+1)^0,c
  3170  001692  0EDC               	movlw	220
  3171  001694  6E07               	movwf	(___aldiv@dividend+2)^0,c
  3172  001696  0E02               	movlw	2
  3173  001698  6E08               	movwf	(___aldiv@dividend+3)^0,c
  3174  00169A  EC80  F009         	call	___aldiv	;wreg free
  3175  00169E  C005  F017         	movff	?___aldiv,_USART_Init$1530
  3176  0016A2  C006  F018         	movff	?___aldiv+1,_USART_Init$1530+1
  3177  0016A6  C007  F019         	movff	?___aldiv+2,_USART_Init$1530+2
  3178  0016AA  C008  F01A         	movff	?___aldiv+3,_USART_Init$1530+3
  3179                           
  3180                           ;lib_USART.c: 13:     SPBRG = (unsigned char)(((48000000)/BAUD)/64-1);
  3181  0016AE  C017  F005         	movff	_USART_Init$1530,___aldiv@dividend
  3182  0016B2  C018  F006         	movff	_USART_Init$1530+1,___aldiv@dividend+1
  3183  0016B6  C019  F007         	movff	_USART_Init$1530+2,___aldiv@dividend+2
  3184  0016BA  C01A  F008         	movff	_USART_Init$1530+3,___aldiv@dividend+3
  3185  0016BE  0E40               	movlw	64
  3186  0016C0  6E09               	movwf	___aldiv@divisor^0,c
  3187  0016C2  0E00               	movlw	0
  3188  0016C4  6E0A               	movwf	(___aldiv@divisor+1)^0,c
  3189  0016C6  0E00               	movlw	0
  3190  0016C8  6E0B               	movwf	(___aldiv@divisor+2)^0,c
  3191  0016CA  0E00               	movlw	0
  3192  0016CC  6E0C               	movwf	(___aldiv@divisor+3)^0,c
  3193  0016CE  EC80  F009         	call	___aldiv	;wreg free
  3194  0016D2  0405               	decf	?___aldiv^0,w,c
  3195  0016D4  6EAF               	movwf	175,c	;volatile
  3196  0016D6                     
  3197                           ;lib_USART.c: 16:     TXSTAbits.BRGH = 0;
  3198  0016D6  94AC               	bcf	172,2,c	;volatile
  3199  0016D8                     
  3200                           ;lib_USART.c: 17:     TXSTAbits.SYNC = 0;
  3201  0016D8  98AC               	bcf	172,4,c	;volatile
  3202  0016DA                     
  3203                           ;lib_USART.c: 18:     RCSTAbits.SPEN = 1;
  3204  0016DA  8EAB               	bsf	171,7,c	;volatile
  3205  0016DC                     
  3206                           ;lib_USART.c: 21:     TXSTAbits.TX9 = 0;
  3207  0016DC  9CAC               	bcf	172,6,c	;volatile
  3208  0016DE                     
  3209                           ;lib_USART.c: 22:     TXSTAbits.TXEN = 1;
  3210  0016DE  8AAC               	bsf	172,5,c	;volatile
  3211  0016E0                     
  3212                           ;lib_USART.c: 25:     RCSTAbits.RC9 = 0;
  3213  0016E0  9CAB               	bcf	171,6,c	;volatile
  3214  0016E2                     
  3215                           ;lib_USART.c: 26:     RCSTAbits.CREN = 1;
  3216  0016E2  88AB               	bsf	171,4,c	;volatile
  3217  0016E4  0012               	return		;funcret
  3218  0016E6                     __end_of_USART_Init:
  3219                           	callstack 0
  3220                           
  3221 ;; *************** function ___aldiv *****************
  3222 ;; Defined at:
  3223 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aldiv.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;  dividend        4    4[COMRAM] long 
  3226 ;;  divisor         4    8[COMRAM] long 
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  quotient        4   14[COMRAM] long 
  3229 ;;  sign            1   13[COMRAM] unsigned char 
  3230 ;;  counter         1   12[COMRAM] unsigned char 
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  4    4[COMRAM] long 
  3233 ;; Registers used:
  3234 ;;		wreg, status,2, status,0
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3240 ;;      Params:         8       0       0       0       0       0       0       0       0
  3241 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3242 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3243 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3244 ;;Total ram usage:       14 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; Hardware stack levels required when called:    2
  3247 ;; This function calls:
  3248 ;;		Nothing
  3249 ;; This function is called by:
  3250 ;;		_USART_Init
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text16
  3255  001300                     __ptext16:
  3256                           	callstack 0
  3257  001300                     ___aldiv:
  3258                           	callstack 27
  3259  001300  0E00               	movlw	0
  3260  001302  6E0E               	movwf	___aldiv@sign^0,c
  3261  001304  BE0C               	btfsc	(___aldiv@divisor+3)^0,7,c
  3262  001306  EF89  F009         	goto	u1150
  3263  00130A  EF87  F009         	goto	u1151
  3264  00130E                     u1151:
  3265  00130E  EF93  F009         	goto	l1871
  3266  001312                     u1150:
  3267  001312  1E0C               	comf	(___aldiv@divisor+3)^0,f,c
  3268  001314  1E0B               	comf	(___aldiv@divisor+2)^0,f,c
  3269  001316  1E0A               	comf	(___aldiv@divisor+1)^0,f,c
  3270  001318  6C09               	negf	___aldiv@divisor^0,c
  3271  00131A  0E00               	movlw	0
  3272  00131C  220A               	addwfc	(___aldiv@divisor+1)^0,f,c
  3273  00131E  220B               	addwfc	(___aldiv@divisor+2)^0,f,c
  3274  001320  220C               	addwfc	(___aldiv@divisor+3)^0,f,c
  3275  001322  0E01               	movlw	1
  3276  001324  6E0E               	movwf	___aldiv@sign^0,c
  3277  001326                     l1871:
  3278  001326  BE08               	btfsc	(___aldiv@dividend+3)^0,7,c
  3279  001328  EF9A  F009         	goto	u1160
  3280  00132C  EF98  F009         	goto	u1161
  3281  001330                     u1161:
  3282  001330  EFA4  F009         	goto	l1877
  3283  001334                     u1160:
  3284  001334  1E08               	comf	(___aldiv@dividend+3)^0,f,c
  3285  001336  1E07               	comf	(___aldiv@dividend+2)^0,f,c
  3286  001338  1E06               	comf	(___aldiv@dividend+1)^0,f,c
  3287  00133A  6C05               	negf	___aldiv@dividend^0,c
  3288  00133C  0E00               	movlw	0
  3289  00133E  2206               	addwfc	(___aldiv@dividend+1)^0,f,c
  3290  001340  2207               	addwfc	(___aldiv@dividend+2)^0,f,c
  3291  001342  2208               	addwfc	(___aldiv@dividend+3)^0,f,c
  3292  001344  0E01               	movlw	1
  3293  001346  1A0E               	xorwf	___aldiv@sign^0,f,c
  3294  001348                     l1877:
  3295  001348  0E00               	movlw	0
  3296  00134A  6E0F               	movwf	___aldiv@quotient^0,c
  3297  00134C  0E00               	movlw	0
  3298  00134E  6E10               	movwf	(___aldiv@quotient+1)^0,c
  3299  001350  0E00               	movlw	0
  3300  001352  6E11               	movwf	(___aldiv@quotient+2)^0,c
  3301  001354  0E00               	movlw	0
  3302  001356  6E12               	movwf	(___aldiv@quotient+3)^0,c
  3303  001358  5009               	movf	___aldiv@divisor^0,w,c
  3304  00135A  100A               	iorwf	(___aldiv@divisor+1)^0,w,c
  3305  00135C  100B               	iorwf	(___aldiv@divisor+2)^0,w,c
  3306  00135E  100C               	iorwf	(___aldiv@divisor+3)^0,w,c
  3307  001360  B4D8               	btfsc	status,2,c
  3308  001362  EFB5  F009         	goto	u1171
  3309  001366  EFB7  F009         	goto	u1170
  3310  00136A                     u1171:
  3311  00136A  EFED  F009         	goto	l1899
  3312  00136E                     u1170:
  3313  00136E  0E01               	movlw	1
  3314  001370  6E0D               	movwf	___aldiv@counter^0,c
  3315  001372  EFC1  F009         	goto	l1885
  3316  001376                     l1883:
  3317  001376  90D8               	bcf	status,0,c
  3318  001378  3609               	rlcf	___aldiv@divisor^0,f,c
  3319  00137A  360A               	rlcf	(___aldiv@divisor+1)^0,f,c
  3320  00137C  360B               	rlcf	(___aldiv@divisor+2)^0,f,c
  3321  00137E  360C               	rlcf	(___aldiv@divisor+3)^0,f,c
  3322  001380  2A0D               	incf	___aldiv@counter^0,f,c
  3323  001382                     l1885:
  3324  001382  AE0C               	btfss	(___aldiv@divisor+3)^0,7,c
  3325  001384  EFC6  F009         	goto	u1181
  3326  001388  EFC8  F009         	goto	u1180
  3327  00138C                     u1181:
  3328  00138C  EFBB  F009         	goto	l1883
  3329  001390                     u1180:
  3330  001390                     l1887:
  3331  001390  90D8               	bcf	status,0,c
  3332  001392  360F               	rlcf	___aldiv@quotient^0,f,c
  3333  001394  3610               	rlcf	(___aldiv@quotient+1)^0,f,c
  3334  001396  3611               	rlcf	(___aldiv@quotient+2)^0,f,c
  3335  001398  3612               	rlcf	(___aldiv@quotient+3)^0,f,c
  3336  00139A  5009               	movf	___aldiv@divisor^0,w,c
  3337  00139C  5C05               	subwf	___aldiv@dividend^0,w,c
  3338  00139E  500A               	movf	(___aldiv@divisor+1)^0,w,c
  3339  0013A0  5806               	subwfb	(___aldiv@dividend+1)^0,w,c
  3340  0013A2  500B               	movf	(___aldiv@divisor+2)^0,w,c
  3341  0013A4  5807               	subwfb	(___aldiv@dividend+2)^0,w,c
  3342  0013A6  500C               	movf	(___aldiv@divisor+3)^0,w,c
  3343  0013A8  5808               	subwfb	(___aldiv@dividend+3)^0,w,c
  3344  0013AA  A0D8               	btfss	status,0,c
  3345  0013AC  EFDA  F009         	goto	u1191
  3346  0013B0  EFDC  F009         	goto	u1190
  3347  0013B4                     u1191:
  3348  0013B4  EFE5  F009         	goto	l1895
  3349  0013B8                     u1190:
  3350  0013B8  5009               	movf	___aldiv@divisor^0,w,c
  3351  0013BA  5E05               	subwf	___aldiv@dividend^0,f,c
  3352  0013BC  500A               	movf	(___aldiv@divisor+1)^0,w,c
  3353  0013BE  5A06               	subwfb	(___aldiv@dividend+1)^0,f,c
  3354  0013C0  500B               	movf	(___aldiv@divisor+2)^0,w,c
  3355  0013C2  5A07               	subwfb	(___aldiv@dividend+2)^0,f,c
  3356  0013C4  500C               	movf	(___aldiv@divisor+3)^0,w,c
  3357  0013C6  5A08               	subwfb	(___aldiv@dividend+3)^0,f,c
  3358  0013C8  800F               	bsf	___aldiv@quotient^0,0,c
  3359  0013CA                     l1895:
  3360  0013CA  90D8               	bcf	status,0,c
  3361  0013CC  320C               	rrcf	(___aldiv@divisor+3)^0,f,c
  3362  0013CE  320B               	rrcf	(___aldiv@divisor+2)^0,f,c
  3363  0013D0  320A               	rrcf	(___aldiv@divisor+1)^0,f,c
  3364  0013D2  3209               	rrcf	___aldiv@divisor^0,f,c
  3365  0013D4  2E0D               	decfsz	___aldiv@counter^0,f,c
  3366  0013D6  EFC8  F009         	goto	l1887
  3367  0013DA                     l1899:
  3368  0013DA  500E               	movf	___aldiv@sign^0,w,c
  3369  0013DC  B4D8               	btfsc	status,2,c
  3370  0013DE  EFF3  F009         	goto	u1201
  3371  0013E2  EFF5  F009         	goto	u1200
  3372  0013E6                     u1201:
  3373  0013E6  EFFD  F009         	goto	l1903
  3374  0013EA                     u1200:
  3375  0013EA  1E12               	comf	(___aldiv@quotient+3)^0,f,c
  3376  0013EC  1E11               	comf	(___aldiv@quotient+2)^0,f,c
  3377  0013EE  1E10               	comf	(___aldiv@quotient+1)^0,f,c
  3378  0013F0  6C0F               	negf	___aldiv@quotient^0,c
  3379  0013F2  0E00               	movlw	0
  3380  0013F4  2210               	addwfc	(___aldiv@quotient+1)^0,f,c
  3381  0013F6  2211               	addwfc	(___aldiv@quotient+2)^0,f,c
  3382  0013F8  2212               	addwfc	(___aldiv@quotient+3)^0,f,c
  3383  0013FA                     l1903:
  3384  0013FA  C00F  F005         	movff	___aldiv@quotient,?___aldiv
  3385  0013FE  C010  F006         	movff	___aldiv@quotient+1,?___aldiv+1
  3386  001402  C011  F007         	movff	___aldiv@quotient+2,?___aldiv+2
  3387  001406  C012  F008         	movff	___aldiv@quotient+3,?___aldiv+3
  3388  00140A  0012               	return		;funcret
  3389  00140C                     __end_of___aldiv:
  3390                           	callstack 0
  3391                           
  3392 ;; *************** function _LCD_gotoXY *****************
  3393 ;; Defined at:
  3394 ;;		line 87 in file "MiLCD.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;  x               2    6[COMRAM] int 
  3397 ;;  y               2    8[COMRAM] int 
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;		None
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  1    wreg      void 
  3402 ;; Registers used:
  3403 ;;		wreg, status,2, status,0, cstack
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3409 ;;      Params:         4       0       0       0       0       0       0       0       0
  3410 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3411 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3412 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3413 ;;Total ram usage:        5 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:    3
  3416 ;; This function calls:
  3417 ;;		_LCD_Comando
  3418 ;; This function is called by:
  3419 ;;		_main
  3420 ;;		_Clear_Linea
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           	psect	text17
  3425  0019AC                     __ptext17:
  3426                           	callstack 0
  3427  0019AC                     _LCD_gotoXY:
  3428                           	callstack 27
  3429  0019AC                     
  3430                           ;MiLCD.c: 87: void LCD_gotoXY (int x,int y);MiLCD.c: 88: { _delay((unsigned long)((150)*
      +                          (48000000/4000000.0)));
  3431  0019AC  0E03               	movlw	3
  3432  0019AE  6E0B               	movwf	??_LCD_gotoXY^0,c
  3433  0019B0  0E55               	movlw	85
  3434  0019B2                     u2047:
  3435  0019B2  2EE8               	decfsz	wreg,f,c
  3436  0019B4  D7FE               	bra	u2047
  3437  0019B6  2E0B               	decfsz	??_LCD_gotoXY^0,f,c
  3438  0019B8  D7FC               	bra	u2047
  3439  0019BA  F000               	nop	
  3440  0019BC                     
  3441                           ;MiLCD.c: 90:     if ( x>0 )
  3442  0019BC  BE08               	btfsc	(LCD_gotoXY@x+1)^0,7,c
  3443  0019BE  EFE9  F00C         	goto	u1221
  3444  0019C2  5008               	movf	(LCD_gotoXY@x+1)^0,w,c
  3445  0019C4  E108               	bnz	u1220
  3446  0019C6  0407               	decf	LCD_gotoXY@x^0,w,c
  3447  0019C8  A0D8               	btfss	status,0,c
  3448  0019CA  EFE9  F00C         	goto	u1221
  3449  0019CE  EFEB  F00C         	goto	u1220
  3450  0019D2                     u1221:
  3451  0019D2  EFF1  F00C         	goto	l1969
  3452  0019D6                     u1220:
  3453  0019D6                     
  3454                           ;MiLCD.c: 91:     {;MiLCD.c: 92:         LCD_Comando((0xC0)+y);
  3455  0019D6  5009               	movf	LCD_gotoXY@y^0,w,c
  3456  0019D8  0FC0               	addlw	192
  3457  0019DA  EC12  F00C         	call	_LCD_Comando
  3458                           
  3459                           ;MiLCD.c: 93:     }
  3460  0019DE  EFF5  F00C         	goto	l25
  3461  0019E2                     l1969:
  3462                           
  3463                           ;MiLCD.c: 95:     {;MiLCD.c: 96:         LCD_Comando((0x80)+y);
  3464  0019E2  5009               	movf	LCD_gotoXY@y^0,w,c
  3465  0019E4  0F80               	addlw	128
  3466  0019E6  EC12  F00C         	call	_LCD_Comando
  3467  0019EA                     l25:
  3468  0019EA  0012               	return		;funcret
  3469  0019EC                     __end_of_LCD_gotoXY:
  3470                           	callstack 0
  3471                           
  3472 ;; *************** function _LCD_Init *****************
  3473 ;; Defined at:
  3474 ;;		line 18 in file "MiLCD.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;		None
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;		None
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3488 ;;      Params:         0       0       0       0       0       0       0       0       0
  3489 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3490 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3491 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3492 ;;Total ram usage:        1 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    3
  3495 ;; This function calls:
  3496 ;;		_LCD_Comando
  3497 ;; This function is called by:
  3498 ;;		_main
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text18
  3503  00140C                     __ptext18:
  3504                           	callstack 0
  3505  00140C                     _LCD_Init:
  3506                           	callstack 27
  3507  00140C                     
  3508                           ;MiLCD.c: 21:    TRISDbits.TRISD6 =0;
  3509  00140C  9C95               	bcf	149,6,c	;volatile
  3510                           
  3511                           ;MiLCD.c: 22:    TRISDbits.TRISD5 =0;
  3512  00140E  9A95               	bcf	149,5,c	;volatile
  3513                           
  3514                           ;MiLCD.c: 23:    TRISDbits.TRISD4 =0;
  3515  001410  9895               	bcf	149,4,c	;volatile
  3516  001412                     
  3517                           ;MiLCD.c: 24:    PORTD &= 0xf0;
  3518  001412  0EF0               	movlw	240
  3519  001414  1683               	andwf	131,f,c	;volatile
  3520                           
  3521                           ;MiLCD.c: 25:    TRISD &= 0xf0;
  3522  001416  0EF0               	movlw	240
  3523  001418  1695               	andwf	149,f,c	;volatile
  3524  00141A                     
  3525                           ;MiLCD.c: 26:    LATDbits.LATD6 = 0;
  3526  00141A  9C8C               	bcf	140,6,c	;volatile
  3527  00141C                     
  3528                           ;MiLCD.c: 27:    LATDbits.LATD5 = 0;
  3529  00141C  9A8C               	bcf	140,5,c	;volatile
  3530  00141E                     
  3531                           ;MiLCD.c: 28:    LATDbits.LATD4 = 0;
  3532  00141E  988C               	bcf	140,4,c	;volatile
  3533  001420                     
  3534                           ;MiLCD.c: 29:    _delay((unsigned long)((15)*(48000000/4000.0)));
  3535  001420  0EEA               	movlw	234
  3536  001422  6E07               	movwf	??_LCD_Init^0,c
  3537  001424  0EC3               	movlw	195
  3538  001426                     u2057:
  3539  001426  2EE8               	decfsz	wreg,f,c
  3540  001428  D7FE               	bra	u2057
  3541  00142A  2E07               	decfsz	??_LCD_Init^0,f,c
  3542  00142C  D7FC               	bra	u2057
  3543  00142E  F000               	nop	
  3544  001430                     
  3545                           ;MiLCD.c: 31:    LCD_Comando (0x30);
  3546  001430  0E30               	movlw	48
  3547  001432  EC12  F00C         	call	_LCD_Comando
  3548  001436                     
  3549                           ;MiLCD.c: 32:    _delay((unsigned long)((5)*(48000000/4000.0)));
  3550  001436  0E4E               	movlw	78
  3551  001438  6E07               	movwf	??_LCD_Init^0,c
  3552  00143A  0EEB               	movlw	235
  3553  00143C                     u2067:
  3554  00143C  2EE8               	decfsz	wreg,f,c
  3555  00143E  D7FE               	bra	u2067
  3556  001440  2E07               	decfsz	??_LCD_Init^0,f,c
  3557  001442  D7FC               	bra	u2067
  3558  001444  F000               	nop	
  3559  001446                     
  3560                           ;MiLCD.c: 33:    LCD_Comando (0x30);
  3561  001446  0E30               	movlw	48
  3562  001448  EC12  F00C         	call	_LCD_Comando
  3563  00144C                     
  3564                           ;MiLCD.c: 34:    _delay((unsigned long)((100)*(48000000/4000000.0)));
  3565  00144C  0EF0               	movlw	240
  3566  00144E                     u2077:
  3567  00144E  D000               	nop2	
  3568  001450  2EE8               	decfsz	wreg,f,c
  3569  001452  D7FD               	bra	u2077
  3570  001454                     
  3571                           ;MiLCD.c: 35:    LCD_Comando (0x32);
  3572  001454  0E32               	movlw	50
  3573  001456  EC12  F00C         	call	_LCD_Comando
  3574  00145A                     
  3575                           ;MiLCD.c: 36:    _delay((unsigned long)((150)*(48000000/4000000.0)));
  3576  00145A  0E03               	movlw	3
  3577  00145C  6E07               	movwf	??_LCD_Init^0,c
  3578  00145E  0E55               	movlw	85
  3579  001460                     u2087:
  3580  001460  2EE8               	decfsz	wreg,f,c
  3581  001462  D7FE               	bra	u2087
  3582  001464  2E07               	decfsz	??_LCD_Init^0,f,c
  3583  001466  D7FC               	bra	u2087
  3584  001468  F000               	nop	
  3585  00146A                     
  3586                           ;MiLCD.c: 37:    _delay((unsigned long)((150)*(48000000/4000000.0)));
  3587  00146A  0E03               	movlw	3
  3588  00146C  6E07               	movwf	??_LCD_Init^0,c
  3589  00146E  0E55               	movlw	85
  3590  001470                     u2097:
  3591  001470  2EE8               	decfsz	wreg,f,c
  3592  001472  D7FE               	bra	u2097
  3593  001474  2E07               	decfsz	??_LCD_Init^0,f,c
  3594  001476  D7FC               	bra	u2097
  3595  001478  F000               	nop	
  3596  00147A                     
  3597                           ;MiLCD.c: 38:    LCD_Comando (0x28);
  3598  00147A  0E28               	movlw	40
  3599  00147C  EC12  F00C         	call	_LCD_Comando
  3600  001480                     
  3601                           ;MiLCD.c: 39:    _delay((unsigned long)((150)*(48000000/4000000.0)));
  3602  001480  0E03               	movlw	3
  3603  001482  6E07               	movwf	??_LCD_Init^0,c
  3604  001484  0E55               	movlw	85
  3605  001486                     u2107:
  3606  001486  2EE8               	decfsz	wreg,f,c
  3607  001488  D7FE               	bra	u2107
  3608  00148A  2E07               	decfsz	??_LCD_Init^0,f,c
  3609  00148C  D7FC               	bra	u2107
  3610  00148E  F000               	nop	
  3611  001490                     
  3612                           ;MiLCD.c: 40:    LCD_Comando (0x08);
  3613  001490  0E08               	movlw	8
  3614  001492  EC12  F00C         	call	_LCD_Comando
  3615  001496                     
  3616                           ;MiLCD.c: 41:    _delay((unsigned long)((150)*(48000000/4000000.0)));
  3617  001496  0E03               	movlw	3
  3618  001498  6E07               	movwf	??_LCD_Init^0,c
  3619  00149A  0E55               	movlw	85
  3620  00149C                     u2117:
  3621  00149C  2EE8               	decfsz	wreg,f,c
  3622  00149E  D7FE               	bra	u2117
  3623  0014A0  2E07               	decfsz	??_LCD_Init^0,f,c
  3624  0014A2  D7FC               	bra	u2117
  3625  0014A4  F000               	nop	
  3626  0014A6                     
  3627                           ;MiLCD.c: 43:    LCD_Comando (0x01);
  3628  0014A6  0E01               	movlw	1
  3629  0014A8  EC12  F00C         	call	_LCD_Comando
  3630  0014AC                     
  3631                           ;MiLCD.c: 44:    _delay((unsigned long)((5)*(48000000/4000.0)));
  3632  0014AC  0E4E               	movlw	78
  3633  0014AE  6E07               	movwf	??_LCD_Init^0,c
  3634  0014B0  0EEB               	movlw	235
  3635  0014B2                     u2127:
  3636  0014B2  2EE8               	decfsz	wreg,f,c
  3637  0014B4  D7FE               	bra	u2127
  3638  0014B6  2E07               	decfsz	??_LCD_Init^0,f,c
  3639  0014B8  D7FC               	bra	u2127
  3640  0014BA  F000               	nop	
  3641  0014BC                     
  3642                           ;MiLCD.c: 46:    LCD_Comando (0x06);
  3643  0014BC  0E06               	movlw	6
  3644  0014BE  EC12  F00C         	call	_LCD_Comando
  3645  0014C2                     
  3646                           ;MiLCD.c: 47:    _delay((unsigned long)((150)*(48000000/4000000.0)));
  3647  0014C2  0E03               	movlw	3
  3648  0014C4  6E07               	movwf	??_LCD_Init^0,c
  3649  0014C6  0E55               	movlw	85
  3650  0014C8                     u2137:
  3651  0014C8  2EE8               	decfsz	wreg,f,c
  3652  0014CA  D7FE               	bra	u2137
  3653  0014CC  2E07               	decfsz	??_LCD_Init^0,f,c
  3654  0014CE  D7FC               	bra	u2137
  3655  0014D0  F000               	nop	
  3656  0014D2                     
  3657                           ;MiLCD.c: 48:    LCD_Comando (0x0C);
  3658  0014D2  0E0C               	movlw	12
  3659  0014D4  EC12  F00C         	call	_LCD_Comando
  3660  0014D8                     
  3661                           ;MiLCD.c: 49:    _delay((unsigned long)((150)*(48000000/4000000.0)));
  3662  0014D8  0E03               	movlw	3
  3663  0014DA  6E07               	movwf	??_LCD_Init^0,c
  3664  0014DC  0E55               	movlw	85
  3665  0014DE                     u2147:
  3666  0014DE  2EE8               	decfsz	wreg,f,c
  3667  0014E0  D7FE               	bra	u2147
  3668  0014E2  2E07               	decfsz	??_LCD_Init^0,f,c
  3669  0014E4  D7FC               	bra	u2147
  3670  0014E6  F000               	nop	
  3671  0014E8  0012               	return		;funcret
  3672  0014EA                     __end_of_LCD_Init:
  3673                           	callstack 0
  3674                           
  3675 ;; *************** function _LCD_Comando *****************
  3676 ;; Defined at:
  3677 ;;		line 54 in file "MiLCD.c"
  3678 ;; Parameters:    Size  Location     Type
  3679 ;;  cmd             1    wreg     unsigned char 
  3680 ;; Auto vars:     Size  Location     Type
  3681 ;;  cmd             1    5[COMRAM] unsigned char 
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      void 
  3684 ;; Registers used:
  3685 ;;		wreg, status,2, status,0
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3691 ;;      Params:         0       0       0       0       0       0       0       0       0
  3692 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3693 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3694 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3695 ;;Total ram usage:        2 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    2
  3698 ;; This function calls:
  3699 ;;		Nothing
  3700 ;; This function is called by:
  3701 ;;		_LCD_Init
  3702 ;;		_LCD_gotoXY
  3703 ;;		_main
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           	psect	text19
  3708  001824                     __ptext19:
  3709                           	callstack 0
  3710  001824                     _LCD_Comando:
  3711                           	callstack 27
  3712                           
  3713                           ;incstack = 0
  3714                           ;LCD_Comando@cmd stored from wreg
  3715  001824  6E06               	movwf	LCD_Comando@cmd^0,c
  3716  001826                     
  3717                           ;MiLCD.c: 54: void LCD_Comando (unsigned char cmd);MiLCD.c: 55: { _delay((unsigned long)
      +                          ((150)*(48000000/4000000.0)));
  3718  001826  0E03               	movlw	3
  3719  001828  6E05               	movwf	??_LCD_Comando^0,c
  3720  00182A  0E55               	movlw	85
  3721  00182C                     u2157:
  3722  00182C  2EE8               	decfsz	wreg,f,c
  3723  00182E  D7FE               	bra	u2157
  3724  001830  2E05               	decfsz	??_LCD_Comando^0,f,c
  3725  001832  D7FC               	bra	u2157
  3726  001834  F000               	nop	
  3727  001836                     
  3728                           ;MiLCD.c: 57:     TRISD &= 0xf0;
  3729  001836  0EF0               	movlw	240
  3730  001838  1695               	andwf	149,f,c	;volatile
  3731  00183A                     
  3732                           ;MiLCD.c: 58:     PORTD &= 0xf0;
  3733  00183A  0EF0               	movlw	240
  3734  00183C  1683               	andwf	131,f,c	;volatile
  3735  00183E                     
  3736                           ;MiLCD.c: 61:     PORTD = PORTD | ((cmd>>4)& 0x0f);
  3737  00183E  3806               	swapf	LCD_Comando@cmd^0,w,c
  3738  001840  0B0F               	andlw	15
  3739  001842  0B0F               	andlw	15
  3740  001844  1083               	iorwf	131,w,c	;volatile
  3741  001846  6E83               	movwf	131,c	;volatile
  3742  001848                     
  3743                           ;MiLCD.c: 64:     LATDbits.LATD6 = 0;
  3744  001848  9C8C               	bcf	140,6,c	;volatile
  3745  00184A                     
  3746                           ;MiLCD.c: 65:     LATDbits.LATD5 = 0;
  3747  00184A  9A8C               	bcf	140,5,c	;volatile
  3748  00184C                     
  3749                           ;MiLCD.c: 67:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3750  00184C  0E3C               	movlw	60
  3751  00184E                     u2167:
  3752  00184E  2EE8               	decfsz	wreg,f,c
  3753  001850  D7FE               	bra	u2167
  3754  001852                     
  3755                           ;MiLCD.c: 68:     LATDbits.LATD4 = 1;
  3756  001852  888C               	bsf	140,4,c	;volatile
  3757  001854                     
  3758                           ;MiLCD.c: 69:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3759  001854  0E3C               	movlw	60
  3760  001856                     u2177:
  3761  001856  2EE8               	decfsz	wreg,f,c
  3762  001858  D7FE               	bra	u2177
  3763  00185A                     
  3764                           ;MiLCD.c: 70:     LATDbits.LATD4 = 0;
  3765  00185A  988C               	bcf	140,4,c	;volatile
  3766  00185C                     
  3767                           ;MiLCD.c: 74:     PORTD &= 0xf0;
  3768  00185C  0EF0               	movlw	240
  3769  00185E  1683               	andwf	131,f,c	;volatile
  3770  001860                     
  3771                           ;MiLCD.c: 75:     PORTD = PORTD | (cmd & 0x0f);
  3772  001860  5006               	movf	LCD_Comando@cmd^0,w,c
  3773  001862  0B0F               	andlw	15
  3774  001864  1083               	iorwf	131,w,c	;volatile
  3775  001866  6E83               	movwf	131,c	;volatile
  3776  001868                     
  3777                           ;MiLCD.c: 76:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3778  001868  0E3C               	movlw	60
  3779  00186A                     u2187:
  3780  00186A  2EE8               	decfsz	wreg,f,c
  3781  00186C  D7FE               	bra	u2187
  3782  00186E                     
  3783                           ;MiLCD.c: 77:     LATDbits.LATD4 = 1;
  3784  00186E  888C               	bsf	140,4,c	;volatile
  3785  001870                     
  3786                           ;MiLCD.c: 78:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3787  001870  0E3C               	movlw	60
  3788  001872                     u2197:
  3789  001872  2EE8               	decfsz	wreg,f,c
  3790  001874  D7FE               	bra	u2197
  3791  001876                     
  3792                           ;MiLCD.c: 79:     LATDbits.LATD4 = 0;
  3793  001876  988C               	bcf	140,4,c	;volatile
  3794  001878                     
  3795                           ;MiLCD.c: 81:     TRISD |= 0x0f;
  3796  001878  0E0F               	movlw	15
  3797  00187A  1295               	iorwf	149,f,c	;volatile
  3798  00187C  0012               	return		;funcret
  3799  00187E                     __end_of_LCD_Comando:
  3800                           	callstack 0
  3801                           
  3802 ;; *************** function _LCD_Cadena *****************
  3803 ;; Defined at:
  3804 ;;		line 101 in file "MiLCD.c"
  3805 ;; Parameters:    Size  Location     Type
  3806 ;;  dato            2    6[COMRAM] PTR const unsigned char 
  3807 ;;		 -> STR_10(17), STR_9(17), STR_8(15), STR_7(15), 
  3808 ;;		 -> main@texto(10), STR_4(17), STR_3(17), STR_2(17), 
  3809 ;;		 -> STR_1(17), 
  3810 ;; Auto vars:     Size  Location     Type
  3811 ;;		None
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3821 ;;      Params:         2       0       0       0       0       0       0       0       0
  3822 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3823 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3824 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3825 ;;Total ram usage:        3 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    3
  3828 ;; This function calls:
  3829 ;;		_LCD_Data
  3830 ;; This function is called by:
  3831 ;;		_main
  3832 ;;		_Clear_Linea
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           	psect	text20
  3837  001754                     __ptext20:
  3838                           	callstack 0
  3839  001754                     _LCD_Cadena:
  3840                           	callstack 27
  3841  001754                     
  3842                           ;MiLCD.c: 101: void LCD_Cadena ( const char *dato);MiLCD.c: 102: {;MiLCD.c: 103:     whi
      +                          le (*dato)
  3843  001754  EFC8  F00B         	goto	l1981
  3844  001758                     l1975:
  3845                           
  3846                           ;MiLCD.c: 104:     {;MiLCD.c: 105:        _delay((unsigned long)((150)*(48000000/4000000
      +                          .0)));
  3847  001758  0E03               	movlw	3
  3848  00175A  6E09               	movwf	??_LCD_Cadena^0,c
  3849  00175C  0E55               	movlw	85
  3850  00175E                     u2207:
  3851  00175E  2EE8               	decfsz	wreg,f,c
  3852  001760  D7FE               	bra	u2207
  3853  001762  2E09               	decfsz	??_LCD_Cadena^0,f,c
  3854  001764  D7FC               	bra	u2207
  3855  001766  F000               	nop	
  3856  001768                     
  3857                           ;MiLCD.c: 106:         LCD_Data (*dato);
  3858  001768  C007  FFF6         	movff	LCD_Cadena@dato,tblptrl
  3859  00176C  C008  FFF7         	movff	LCD_Cadena@dato+1,tblptrh
  3860  001770  6AF8               	clrf	tblptru,c
  3861  001772  0E07               	movlw	(high __ramtop+-1)
  3862  001774  64F7               	cpfsgt	tblptrh,c
  3863  001776  D003               	bra	u1237
  3864  001778  0008               	tblrd		*
  3865  00177A  50F5               	movf	tablat,w,c
  3866  00177C  D005               	bra	u1230
  3867  00177E                     u1237:
  3868  00177E  CFF6 FFE1          	movff	tblptrl,fsr1l
  3869  001782  CFF7 FFE2          	movff	tblptrh,fsr1h
  3870  001786  50E7               	movf	indf1,w,c
  3871  001788                     u1230:
  3872  001788  EC3F  F00C         	call	_LCD_Data
  3873  00178C                     
  3874                           ;MiLCD.c: 107:         dato++;
  3875  00178C  4A07               	infsnz	LCD_Cadena@dato^0,f,c
  3876  00178E  2A08               	incf	(LCD_Cadena@dato+1)^0,f,c
  3877  001790                     l1981:
  3878                           
  3879                           ;MiLCD.c: 103:     while (*dato)
  3880  001790  C007  FFF6         	movff	LCD_Cadena@dato,tblptrl
  3881  001794  C008  FFF7         	movff	LCD_Cadena@dato+1,tblptrh
  3882  001798  6AF8               	clrf	tblptru,c
  3883  00179A  0E07               	movlw	(high __ramtop+-1)
  3884  00179C  64F7               	cpfsgt	tblptrh,c
  3885  00179E  D003               	bra	u1247
  3886  0017A0  0008               	tblrd		*
  3887  0017A2  50F5               	movf	tablat,w,c
  3888  0017A4  D005               	bra	u1240
  3889  0017A6                     u1247:
  3890  0017A6  CFF6 FFE1          	movff	tblptrl,fsr1l
  3891  0017AA  CFF7 FFE2          	movff	tblptrh,fsr1h
  3892  0017AE  50E7               	movf	indf1,w,c
  3893  0017B0                     u1240:
  3894  0017B0  0900               	iorlw	0
  3895  0017B2  A4D8               	btfss	status,2,c
  3896  0017B4  EFDE  F00B         	goto	u1251
  3897  0017B8  EFE0  F00B         	goto	u1250
  3898  0017BC                     u1251:
  3899  0017BC  EFAC  F00B         	goto	l1975
  3900  0017C0                     u1250:
  3901  0017C0  0012               	return		;funcret
  3902  0017C2                     __end_of_LCD_Cadena:
  3903                           	callstack 0
  3904                           
  3905 ;; *************** function _LCD_Data *****************
  3906 ;; Defined at:
  3907 ;;		line 112 in file "MiLCD.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;  data            1    wreg     unsigned char 
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;  data            1    5[COMRAM] unsigned char 
  3912 ;; Return value:  Size  Location     Type
  3913 ;;                  1    wreg      void 
  3914 ;; Registers used:
  3915 ;;		wreg, status,2, status,0
  3916 ;; Tracked objects:
  3917 ;;		On entry : 0/0
  3918 ;;		On exit  : 0/0
  3919 ;;		Unchanged: 0/0
  3920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3921 ;;      Params:         0       0       0       0       0       0       0       0       0
  3922 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3923 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3924 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3925 ;;Total ram usage:        2 bytes
  3926 ;; Hardware stack levels used:    1
  3927 ;; Hardware stack levels required when called:    2
  3928 ;; This function calls:
  3929 ;;		Nothing
  3930 ;; This function is called by:
  3931 ;;		_LCD_Cadena
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           	psect	text21
  3936  00187E                     __ptext21:
  3937                           	callstack 0
  3938  00187E                     _LCD_Data:
  3939                           	callstack 27
  3940                           
  3941                           ;incstack = 0
  3942                           ;LCD_Data@data stored from wreg
  3943  00187E  6E06               	movwf	LCD_Data@data^0,c
  3944  001880                     
  3945                           ;MiLCD.c: 112: void LCD_Data (char data);MiLCD.c: 113: {;MiLCD.c: 114:    _delay((unsign
      +                          ed long)((150)*(48000000/4000000.0)));
  3946  001880  0E03               	movlw	3
  3947  001882  6E05               	movwf	??_LCD_Data^0,c
  3948  001884  0E55               	movlw	85
  3949  001886                     u2217:
  3950  001886  2EE8               	decfsz	wreg,f,c
  3951  001888  D7FE               	bra	u2217
  3952  00188A  2E05               	decfsz	??_LCD_Data^0,f,c
  3953  00188C  D7FC               	bra	u2217
  3954  00188E  F000               	nop	
  3955  001890                     
  3956                           ;MiLCD.c: 115:     PORTD &= 0xf0;
  3957  001890  0EF0               	movlw	240
  3958  001892  1683               	andwf	131,f,c	;volatile
  3959  001894                     
  3960                           ;MiLCD.c: 116:     TRISD &= 0xf0;
  3961  001894  0EF0               	movlw	240
  3962  001896  1695               	andwf	149,f,c	;volatile
  3963  001898                     
  3964                           ;MiLCD.c: 118:     PORTD = PORTD | ((data>>4) & 0x0f);
  3965  001898  3806               	swapf	LCD_Data@data^0,w,c
  3966  00189A  0B0F               	andlw	15
  3967  00189C  0B0F               	andlw	15
  3968  00189E  1083               	iorwf	131,w,c	;volatile
  3969  0018A0  6E83               	movwf	131,c	;volatile
  3970  0018A2                     
  3971                           ;MiLCD.c: 120:     LATDbits.LATD5 = 1;
  3972  0018A2  8A8C               	bsf	140,5,c	;volatile
  3973  0018A4                     
  3974                           ;MiLCD.c: 121:     LATDbits.LATD6 = 0;
  3975  0018A4  9C8C               	bcf	140,6,c	;volatile
  3976  0018A6                     
  3977                           ;MiLCD.c: 123:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3978  0018A6  0E3C               	movlw	60
  3979  0018A8                     u2227:
  3980  0018A8  2EE8               	decfsz	wreg,f,c
  3981  0018AA  D7FE               	bra	u2227
  3982  0018AC                     
  3983                           ;MiLCD.c: 124:     LATDbits.LATD4 = 1;
  3984  0018AC  888C               	bsf	140,4,c	;volatile
  3985  0018AE                     
  3986                           ;MiLCD.c: 125:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  3987  0018AE  0E3C               	movlw	60
  3988  0018B0                     u2237:
  3989  0018B0  2EE8               	decfsz	wreg,f,c
  3990  0018B2  D7FE               	bra	u2237
  3991  0018B4                     
  3992                           ;MiLCD.c: 126:     LATDbits.LATD4 = 0;
  3993  0018B4  988C               	bcf	140,4,c	;volatile
  3994  0018B6                     
  3995                           ;MiLCD.c: 128:     PORTD &= 0xf0;
  3996  0018B6  0EF0               	movlw	240
  3997  0018B8  1683               	andwf	131,f,c	;volatile
  3998  0018BA                     
  3999                           ;MiLCD.c: 129:     PORTD |= (data&0x0f);
  4000  0018BA  5006               	movf	LCD_Data@data^0,w,c
  4001  0018BC  0B0F               	andlw	15
  4002  0018BE  1283               	iorwf	131,f,c	;volatile
  4003  0018C0                     
  4004                           ;MiLCD.c: 131:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  4005  0018C0  0E3C               	movlw	60
  4006  0018C2                     u2247:
  4007  0018C2  2EE8               	decfsz	wreg,f,c
  4008  0018C4  D7FE               	bra	u2247
  4009  0018C6                     
  4010                           ;MiLCD.c: 132:     LATDbits.LATD4 = 1;
  4011  0018C6  888C               	bsf	140,4,c	;volatile
  4012  0018C8                     
  4013                           ;MiLCD.c: 133:     _delay((unsigned long)((15)*(48000000/4000000.0)));
  4014  0018C8  0E3C               	movlw	60
  4015  0018CA                     u2257:
  4016  0018CA  2EE8               	decfsz	wreg,f,c
  4017  0018CC  D7FE               	bra	u2257
  4018  0018CE                     
  4019                           ;MiLCD.c: 134:     LATDbits.LATD4 = 0;
  4020  0018CE  988C               	bcf	140,4,c	;volatile
  4021  0018D0                     
  4022                           ;MiLCD.c: 136:     TRISD |= 0x0f;
  4023  0018D0  0E0F               	movlw	15
  4024  0018D2  1295               	iorwf	149,f,c	;volatile
  4025  0018D4  0012               	return		;funcret
  4026  0018D6                     __end_of_LCD_Data:
  4027                           	callstack 0
  4028                           
  4029 ;; *************** function _Init_Int *****************
  4030 ;; Defined at:
  4031 ;;		line 45 in file "main.c"
  4032 ;; Parameters:    Size  Location     Type
  4033 ;;		None
  4034 ;; Auto vars:     Size  Location     Type
  4035 ;;		None
  4036 ;; Return value:  Size  Location     Type
  4037 ;;                  1    wreg      void 
  4038 ;; Registers used:
  4039 ;;		None
  4040 ;; Tracked objects:
  4041 ;;		On entry : 0/0
  4042 ;;		On exit  : 0/0
  4043 ;;		Unchanged: 0/0
  4044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4045 ;;      Params:         0       0       0       0       0       0       0       0       0
  4046 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4047 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4048 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4049 ;;Total ram usage:        0 bytes
  4050 ;; Hardware stack levels used:    1
  4051 ;; Hardware stack levels required when called:    2
  4052 ;; This function calls:
  4053 ;;		Nothing
  4054 ;; This function is called by:
  4055 ;;		_main
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           	psect	text22
  4060  001A94                     __ptext22:
  4061                           	callstack 0
  4062  001A94                     _Init_Int:
  4063                           	callstack 28
  4064  001A94                     
  4065                           ;main.c: 48:     RCONbits.IPEN = 1;
  4066  001A94  8ED0               	bsf	208,7,c	;volatile
  4067                           
  4068                           ;main.c: 49:     INTCONbits.INT0IE = 1;
  4069  001A96  88F2               	bsf	242,4,c	;volatile
  4070                           
  4071                           ;main.c: 50:     INTCONbits.INT0IF = 0;
  4072  001A98  92F2               	bcf	242,1,c	;volatile
  4073                           
  4074                           ;main.c: 51:     INTCON2bits.INTEDG0 = 0;
  4075  001A9A  9CF1               	bcf	241,6,c	;volatile
  4076                           
  4077                           ;main.c: 52:     INTCONbits.GIEH=1;
  4078  001A9C  8EF2               	bsf	242,7,c	;volatile
  4079                           
  4080                           ;main.c: 55:     INTCON3bits.INT1E = 1;
  4081  001A9E  86F0               	bsf	240,3,c	;volatile
  4082                           
  4083                           ;main.c: 56:     INTCON3bits.INT1F = 0;
  4084  001AA0  90F0               	bcf	240,0,c	;volatile
  4085                           
  4086                           ;main.c: 57:     INTCON2bits.INTEDG2 = 0;
  4087  001AA2  98F1               	bcf	241,4,c	;volatile
  4088                           
  4089                           ;main.c: 58:     INTCON3bits.INT1IP=0;
  4090  001AA4  9CF0               	bcf	240,6,c	;volatile
  4091                           
  4092                           ;main.c: 60:     INTCONbits.GIEL=1;
  4093  001AA6  8CF2               	bsf	242,6,c	;volatile
  4094  001AA8  0012               	return		;funcret
  4095  001AAA                     __end_of_Init_Int:
  4096                           	callstack 0
  4097                           
  4098 ;; *************** function _InitPort *****************
  4099 ;; Defined at:
  4100 ;;		line 41 in file "main.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;		None
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;		None
  4105 ;; Return value:  Size  Location     Type
  4106 ;;                  1    wreg      void 
  4107 ;; Registers used:
  4108 ;;		wreg, status,2
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4114 ;;      Params:         0       0       0       0       0       0       0       0       0
  4115 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4116 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4117 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4118 ;;Total ram usage:        0 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    2
  4121 ;; This function calls:
  4122 ;;		Nothing
  4123 ;; This function is called by:
  4124 ;;		_main
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           	psect	text23
  4129  001AAA                     __ptext23:
  4130                           	callstack 0
  4131  001AAA                     _InitPort:
  4132                           	callstack 28
  4133  001AAA                     
  4134                           ;main.c: 42:  ADCON1bits.PCFG = 0xFF;
  4135  001AAA  0E0F               	movlw	15
  4136  001AAC  12C1               	iorwf	193,f,c	;volatile
  4137  001AAE                     
  4138                           ;main.c: 43:  TRISEbits.RE0=0;
  4139  001AAE  9096               	bcf	150,0,c	;volatile
  4140  001AB0  0012               	return		;funcret
  4141  001AB2                     __end_of_InitPort:
  4142                           	callstack 0
  4143                           
  4144 ;; *************** function _INT_RB1 *****************
  4145 ;; Defined at:
  4146 ;;		line 157 in file "main.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;		None
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;		None
  4151 ;; Return value:  Size  Location     Type
  4152 ;;                  1    wreg      void 
  4153 ;; Registers used:
  4154 ;;		wreg, status,2, status,0
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : 0/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4160 ;;      Params:         0       0       0       0       0       0       0       0       0
  4161 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4162 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4163 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4164 ;;Total ram usage:        4 bytes
  4165 ;; Hardware stack levels used:    1
  4166 ;; Hardware stack levels required when called:    1
  4167 ;; This function calls:
  4168 ;;		Nothing
  4169 ;; This function is called by:
  4170 ;;		Interrupt level 1
  4171 ;; This function uses a non-reentrant model
  4172 ;;
  4173                           
  4174                           	psect	intcodelo
  4175  000018                     __pintcodelo:
  4176                           	callstack 0
  4177  000018                     _INT_RB1:
  4178                           	callstack 21
  4179                           
  4180                           ;incstack = 0
  4181  000018  805A               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  4182  00001A  CFD8 F002          	movff	status,??_INT_RB1+1
  4183  00001E  CFE8 F003          	movff	wreg,??_INT_RB1+2
  4184  000022  CFE0 F004          	movff	bsr,??_INT_RB1+3
  4185  000026                     
  4186                           ;main.c: 159:    if(INTCON3bits.INT1F ==1)
  4187  000026  A0F0               	btfss	240,0,c	;volatile
  4188  000028  EF18  F000         	goto	i1u141_21
  4189  00002C  EF1A  F000         	goto	i1u141_20
  4190  000030                     i1u141_21:
  4191  000030  EF2D  F000         	goto	i1l150
  4192  000034                     i1u141_20:
  4193  000034                     
  4194                           ;main.c: 160:    {;main.c: 161:         a = ~a;
  4195  000034  0100               	movlb	0	; () banked
  4196  000036  1F64               	comf	_a& (0+255),f,b
  4197  000038                     
  4198                           ; BSR set to: 0
  4199                           ;main.c: 162:         LATEbits.LATE0=~LATEbits.LATE0;
  4200  000038  B08D               	btfsc	141,0,c	;volatile
  4201  00003A  EF21  F000         	goto	i1u142_21
  4202  00003E  EF24  F000         	goto	i1u142_20
  4203  000042                     i1u142_21:
  4204  000042  0E01               	movlw	1
  4205  000044  EF25  F000         	goto	i1u142_26
  4206  000048                     i1u142_20:
  4207  000048  0E00               	movlw	0
  4208  00004A                     i1u142_26:
  4209  00004A  0AFF               	xorlw	255
  4210  00004C  6E01               	movwf	??_INT_RB1^0,c
  4211  00004E  508D               	movf	141,w,c	;volatile
  4212  000050  1801               	xorwf	??_INT_RB1^0,w,c
  4213  000052  0BFE               	andlw	-2
  4214  000054  1801               	xorwf	??_INT_RB1^0,w,c
  4215  000056  6E8D               	movwf	141,c	;volatile
  4216  000058                     
  4217                           ; BSR set to: 0
  4218                           ;main.c: 163:         INTCON3bits.INT1F = 0;
  4219  000058  90F0               	bcf	240,0,c	;volatile
  4220  00005A                     i1l150:
  4221  00005A  C004  FFE0         	movff	??_INT_RB1+3,bsr
  4222  00005E  C003  FFE8         	movff	??_INT_RB1+2,wreg
  4223  000062  C002  FFD8         	movff	??_INT_RB1+1,status
  4224  000066  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  4225  000068  0010               	retfie	
  4226  00006A                     __end_of_INT_RB1:
  4227                           	callstack 0
  4228                           
  4229 ;; *************** function _INT_RB0 *****************
  4230 ;; Defined at:
  4231 ;;		line 146 in file "main.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;		None
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;		None
  4236 ;; Return value:  Size  Location     Type
  4237 ;;                  1    wreg      void 
  4238 ;; Registers used:
  4239 ;;		wreg, status,2, status,0
  4240 ;; Tracked objects:
  4241 ;;		On entry : 0/0
  4242 ;;		On exit  : 0/0
  4243 ;;		Unchanged: 0/0
  4244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4245 ;;      Params:         0       0       0       0       0       0       0       0       0
  4246 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4247 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4248 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4249 ;;Total ram usage:        0 bytes
  4250 ;; Hardware stack levels used:    1
  4251 ;; This function calls:
  4252 ;;		Nothing
  4253 ;; This function is called by:
  4254 ;;		Interrupt level 2
  4255 ;; This function uses a non-reentrant model
  4256 ;;
  4257                           
  4258                           	psect	intcode
  4259  000008                     __pintcode:
  4260                           	callstack 0
  4261  000008                     _INT_RB0:
  4262                           	callstack 21
  4263                           
  4264                           ;incstack = 0
  4265  000008  825A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4266  00000A  EDF6  F00C         	call	int_func,f	;refresh shadow registers
  4267                           
  4268                           	psect	intcode_body
  4269  0019EC                     __pintcode_body:
  4270                           	callstack 21
  4271  0019EC                     int_func:
  4272                           	callstack 21
  4273  0019EC  0006               	pop		; remove dummy address from shadow register refresh
  4274  0019EE                     i2l139:
  4275  0019EE  B081               	btfsc	129,0,c	;volatile
  4276  0019F0  EFFC  F00C         	goto	i2u139_41
  4277  0019F4  EFFE  F00C         	goto	i2u139_40
  4278  0019F8                     i2u139_41:
  4279  0019F8  EFF7  F00C         	goto	i2l139
  4280  0019FC                     i2u139_40:
  4281  0019FC                     
  4282                           ;main.c: 149:         aux = 1;
  4283  0019FC  0E01               	movlw	1
  4284  0019FE  0100               	movlb	0	; () banked
  4285  001A00  6F65               	movwf	_aux& (0+255),b
  4286  001A02                     
  4287                           ; BSR set to: 0
  4288                           ;main.c: 150:         if (codigo_aula == 101)
  4289  001A02  0E65               	movlw	101
  4290  001A04  1966               	xorwf	_codigo_aula& (0+255),w,b
  4291  001A06  A4D8               	btfss	status,2,c
  4292  001A08  EF08  F00D         	goto	i2u140_41
  4293  001A0C  EF0A  F00D         	goto	i2u140_40
  4294  001A10                     i2u140_41:
  4295  001A10  EF0E  F00D         	goto	i2l2145
  4296  001A14                     i2u140_40:
  4297  001A14                     
  4298                           ; BSR set to: 0
  4299                           ;main.c: 151:         {codigo_aula = 102;}
  4300  001A14  0E66               	movlw	102
  4301  001A16  6F66               	movwf	_codigo_aula& (0+255),b
  4302  001A18  EF10  F00D         	goto	i2l2147
  4303  001A1C                     i2l2145:
  4304                           
  4305                           ; BSR set to: 0
  4306  001A1C  0E65               	movlw	101
  4307  001A1E  6F66               	movwf	_codigo_aula& (0+255),b
  4308  001A20                     i2l2147:
  4309                           
  4310                           ; BSR set to: 0
  4311                           ;main.c: 153:         INTCONbits.INT0IF = 0;
  4312  001A20  92F2               	bcf	242,1,c	;volatile
  4313  001A22                     
  4314                           ; BSR set to: 0
  4315  001A22  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4316  001A24  0011               	retfie		f
  4317  001A26                     __end_of_INT_RB0:
  4318                           	callstack 0
  4319                           
  4320                           	psect	rparam
  4321  0000                     
  4322                           	psect	temp
  4323  00005A                     btemp:
  4324                           	callstack 0
  4325  00005A                     	ds	1
  4326  0000                     int$flags	set	btemp
  4327  0000                     wtemp8	set	btemp+1
  4328  0000                     ttemp5	set	btemp+1
  4329  0000                     ttemp6	set	btemp+4
  4330  0000                     ttemp7	set	btemp+8
  4331                           
  4332                           	psect	idloc
  4333                           
  4334                           ;Config register IDLOC0 @ 0x200000
  4335                           ;	unspecified, using default values
  4336  200000                     	org	2097152
  4337  200000  FF                 	db	255
  4338                           
  4339                           ;Config register IDLOC1 @ 0x200001
  4340                           ;	unspecified, using default values
  4341  200001                     	org	2097153
  4342  200001  FF                 	db	255
  4343                           
  4344                           ;Config register IDLOC2 @ 0x200002
  4345                           ;	unspecified, using default values
  4346  200002                     	org	2097154
  4347  200002  FF                 	db	255
  4348                           
  4349                           ;Config register IDLOC3 @ 0x200003
  4350                           ;	unspecified, using default values
  4351  200003                     	org	2097155
  4352  200003  FF                 	db	255
  4353                           
  4354                           ;Config register IDLOC4 @ 0x200004
  4355                           ;	unspecified, using default values
  4356  200004                     	org	2097156
  4357  200004  FF                 	db	255
  4358                           
  4359                           ;Config register IDLOC5 @ 0x200005
  4360                           ;	unspecified, using default values
  4361  200005                     	org	2097157
  4362  200005  FF                 	db	255
  4363                           
  4364                           ;Config register IDLOC6 @ 0x200006
  4365                           ;	unspecified, using default values
  4366  200006                     	org	2097158
  4367  200006  FF                 	db	255
  4368                           
  4369                           ;Config register IDLOC7 @ 0x200007
  4370                           ;	unspecified, using default values
  4371  200007                     	org	2097159
  4372  200007  FF                 	db	255
  4373                           
  4374                           	psect	config
  4375                           
  4376                           ;Config register CONFIG1L @ 0x300000
  4377                           ;	PLL Prescaler Selection bits
  4378                           ;	PLLDIV = 5, Divide by 5 (20 MHz oscillator input)
  4379                           ;	System Clock Postscaler Selection bits
  4380                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  4381                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  4382                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  4383  300000                     	org	3145728
  4384  300000  04                 	db	4
  4385                           
  4386                           ;Config register CONFIG1H @ 0x300001
  4387                           ;	Oscillator Selection bits
  4388                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
  4389                           ;	Fail-Safe Clock Monitor Enable bit
  4390                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  4391                           ;	Internal/External Oscillator Switchover bit
  4392                           ;	IESO = OFF, Oscillator Switchover mode disabled
  4393  300001                     	org	3145729
  4394  300001  0E                 	db	14
  4395                           
  4396                           ;Config register CONFIG2L @ 0x300002
  4397                           ;	Power-up Timer Enable bit
  4398                           ;	PWRT = ON, PWRT enabled
  4399                           ;	Brown-out Reset Enable bits
  4400                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  4401                           ;	Brown-out Reset Voltage bits
  4402                           ;	BORV = 3, Minimum setting 2.05V
  4403                           ;	USB Voltage Regulator Enable bit
  4404                           ;	VREGEN = OFF, USB voltage regulator disabled
  4405  300002                     	org	3145730
  4406  300002  18                 	db	24
  4407                           
  4408                           ;Config register CONFIG2H @ 0x300003
  4409                           ;	Watchdog Timer Enable bit
  4410                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4411                           ;	Watchdog Timer Postscale Select bits
  4412                           ;	WDTPS = 32768, 1:32768
  4413  300003                     	org	3145731
  4414  300003  1E                 	db	30
  4415                           
  4416                           ; Padding undefined space
  4417  300004                     	org	3145732
  4418  300004  FF                 	db	255
  4419                           
  4420                           ;Config register CONFIG3H @ 0x300005
  4421                           ;	CCP2 MUX bit
  4422                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
  4423                           ;	PORTB A/D Enable bit
  4424                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  4425                           ;	Low-Power Timer 1 Oscillator Enable bit
  4426                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  4427                           ;	MCLR Pin Enable bit
  4428                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  4429  300005                     	org	3145733
  4430  300005  01                 	db	1
  4431                           
  4432                           ;Config register CONFIG4L @ 0x300006
  4433                           ;	Stack Full/Underflow Reset Enable bit
  4434                           ;	STVREN = ON, Stack full/underflow will cause Reset
  4435                           ;	Single-Supply ICSP Enable bit
  4436                           ;	LVP = OFF, Single-Supply ICSP disabled
  4437                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  4438                           ;	ICPRT = OFF, ICPORT disabled
  4439                           ;	Extended Instruction Set Enable bit
  4440                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  4441                           ;	Background Debugger Enable bit
  4442                           ;	DEBUG = 0x1, unprogrammed default
  4443  300006                     	org	3145734
  4444  300006  81                 	db	129
  4445                           
  4446                           ; Padding undefined space
  4447  300007                     	org	3145735
  4448  300007  FF                 	db	255
  4449                           
  4450                           ;Config register CONFIG5L @ 0x300008
  4451                           ;	Code Protection bit
  4452                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  4453                           ;	Code Protection bit
  4454                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  4455                           ;	Code Protection bit
  4456                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  4457                           ;	Code Protection bit
  4458                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  4459  300008                     	org	3145736
  4460  300008  0F                 	db	15
  4461                           
  4462                           ;Config register CONFIG5H @ 0x300009
  4463                           ;	Boot Block Code Protection bit
  4464                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  4465                           ;	Data EEPROM Code Protection bit
  4466                           ;	CPD = OFF, Data EEPROM is not code-protected
  4467  300009                     	org	3145737
  4468  300009  C0                 	db	192
  4469                           
  4470                           ;Config register CONFIG6L @ 0x30000A
  4471                           ;	Write Protection bit
  4472                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  4473                           ;	Write Protection bit
  4474                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  4475                           ;	Write Protection bit
  4476                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  4477                           ;	Write Protection bit
  4478                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  4479  30000A                     	org	3145738
  4480  30000A  0F                 	db	15
  4481                           
  4482                           ;Config register CONFIG6H @ 0x30000B
  4483                           ;	Configuration Register Write Protection bit
  4484                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  4485                           ;	Boot Block Write Protection bit
  4486                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  4487                           ;	Data EEPROM Write Protection bit
  4488                           ;	WRTD = OFF, Data EEPROM is not write-protected
  4489  30000B                     	org	3145739
  4490  30000B  E0                 	db	224
  4491                           
  4492                           ;Config register CONFIG7L @ 0x30000C
  4493                           ;	Table Read Protection bit
  4494                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4495                           ;	Table Read Protection bit
  4496                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4497                           ;	Table Read Protection bit
  4498                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4499                           ;	Table Read Protection bit
  4500                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4501  30000C                     	org	3145740
  4502  30000C  0F                 	db	15
  4503                           
  4504                           ;Config register CONFIG7H @ 0x30000D
  4505                           ;	Boot Block Table Read Protection bit
  4506                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  4507  30000D                     	org	3145741
  4508  30000D  40                 	db	64
  4509                           tosu	equ	0xFFF
  4510                           tosh	equ	0xFFE
  4511                           tosl	equ	0xFFD
  4512                           stkptr	equ	0xFFC
  4513                           pclatu	equ	0xFFB
  4514                           pclath	equ	0xFFA
  4515                           pcl	equ	0xFF9
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           indf0	equ	0xFEF
  4523                           postinc0	equ	0xFEE
  4524                           postdec0	equ	0xFED
  4525                           preinc0	equ	0xFEC
  4526                           plusw0	equ	0xFEB
  4527                           fsr0h	equ	0xFEA
  4528                           fsr0l	equ	0xFE9
  4529                           wreg	equ	0xFE8
  4530                           indf1	equ	0xFE7
  4531                           postinc1	equ	0xFE6
  4532                           postdec1	equ	0xFE5
  4533                           preinc1	equ	0xFE4
  4534                           plusw1	equ	0xFE3
  4535                           fsr1h	equ	0xFE2
  4536                           fsr1l	equ	0xFE1
  4537                           bsr	equ	0xFE0
  4538                           indf2	equ	0xFDF
  4539                           postinc2	equ	0xFDE
  4540                           postdec2	equ	0xFDD
  4541                           preinc2	equ	0xFDC
  4542                           plusw2	equ	0xFDB
  4543                           fsr2h	equ	0xFDA
  4544                           fsr2l	equ	0xFD9
  4545                           status	equ	0xFD8

Data Sizes:
    Strings     137
    Constant    0
    Data        0
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     85      89
    BANK0           160     36      75
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@texto(BANK0[10]), 

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_6(CODE[18]), STR_5(CODE[21]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 21
		 -> STR_6(CODE[18]), STR_5(CODE[21]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_6(CODE[18]), STR_5(CODE[21]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 10
		 -> main@texto(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S1202_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@texto(BANK0[10]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@texto(BANK0[10]), 

    LCD_Cadena@dato	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_10(CODE[17]), STR_9(CODE[17]), STR_8(CODE[15]), STR_7(CODE[15]), 
		 -> main@texto(BANK0[10]), STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _USART_Init->___aldiv
    _LCD_gotoXY->_LCD_Comando
    _LCD_Init->_LCD_Comando
    _LCD_Cadena->_LCD_Data

Critical Paths under _INT_RB1 in COMRAM

    None.

Critical Paths under _INT_RB0 in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf

Critical Paths under _INT_RB1 in BANK0

    None.

Critical Paths under _INT_RB0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INT_RB1 in BANK1

    None.

Critical Paths under _INT_RB0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INT_RB1 in BANK2

    None.

Critical Paths under _INT_RB0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INT_RB1 in BANK3

    None.

Critical Paths under _INT_RB0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INT_RB1 in BANK4

    None.

Critical Paths under _INT_RB0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INT_RB1 in BANK5

    None.

Critical Paths under _INT_RB0 in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INT_RB1 in BANK6

    None.

Critical Paths under _INT_RB0 in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INT_RB1 in BANK7

    None.

Critical Paths under _INT_RB0 in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0   11806
                                             22 BANK0     14    14      0
                           _InitPort
                           _Init_Int
                         _LCD_Cadena
                        _LCD_Comando
                           _LCD_Init
                         _LCD_gotoXY
                         _USART_Init
                           _USART_RX
                           _USART_TX
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             16    10      6    8597
                                              6 BANK0     16    10      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    7931
                                             83 COMRAM     2     2      0
                                              0 BANK0      6     0      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6    7458
                                             67 COMRAM    16    10      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    5683
                                             31 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3417
                                             20 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                              4 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1537
                                             13 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1037
                                              4 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             22 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                              4 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                              4 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (1) _USART_TX                                             1     1      0      22
                                              4 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_RX                                             8     8      0       0
                                              4 COMRAM     8     8      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                           8     4      4     725
                                             18 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                              4 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _LCD_gotoXY                                           5     1      4    1326
                                              6 COMRAM     5     1      4
                        _LCD_Comando
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             1     1      0      44
                                              6 COMRAM     1     1      0
                        _LCD_Comando
 ---------------------------------------------------------------------------------
 (2) _LCD_Comando                                          2     2      0      44
                                              4 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Cadena                                           3     1      2     773
                                              6 COMRAM     3     1      2
                           _LCD_Data
 ---------------------------------------------------------------------------------
 (2) _LCD_Data                                             2     2      0      44
                                              4 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Init_Int                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitPort                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INT_RB1                                              4     4      0       0
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INT_RB0                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitPort
   _Init_Int
   _LCD_Cadena
     _LCD_Data
   _LCD_Comando
   _LCD_Init
     _LCD_Comando
   _LCD_gotoXY
     _LCD_Comando
   _USART_Init
     ___aldiv
   _USART_RX
   _USART_TX
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
                 _putch
             _strlen
         _fputc
           _putch

 _INT_RB1 (ROOT)

 _INT_RB0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     24      4B       5       46.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     55      59       1       94.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A4      20        0.0%
DATA                 0      0      A4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Dec 15 17:17:42 2020

                      _a 0064             ?_LCD_Comando 0001                       l20 187C  
                     l31 17C0                       l17 14E8                       l25 19EA  
                     l34 18D4                       l62 1A92                       l56 16E4  
                     l66 1752                       l59 1A80                       bsr 000FE0  
                    l111 1AB0                      l114 1AA8                      l232 140A  
                    l280 12FE                      l267 119A                      l910 19AA  
                    l902 181A                      l903 1822                      l831 1926  
                    l922 15B2                      l930 196A                      l907 19A2  
                    l933 1AB2                      l861 163A                      l863 1674  
                    l871 0C28                      l858 15F8                      l939 1A5A  
                    l869 0C20                      l896 1012                      l889 0E5E  
            ?_LCD_gotoXY 0007                      _abs 196C                      _aux 0065  
                    _pad 15B4                      wreg 000FE8                     l2001 1A80  
                   l2011 174E                     l2003 1A8E                     ?_abs 0017  
                   l2021 1A94                     l2013 1750                     l2005 16E6  
                   l2007 173C                     l2017 1AAA                     l2009 173E  
                   l2201 1078                     l2019 1AAE                     l2211 10C2  
                   l2203 107C                     l2221 1132                     l2213 10D0  
                   l2205 1088                     l2301 0BEA                     l2223 1144  
                   l2215 10E2                     l2207 10A6                     l2311 0C42  
                   l2303 0BF8                     l2217 1110                     l2209 10AE  
                   l2225 114A                     l2241 11D2                     l2233 119C  
                   l2161 150E                     l2321 0C6E                     l2313 0C50  
                   l2305 0BFA                     l2401 17CA                     l2227 115A  
                   l2219 1130                     l2251 123A                     l2243 11E0  
                   l2235 11A0                     l2163 1518                     l2171 1928  
                   l2331 0D7A                     l2323 0CF0                     l2315 0C56  
                   l2307 0C14                     l2403 17D8                     l2411 18F0  
                   l2229 117A                     l2253 1248                     l2261 12AE  
                   l2245 1200                     l2237 11AE                     l2165 1536  
                   l2157 14EA                     l2173 1934                     l2181 1A32  
                   l2341 0DEC                     l2333 0D98                     l2325 0CF6  
                   l2317 0C5E                     l2309 0C30                     l2405 17FE  
                   l2413 18F8                     l2501 0B50                     l2421 0890  
                   l2191 1018                     l2263 12BE                     l2255 1276  
                   l2247 121E                     l2239 11CE                     l2167 156C  
                   l2159 14FC                     l2175 1946                     l2183 1A36  
                   l2271 15C2                     l2351 0E26                     l2343 0DFA  
                   l2335 0DB2                     l2327 0CFC                     l2319 0C68  
                   l2415 1914                     l2407 18D6                     l2503 0B68  
                   l2431 08DE                     l2423 0894                     l1801 184A  
                   l2193 1026                     l2265 12DE                     l2257 1296  
                   l2249 1226                     l2177 194A                     l2185 1A4E  
                   l2281 1618                     l2273 15D6                     l2345 0E00  
                   l2353 0E36                     l2337 0DCC                     l2329 0D60  
                   l2361 0E92                     l2409 18E8                     l2441 093E  
                   l2433 08F8                     l2425 0898                     l1811 185C  
                   l1803 184C                     l2195 1046                     l2259 12A8  
                   l2291 196C                     l2179 1A26                     l2283 161C  
                   l2275 15E4                     l2347 0E12                     l2339 0DDA  
                   l2371 0F38                     l2363 0EA4                     l2451 099A  
                   l2443 0952                     l2435 090A                     l2427 08BE  
                   l2419 088C                     l1821 1876                     l1813 1860  
                   l1805 1852                     l1901 13EA                     l2197 104A  
                   l2189 1014                     l2293 1986                     l2285 1648  
                   l2277 15F0                     l2269 15B4                     l2349 0E1E  
                   l2381 0FB6                     l2365 0EA8                     l2357 0E60  
                   l2461 09E2                     l2453 09A0                     l2445 095E  
                   l2437 0912                     l2429 08D2                     l1831 1894  
                   l1823 1878                     l1815 1868                     l1807 1854  
                   l1903 13FA                     l2199 1058                     l2287 165C  
                   l2279 1604                     l2295 0B82                     l2375 0F70  
                   l2367 0ECC                     l2359 0E84                     l2391 0FDC  
                   l2463 0A00                     l2471 0A58                     l2455 09A6  
                   l2447 0978                     l2439 092C                     l1841 18AC  
                   l1833 1898                     l1817 186E                     l1809 185A  
                   l1921 141C                     l2297 0BA2                     l2393 1000  
                   l2377 0F94                     l2385 0FC2                     l2369 0EF0  
                   l2473 0A6C                     l2465 0A1A                     l2449 0980  
                   l2457 09BE                     l2481 0AA0                     l1851 18C0  
                   l1843 18AE                     l1835 18A2                     l1827 1880  
                   l1819 1870                     l1931 1446                     l1923 141E  
                   l1915 140C                     l2299 0BCA                     l2387 0FD0  
                   l2379 0FA2                     l2491 0B1E                     l2483 0ABA  
                   l2475 0A80                     l2467 0A2E                     l2459 09D0  
                   l1853 18C6                     l1845 18B4                     l1837 18A4  
                   l1829 1890                     l1941 147A                     l1933 144C  
                   l1925 1420                     l1917 1412                     l2493 0B26  
                   l2485 0AC6                     l2477 0A90                     l2469 0A3A  
                   l1855 18C8                     l1847 18B6                     l1839 18A6  
                   l1791 1826                     l1951 14AC                     l1943 1480  
                   l1935 1454                     l1927 1430                     l1919 141A  
                   l1871 1326                     l1863 1300                     l2399 17C2  
                   l2495 0B40                     l2487 0AE0                     l1857 18CE  
                   l1849 18BA                     l1793 1836                     l1953 14BC  
                   l1945 1490                     l1937 145A                     l1929 1436  
                   l1881 136E                     l1873 1334                     l1865 1304  
                   l2497 0B44                     l2489 0AF4                     l1859 18D0  
                   l1795 183A                     l1955 14C2                     l1947 1496  
                   l1939 146A                     l1963 19AC                     l1891 13B8  
                   l1883 1376                     l1875 1344                     l1867 1312  
                   l2499 0B4A                     l1981 1790                     l1973 1754  
                   l1797 183E                     l1957 14D2                     l1949 14A6  
                   l1965 19BC                     l1893 13C8                     l1885 1382  
                   l1877 1348                     l1869 1322                     ?_pad 0015  
                   l1975 1758                     l1799 1848                     l1959 14D8  
                   l1967 19D6                     l1895 13CA                     l1887 1390  
                   l1879 1358                     l1991 16DA                     l1983 1676  
                   l1977 1768                     l1969 19E2                     l1897 13D4  
                   l1889 139A                     l1993 16DC                     l1985 167A  
                   l1979 178C                     l1899 13DA                     l1995 16DE  
                   l1987 16D6                     l1997 16E0                     l1989 16D8  
                   l1999 16E2                     STR_1 085B                     STR_3 0839  
                   STR_4 0839                     STR_5 0801                     STR_6 0816  
                   STR_7 086C                     STR_8 087B                     STR_9 0828  
        __end_of_INT_RB0 1A26          __end_of_INT_RB1 006A                     u1200 13EA  
                   u1201 13E6                     u1220 19D6                     u1300 1716  
                   u1221 19D2                     u1230 1788                     u1150 1312  
                   u1310 173C                     u1151 130E                     u1311 1738  
                   u2007 0B0C                     u1240 17B0                     u1160 1334  
                   u1161 1330                     u2017 0B32                     u1250 17C0  
                   u1170 136E                     u1251 17BC                     u2107 1486  
                   u1171 136A                     u2027 0B5C                     u1180 1390  
                   u1260 1A8E                     u1500 1058                     u1237 177E  
                   u2117 149C                     u1181 138C                     u2037 1744  
                   u1261 1A8A                     u1501 1054                     _LATA 000F89  
                   u1190 13B8                     u1270 16F6                     u1430 14FC  
                   u1247 17A6                     u2207 175E                     u2127 14B2  
                   u2047 19B2                     u1191 13B4                     u1271 16F0  
                   u1511 1082                     u1431 14F8                     u1280 16F8  
                   u1520 10A6                     u1600 1276                     u1440 150E  
                   u2217 1886                     u2137 14C8                     u2057 1426  
                   u1521 10A2                     u1601 1272                     u1441 150A  
                   u1290 1714                     u1530 10D0                     u1610 12BE  
                   u1450 1536                     u2227 18A8                     u2147 14DE  
                   u2067 143C                     u1291 170E                     u1531 10CC  
                   u1611 12BA                     u1451 1532                     u1540 1110  
                   u1460 156C                     u1620 15C2                     u1700 0BF8  
                   u2237 18B0                     u2157 182C                     u2077 144E  
                   u1541 110C                     u1461 1568                     u1621 15BE  
                   u1701 0BF4                     u1550 115A                     u1470 196A  
                   u1630 15E4                     u1710 0C14                     u2247 18C2  
                   u2167 184E                     u2087 1460                     u1551 1156  
                   u1471 1966                     u1631 15E0                     u1711 0C10  
                   u1560 11AE                     u1480 1A4E                     u1640 163A  
                   u1800 0DFA                     u1720 0C42                     u2257 18CA  
                   u2177 1856                     u2097 1470                     u1561 11AA  
                   u1481 1A4A                     u1641 1636                     u1801 0DF6  
                   u1721 0C3E                     u1490 1026                     u1570 11E0  
                   u1650 1648                     u1810 0E12                     u1730 0C50  
                   u2187 186A                     u1491 1022                     u1571 11DC  
                   u1651 1644                     u1811 0E0E                     u1731 0C4C  
                   u1580 121E                     u1660 1986                     u1740 0D7A  
                   u1820 0E84                     u1900 09E2                     u2197 1872  
                   u1581 121A                     u1661 1982                     u1741 0D76  
                   u1821 0E80                     u1901 09DE                     u1590 1248  
                   u1750 0D98                     u1670 0BB2                     u1830 0ECC  
                   u1910 0A80                     u1591 1244                     u1751 0D94  
                   u1671 0BAC                     u1831 0EC8                     u1911 0A7C  
                   u1760 0DB2                     u1680 0BB4                     u1840 0EF0  
                   u1920 0B7A                     u1761 0DAE                     u1841 0EEC  
                   u1921 0B76                     u1770 0DCC                     u1690 0BCA  
                   u1850 0F94                     u1771 0DC8                     u1691 0BC6  
                   u1851 0F90                     u1780 0DDA                     u1860 181A  
                   u1781 0DD6                     u1861 1816                     u1790 0DEC  
                   u1870 090A                     u1791 0DE8                     u1871 0906  
                   u1880 093E                     u1881 093A                     u1937 08EA  
                   u1890 09D0                     u1891 09CC                     u1947 091E  
                   u1957 096A                     u1967 098C                     u1977 09B2  
                   u1987 0A46                     u1997 0AD2                     abs@a 0017  
                   _dbuf 0067                     _main 088C                     _dtoa 0B82  
                   _prec 0056                     _nout 0060                     pad@i 001C  
                   pad@p 0019                     fsr1h 000FE2                     fsr2h 000FDA  
                   indf1 000FE7                     indf2 000FDF                     fsr1l 000FE1  
                   pad@w 001E                     fsr2l 000FD9                     btemp 005A  
                   start 006A             ___param_bank 000000                    ??_abs 0019  
                  ??_pad 001B         __end_of_LCD_Data 18D6         __end_of_LCD_Init 14EA  
           LCD_Data@data 0006          __end_of___aldiv 140C          __end_of___aodiv 119C  
                  ?_main 0001                    ?_dtoa 0020          __end_of___aomod 1300  
                  STR_10 084A                    i1l150 005A                    i2l144 1A22  
                  i2l139 19EE                    _RCREG 000FAE             vfpfcnvrt@fmt 0046  
                  _SPBRG 000FAF                    _PORTD 000F83                    _TRISD 000F95  
                  _TXREG 000FAD             USART_TX@data 0005      __size_of_LCD_Cadena 006E  
                  _flags 0058                    _fputc 14EA                    _fputs 1928  
                  pad@fp 0015         __end_of_USART_RX 1754         __end_of_USART_TX 1A94  
                  _width 0062                    _putch 1AB2                    main@i 00AA  
                  dtoa@d 0022                    dtoa@i 0042                    dtoa@n 003A  
                  dtoa@p 0034                    dtoa@s 0038                    dtoa@w 0036  
                  tablat 000FF5                    ttemp5 005B                    ttemp6 005E  
                  ttemp7 0062                    status 000FD8                    wtemp8 005B  
        __end_of_sprintf 1928              ?_USART_Init 0013      __size_of_LCD_gotoXY 0040  
        __initialization 1A5C              LCD_gotoXY@x 0007              LCD_gotoXY@y 0009  
           __end_of_main 0B82             __end_of_dtoa 0E60         __end_of_Init_Int 1AAA  
       __end_of_InitPort 1AB2                   ??_main 009D                   ??_dtoa 002A  
          __activetblptr 000002                ??_INT_RB0 0001                ??_INT_RB1 0001  
                 ?_fputc 0005                   ?_fputs 000E                   ?_putch 0001  
                 i1l2151 0034                   i1l2153 0038                   i1l2155 0058  
                 i1l2149 0026                   i2l2141 1A02                   i2l2143 1A14  
                 i2l2145 1A1C                   i2l2137 19EE                   i2l2147 1A20  
                 i2l2139 19FC             vfprintf@cfmt 0054                ??___aldiv 000D  
              ??___aodiv 0015                ??___aomod 0015                   clear_0 1A62  
                 pad@buf 0017     __size_of_LCD_Comando 005A                   dtoa@fp 0020  
                 _strlen 1A26                   fputc@c 0005                   fputs@c 0012  
                 fputs@i 0013                   fputs@s 000E             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
    __size_of_USART_Init 0070                   putch@c 0001         __end_of_vfprintf 1824  
              ??_sprintf 0056                ?_LCD_Data 0001               __accesstop 0060  
__end_of__initialization 1A70                ?_LCD_Init 0001            ___rparam_used 000001  
           ??_LCD_Cadena 0009           __pcstackCOMRAM 0001            __end_of_fputc 15B4  
          __end_of_fputs 196C            __end_of_putch 1AB4           LCD_Cadena@dato 0007  
              ?_USART_RX 0001                ?_USART_TX 0001             ??_LCD_gotoXY 000B  
                ??_fputc 0009                  ??_fputs 0012       __end_of_LCD_Cadena 17C2  
                ??_putch 0005               __pbssBANK0 0060                ?_Init_Int 0001  
             ??_LCD_Data 0005                ?_InitPort 0001               ??_LCD_Init 0007  
     __end_of_LCD_gotoXY 19EC               ??_USART_RX 0005               ??_USART_TX 0005  
                ?_strlen 0005                  _INT_RB0 0008                  _INT_RB1 0018  
     __size_of_vfpfcnvrt 01B4               ??_Init_Int 0005               ??_InitPort 0005  
           ??_USART_Init 0017                  __Hparam 0000                  __Lparam 0000  
                ___aldiv 1300                  ___aodiv 1014                  ___aomod 119C  
              ?_vfprintf 0087             __psmallconst 0800           USART_Init@BAUD 0013  
                __pcinit 1A5C                  __ramtop 0800                  __ptext0 088C  
                __ptext1 18D6                  __ptext2 17C2                  __ptext3 0E60  
                __ptext4 0B82                  __ptext5 15B4                  __ptext6 1A26  
                __ptext7 1928                  __ptext8 14EA                  __ptext9 1AB2  
        __size_of_strlen 0036             __size_of_abs 0040             __size_of_pad 00C2  
       ___aldiv@dividend 0005       __end_of_USART_Init 16E6           LCD_Comando@cmd 0006  
                _sprintf 18D6           __pintcode_body 19EC     end_of_initialization 1A70  
                fputc@fp 0007            __Lmediumconst 0000                  int_func 19EC  
                fputs@fp 0010        __end_of_vfpfcnvrt 1014                _RCSTAbits 000FAB  
       ___aldiv@quotient 000F                  postdec2 000FDD                  postinc0 000FEE  
                postinc1 000FE6                  postinc2 000FDE               ??_vfprintf 0054  
                strlen@a 0007                  strlen@s 0005                _PORTBbits 000F81  
              _TRISCbits 000F94                _TRISDbits 000F95                _TRISEbits 000F96  
              _TXSTAbits 000FAC        __size_of_LCD_Data 0058        __size_of_LCD_Init 00DE  
          ??_LCD_Comando 0005              vfpfcnvrt@ap 0048              vfpfcnvrt@fp 0044  
            vfpfcnvrt@ll 004C        __size_of_USART_RX 006E        __size_of_USART_TX 0016  
         __end_of_strlen 1A5C      start_initialization 1A5C              __end_of_abs 19AC  
            __end_of_pad 1676        __size_of_Init_Int 0016        __size_of_InitPort 0008  
            vfprintf@fmt 0089                 ??_strlen 0007      __end_of_LCD_Comando 187E  
            __pbssCOMRAM 0056                 ?_INT_RB0 0001                 ?_INT_RB1 0001  
          __pcstackBANK0 0087         ___aodiv@dividend 0005                _dtoa$1275 0032  
              __pintcode 0008                 ?___aldiv 0005                 ?___aodiv 0005  
               ?___aomod 0005         ___aodiv@quotient 0017              __pintcodelo 0018  
      __size_of_vfprintf 0062              __smallconst 0800              _codigo_aula 0066  
               ?_sprintf 008D           __size_of_fputc 00CA           __size_of_fputs 0044  
         __size_of_putch 0002          ___aldiv@divisor 0009                 _LCD_Data 187E  
        ___aldiv@counter 000D                 _LCD_Init 140C                 _LATDbits 000F8C  
               _LATEbits 000F8D                 i1u141_20 0034                 i1u141_21 0030  
               i1u142_20 0048                 i1u142_21 0042                 i1u142_26 004A  
               i2u140_40 1A14                 i2u140_41 1A10                 i2u139_40 19FC  
               i2u139_41 19F8                 _RCONbits 000FD0              _LCD_Comando 1824  
              _vfpfcnvrt 0E60                 _USART_RX 16E6                 _USART_TX 1A7E  
             _ADCON1bits 000FC1                main@texto 009F         __size_of_INT_RB0 1A1E  
       __size_of_INT_RB1 0052              _INTCON2bits 000FF1              _INTCON3bits 000FF0  
               _Init_Int 1A94                 _InitPort 1AAA                 __Hrparam 0000  
             vfprintf@ap 008B                 __Lrparam 0000               vfprintf@fp 0087  
       __size_of___aldiv 010C         __size_of___aodiv 0188         __size_of___aomod 0164  
             ?_vfpfcnvrt 0044          ___aodiv@divisor 000D          ___aodiv@counter 0015  
             sprintf@fmt 008F                 __ptext10 196C                 __ptext11 119C  
               __ptext20 1754                 __ptext12 1014                 __ptext21 187E  
               __ptext13 1A7E                 __ptext22 1A94                 __ptext14 16E6  
               __ptext23 1AAA                 __ptext15 1676                 __ptext16 1300  
               __ptext17 19AC                 __ptext18 140C                 __ptext19 1824  
       __size_of_sprintf 0052            __size_of_main 02F6            __size_of_dtoa 02DE  
        _USART_Init$1530 0017               _LCD_Cadena 1754                 int$flags 005A  
               _vfprintf 17C2                 main@temp 00A9         ___aomod@dividend 0005  
             _LCD_gotoXY 19AC               _INTCONbits 000FF2                 intlevel1 0000  
               intlevel2 0000                sprintf@ap 0095          ___aomod@divisor 000D  
            ??_vfpfcnvrt 004A          ___aomod@counter 0015                 sprintf@f 0097  
               sprintf@s 008D             ___aldiv@sign 000E             ___aodiv@sign 0016  
           ___aomod@sign 0016               _USART_Init 1676              ?_LCD_Cadena 0007  
